для   ..,   @




чаиников
  Beginning
Programming
with Python®
   Ьу   john Paul Mueller




  dUmmies            А   Wiley Brand
                           оп®


      Джон Пол Мюллер




для      v                           (!)




чаиников




        [JOJ AUAВ1iUК4
      Москва   +   Санкт-Петербург
                   2019
ББК   32.973.26-018.2.75
      М98
УДК   681.3.07

                        Компьютерное издательство "Диалектика"

                              Перевод с английского А.П. Сергеева
                                   Под редакцией В.Р. Гинзбур,~а

       По общим вопросам обращайтесь в издательство "Диалектика" по адресу:
                         info@dialektika.com, http://www.dialektika.com

   Мюллер, Джон Пол

М98     Python для чайников, 2-е изд. : Пер. с англ. -                    СПб.   : ООО "Диалектика",
      2019. -416 с.: ил. - Парал. тит. англ.
          ISBN 978-5-907144-26-2              (рус.)
                                                                                ББК      32.973.26-018.2. 75
   Все названия программных продуктов являются зарегистрированными торговыми марками
соответствующих фирм.
    Никакая часть настоящего издания ни в каких uелях не может быть воспроизведена в какой бы
то ни было форме и какими бы то ни было средствами, будь то электронные или механические,
включая фотокопирование и запись на магнитный носитель, если на это нет письменного разрешения
издательства   John Wiley & Sons, lnc.
    Copyright © 2019 Ьу Dialektika Computer PuЫishing.
    Origina1 English edition Copyright (!:,'J 2018 Ьу John Wiley & Sons, Inc.
    А11 rights rcscrved including the right of reproduction in whole or in part in any form. This translation
is puЫishcd Ьу arrangemcnt with John Wiley & Sons, lnc.

                                     Научно-популярное издание
                                           Джон Пол Мюллер

                                     Python для             чайников,
                                                    2-е издание

                             Подписано в печать        29.04.2019. Формат 70х 100/ 16
                                                Гарнитура      Times.
                                        Усл. печ.   л. 33,54. Уч.-изд. л. 21,1
                                          Тираж     500 экз. Заказ № 4201

                            Отпечатано в АО "Первая Образuовая типография"
                                    Филиал "Чеховский Печатный Двор"
                      142300. Московская область, г. Чехов, ул. Полиграфистов, д. 1
                     Сайт: www.chpd.ru, E-mail: sales@chpd.ru, тел. 8 (499) 270-73-59


       ООО "Диалектика",      195027,    Санкт-Петербург, Магнитогорская ул., д.        30, лит.   А, пом.   848

ISBN 978-5-907144-26-2 (рус.)                                              © 2019 ООО "Диалектика"
ISBN 978-1-119-45789-3 (англ.)                                             © 2018 Ьу John Wiley & Sons, lnc.
Оглавление
Введение                                                                15

Часть  1. Знакомство со средой Python                                   19
Глава 1. Разrовор с компьютером                                         21
Глава 2. Установка Python                                               35
Глава 3. Взаимодействие с Python                                        53
Глава 4. Создание первоrо приложения                                    73
Глава 5. Работа с Anaconda                                             1О1


Часть  2. Основы программирования на Python                            121
Глава 6. Хранение и изменение информации                               123
Глава 7. Управление данными                                            133
Глава 8. Принятие решений                                              155
Глава 9. Выполнение повторяющихся действий                             171
Глава 1О. Обработка ошибок                                             185

Часть   3.   Профессиональные методики программирования
             на   Python                                               217
Глава   11. Пакеты                                                     219
Глава   12. Работа со строками                                         251
Глава   13. Управление списками                                        269
Глава   14. Коллекции данных                                           289
Глава   15. Создание и использование   классов                         309

Часть    4. Решение сложных задач                                      333
Глава   16. Хранение данных в файлах                                   335
Глава   17. Отправка сообщений электронной       почты                 353

Часть  S. Великолепные десятки                                         371
Глава 18. Десять ценных ресурсов для программистов                     373
Глава 19. Десять утилит, улучшающих работу с Python                    385
Глава 20. Десять (или около того) библиотек, о которых   стоит знать   397
Предметный указатель                                                   406
Содержание
  Об авторе                                                           14

Введение                                                              15
  Особенности книги                                                   15
  Исходные предположения                                              16
  Пиктограммы, используемые в книге                                   17
  Дополнительные материалы                                            17
  Что дальше                                                          18
  Ждем ваших отзывов!                                                 18


Часть    1. Знакомство со средой Python                               19

Глава   1.   Разговор с компьютером                                   21
  Зачем нужно общаться с компьютером                                  22
  Приложение       -   это тоже средство общения                      23
    Повседневные процедуры                                            23
    Создание процедур                                                 24
    Приложения         -   это те же процедуры                        25
    Компьютеры воспринимают все буквально                             25
  Что же такое приложение                                             25
    Компьютеры общаются на специальном языке                          26
    Как наладить общение человека с компьютером                       27
  В чем секрет популярности            Python                         28
    Почему именно           Python                                    29
    Преимущества           Python                                     30
    В каких организациях используется              Python             31
    Где найти полезные приложения               Python                32
    Python и другие языки            программирования                 33

Глава   2.   Установка     Python                                     35
  Загрузка нужной версии                                              35
  Инсталляция      Python                                             38
    В    Windows                                                      39
    В Мае                                                             42
    В    Linux                                                        43
  Получение доступа к копии            Python   на своем компьютере   45
    В    Windows                                                      46
    В Мае                                                             49
     В   Linux                                                          49
  Тестирование установки                                                50
Глава 3. Взаимодействие с Python                                        53
  Открытие командной строки                                             54
     Запуск      Python                                                 54
     Как извлечь максимум пользы из командной строки                    55
     Использование переменных среды        Python                       58
   Ввод команд                                                          59
     Скажите компьютеру, что ему нужно делать                           59
     Расскажите компьютеру, что вы сделали                              60
     Просмотр результатов                                               60
   Справочная система                                                   62
     Переход в режим справки                                            63
     Получение справки                                                  64
     Выход из режима справки                                            66
     Непосредственное получение справки                                 67
   Выход из режима командной строки                                     69
Глава    4.   Создание первого приложения                               73
   Преимущества       IDE                                               74
     Создание оптимального кода                                         74
     Контроль ошибок                                                    75
     Преимущества блокнота                                              75
   Получаем собственную копию         Anaconda                          76
     Где можно скачатьAnaconda                                          76
     Установка Aпaconda в Linux                                         77
     Установка Anaconda в Мае OS                                        78
     Установка Anaconda в Windows                                       80
   Загрузка наборов данных и файлов примеров                            83
     Работа с     Jupyter Notebook                                      83
     Создание репозитория кода                                          84
   Создание приложения                                                  90
     Знакомство с ячейками                                              90
     Добавление документирующих ячеек                                   92
     Другое содержимое ячеек                                            93
   Использование отступов                                               94
   Добавление комментариев                                              95
     Знакомство с комментариями                                         96
     Применение комментариев в качестве напоминаний                     98
     Применение комментариев для предотвращения выполнения строк кода   98
   Как закрыть     Jupyter Notebook                                     98

                                                         Содержание      7
Глава   5.   Работа с   Anaconda                       101
    Загрузка кода                                      102
    Контрольные точки                                  103
      Методика использования контрольных точек         103
      Сохранение контрольных точек                     104
      Восстановление контрольной точки                 104
    Работа с ячейками                                  105
      Добавление различных типов ячеек                 105
      Разделение и объединение ячеек                   106
      Перемещение ячеек                                106
      Выполнение содержимого ячеек                     107
      Отключение вывода                                108
    Изменение внешнего вида         Jupyter Notebook   109
      Поиск команд в окне      Command Palette         11 о
      Отображение номеров строк                        11 о
      Панель инструментов ячейки                       111
    Взаимодействие с ядром                             113
    Получение справки                                  114
    Применение магических функций                      116
    Обзор выполняющихся процессов                      120

Часть    2. Основы программирования на Python          121
Глава   6.   Хранение и изменение информации           123
    Хранение данных                                    124
      Использование переменных                         124
      Правильный выбор переменных                      124
    Основные типы данных                               125
      Добавление информации в переменные               125
      Знакомство с числовыми типами данных             125
      Булевы значения                                  130
      Строки                                           130
    Дата и время                                       131
Глава   7.   Управление данными                        133
    Представление данных в         Python              134
      Выполнение сравнений                             134
      Как компьютеры выполняют операции сравнения      135
    Работа с операторами                               135
      Виды операторов                                  136
      Приоритет операторов                             142
    Создание и использование функций                   143

8        Содержание
    Функции как средство упаковки кода                                                 144
    Повторное использование кода                                                       144
    Определение функции                                                                145
    Получение доступа к функциям                                                       146
    Передача информации функциям                                                       147
    Возврат информации из функций                                                      150
    Сравнение результатов выполнения функций                                           152
  Получение пользовательского ввода                                                    153
Глава   8.   Принятие решений                                                          155
  Принятие простых решений с помощью инструкции                if                      156
    Знакомство с инструкцией      if                                                   156
    Использование инструкции       if                                                  156
  Выбор альтернативных вариантов с помощью инструкции               if ... else        161
    Знакомство с инструкцией    i f ... else                                           161
    Использование     инструкции if ... else                                           162
    Использование инструкции       if ... elif                                         163
  Использование вложенных инструкций принятия решений                                  166
    Использование нескольких инструкций          if   или   if ... else                166
    Комбинирование различных инструкций принятия решений                               167
Глава   9.   Выполнение повторяющихся действий                                         171
  Обработка данных с помощью цикла         for                                         172
    Знакомство с циклом    for                                                         172
    Создание базового цикла      for                                                   173
    Управление выполнением цикла с помощью инструкции             break                174
    Управление выполнением цикла с помощью             инструкции continue             176
    Управление выполнением цикла с помощью             инструкции pass                 177
    Управление выполнением цикла с помощью             предложения else                178
  Обработка данных с помощью цикла         while                                       179
    Знакомство с циклом    while                                                       180
    Использование     цикла while     в приложении                                     181
  Вложенные циклы                                                                      182
Глава   10. Обработка ошибок                                                           185
  Почему     Python вас не понимает                                                    186
  Возможные причины появления ошибок                                                   188
        Этапы появления ошибок                                                         188
    Типы ошибок                                                                        189
  Перехват исключений                                                                  191
        Базовая обработка исключений                                                   192
        Иерархическая обработка менее специфичных исключений                           203

                                                                          Содержание    9
       Обработка вложенных исключений                    206
     Генерирование исключений                            208
       Генерирование исключений в нештатных ситуациях    209
       Передача информации об ошибке вызывающему коду    211
     Создание и использование настраиваемых исключений   212
     Использование предложения     finally               213

Часть    3. Профессиональные методики
             программирования на Python                  217
Глава   11. Пакеты                                       219
     Создание блоков кода                                220
       Типы пакетов                                      222
       Кеш пакетов                                       223
     Импорт пакетов                                      225
       Использование инструкции     import               226
       Использование инструкции     from ... import      228
     Поиск пакетов на диске                              231
     Загрузка пакетов из других источников               232
       Открытие командной строки       Anaconda          233
       Работа с пакетами   conda                         233
       Установка пакетов с помощью утилиты        pip    240
     Просмотр содержимого пакета                         240
     Просмотр документации по пакетам                    244
       Открытие приложения     Pydoc                     244
       Использование ссылок быстрого доступа             246
       Ввод поискового термина                           246
       Просмотр результатов                              247
Глава   12. Работа   со строками                         251
     Различия между строками                             252
       Определение символа с помощью чисел               252
       Создание строк на основе символов                 253
     Создание строк, включающих специальные символы      254
     Выбор отдельных символов                            257
     Обработка строк                                     259
     Поиск значения в строке                             262
     Форматирование строк                                265
Глава   13.   Управление списками                        269
     Упорядочение информации в приложении                270
       Знакомство со списками                            270
       Как компьютер просматривает списки                271

10       Содержание
  Создание списков                                                      272
  Доступ к спискам                                                      274
  Циклический обход списков                                             276
  Изменение списков                                                     276
  Поиск в списках                                                       280
  Сортировка списков                                                    282
  Вывод списков                                                         283
  Работа с объектом     Counter                                         285
Глава   14.   Коллекции данных                                          289
  Понятие коллекции                                                     290
  Работа с кортежами                                                    291
  Работа со словарями                                                   294
    Создание и использование словаря                                    294
    Замена инструкции      swi tch словарем                             297
  Создание стеков с помощью списков                                     299
  Работа с очередями                                                    303
  Работа с двухсторонней очередью                                       305
Глава   15.   Создание и использование классов                          309
  Класс как средство упаковки кода                                      310
  Компоненты класса                                                     312
    Создание определения класса                                         312
    Встроенные атрибуты класса                                          314
    Работа с методами                                                   314
    Работа с конструкторами                                             317
    Работа с переменными                                                319
    Использование методов с переменным числом аргументов                321
    Перегрузка операторов                                               323
  Создание класса                                                       325
    Определение класса      MyClass                                     325
    Сохранение класса на диске                                          326
  Использование класса в приложении                                     327
  Расширение классов для создания новых классов                         328
    Создание дочернего класса                                           329
    Тестирование класса в приложении                                    330

Часть    4. Решение сложных задач                                       333
Глава   16. Хранение данных в файлах                                    335
  Принципы работы долговременного хранилища                             336
  Создание содержимого для долговременного хранения                     338
  Создание файла                                                        341

                                                           Содержание    11
     Чтение содержимого файла                                                344
     Изменение содержимого файла                                             347
     Удаление файла                                                          351
Глава   17.   Отправка сообщений электронной почты                           353
     Что происходит при отправке электронной почты                           355
       Структура электронного письма                                         355
       Компоненты конверта электронного сообщения                            356
       Компоненты сообщения                                                  361
     Создание электронного сообщения                                         365
       Работа с текстовым сообщением                                         366
       Работа с НТМL-сообщением                                              367
     Просмотр электронного сообщения                                         368

Часть    5. Великолепные десятки                                             371
Глава   18. Десять   ценных ресурсов для программистов                       373
     Онлайн-документация       Python                                        374
     Руководство на сайте     LearnPython. org                               375
     Веб-программирование на      Python                                     376
     Дополнительные библиотеки                                               377
     Быстрое создание приложений с помощью             IDE                   378
     Удобная проверка синтаксиса                                             379
     Использование   XML                                                     379
     Устранение типичных ошибок, присущих новичкам                           381
     Знакомство с   Unicode                                                  382
     Учимся создавать быстродействующие приложения                           382
Глава   19. Десять утилит, улучшающих          работу с      Python          385
     Отслеживание ошибок с помощью   Roundup lssue Tracker                   386
     Создание виртуальной среды с помощью Virtua!Env                         387
     Инсталляция приложений с помощью Pylnstaller                            389
     Создание документации для разработчиков с помощью утилиты        pdoc   390
     Разработка кода приложения с помощью        Komodo Edit                 391
     Отладка приложения с помощью утилиты pydЬgr                             392
     Переход в интерактивную среду с помощью            IPython              393
     Тестирование приложений      Python   с помощью      PyUnit             393
     Приведение кода в порядок с помощью утилиты              isort          394
     Управление версиями с помощью         Mercurial                         395
Глава   20.   Десять (или около того) библиотек, о которых стоит знать       397
     Создание безопасной среды с помощью PyCrypto                            398
     Взаимодействие с базами данных с помощью SQLA\chemy                     399
     Смотрим на мир с помощью Google Maps                                    399

12       Содержание
  Добавление графического интерфейса пользователя с помощью   Tklnter   400
  Создание презентации с табличными данными с помощью PrettyTaЫe        400
  Добавление звука с помощью PyAudio                                    401
  Построение графиков с помощью PyQtGraph                               402
  Поиск информации с помощью IRLib                                      403
  Создание интероперабельной среды Java с помощью JPype                 404
  Доступ к локальным сетевым ресурсам с помощью Twisted Matrix          404
  Доступ к интернет-ресурсам с помощью библиотек                        405
Предметный указатель                                                    406




                                                         Содержание      13
Об авторе
     Джон Пол Мюллер       -   писатель и технический редактор, автор более   100
книг и   600   статей, тематика которых варьируется от сетевых технологий и ис­
кусственного интеллекта до управления базами данных и программирования
на   Python.   Как технический редактор помог издать книги более чем   70 авторам.
Ведет персональный благ по адресу      http:   //Ыоg.
                                                johnmuellerbooks. com/. Мо­
жете отправить ему электронное письмо по адресу John@JohnMuellerBooks.
com или посетить его сайт www. j ohnmuellerbooks. com.
Введение

  Python -     универсальный язык программирования с широчайшими воз­
можностями. Причем это не просто мое личное мнение. По итогам послед­
него голосования, проведенного среди разработчиков,         Python стал третьим по
популярности языком программирования в мире             (https: / /www. tiobe. сот/
tiobe-index/).     Замечательная особенность      Python заключается   в том, что с его
помощью можно создать приложение на одной платформе, а запускать                 -   на
любых других. В отличие от других языков программирования, которые только
обещают независимость от платформы,          Python   эту независимость реализует.
В данном случае обещания и реальность совпадают.
  Для    Python   характерны читабельность кода и краткость синтаксиса. Это по­
зволяет создавать более компактные приложения, чем при использовании дру­
гих языков программирования. А поскольку в          Python   поддерживаются функци­
ональный, императивный, объектно-ориентированный и процедурный стили
программирования, вы сможете выбрать тот стиль, который лучше всего вам
подходит (глава    3). Python   находит применение в любых сферах деятельности.
Книга призвана помочь всем, включая непрофессионалов, быстро установить
Python   и начать программировать.
  Некоторые пользователи относятся к        Python   как к языку написания сценари­
ев, хотя в действительности его возможности намного шире. Более того,           Python
отлично подходит для образовательных и иных целей, для которых не годятся
другие языки программирования. В примерах книги используется среда             Jupyter
Notebook,   которая основана на парадигме грамотного программирования. Эта
парадигма была сформулирована компьютерным ученым из Стэнфордского
университета Дональдом Кнутом (глава        4).   В итоге примеры выглядят как на­
глядные отчеты, которые легко поймет любой читатель.




Особенности книrи
  В книге вы найдете все, что нужно для установки и запуска               Python.    Вы
сможете быстро освоить этот язык программирования и воспользоваться им
для написания любых приложений. В отличие от большинства книг подобной
тематики, здесь с самого начала рассматриваются характерные особенности
Python,   отличающие его от других языков программирования. Вы поймете,
какие инструменты вам нужны, чтобы начать работу, и как установить             Python
в конкретной системе.
     Далее вы приступите к изучению языка, начав с азов и постепенно продви­
гаясь к более сложным темам. После успешного освоения примеров книги вы
сможете создавать простые приложения и выполнять такие задачи, как отправ­

ка электронной почты с помощью          Python.   Конечно, вы не станете экспертом
программирования, но вполне сможете использовать           Python для   решения про­
изводственных задач.

     В книге применяются следующие условные обозначения.

              ))   Текст, вводимый пользователем, выделяется в книге полужирным
                   моноwиринныи шрифтом.

              ))   Если в строке ввода есть слова, выделенные курсивом, то их нужно
                   заменить фактическим значением.

              ))   Адреса сайтов и программный код выделяются моноширинным
                   шрифтом.

              ))   Если нужно выбрать последовательность команд в меню, то они
                   разделяются стрелкой, например      FileqNew File   (Файлq(оздать
                   файл). В данном случае вы сначала переходите в меню    File, а затем
                   в этом меню выбираете пункт    New File. В результате будет создан
                   новый файл.




Исходные предположения

     Возможно, вам будет трудно поверить в то, что я что-то предполагаю о вас.
В конце концов, мы даже ни разу с вами не встречались! И хотя большинство
подобных предположений выглядит надуманно, я все же рискну их сформули­
ровать, чтобы на что-то опереться.
     Большое значение имеет знакомство с применяемой вами платформой, по­
скольку сама книга не дает каких-либо указаний на этот счет. Разве что в гла­
ве   2   приведены инструкции по установке     Python на разных платформах, а в
главе    4 описывается   установка Anaconda, которая включает Jupyter Notebook.
Это интегрированная      среда разработки (lntegrated Development Environment -
IDE),    применяемая для выполнения примеров книги. Чтобы вы получили мак­
симум информации о       Python,   в книге не рассматриваются вопросы, зависящие
от платформы. Прежде чем приступать к чтению книги, убедитесь в том, что
знаете, как устанавливать приложения и запускать их, а также понимаете об­
щие принципы работы на выбранной вами платформе.
     В книге также предполагается, что вы умеете искать информацию в Ин­
тернете. Поэтому повсеместно приводятся ссылки на материал, доступный


16        Введение
в Интернете, который позволит вам повысить уровень знаний. Учтите, что эти
источники информации будут полезны только в том случае, если вы их дей­
ствительно найдете и изучите.




Пиктограммы, используемые в книге

    В процессе чтения книги вы будете видеть пиктограммы на полях, которые
обозначают определенный материал. Эти пиктограммы кратко описаны ниже.

              Следуя советам, вы сэкономите время или сможете решить по­
              ставленную задачу с меньшими усилиями. Советы, приведенные в
              книге,   -   это в основном способы экономии времени или ссылки
   СОВЕТ
              на ресурсы, которыми следует воспользоваться, чтобы эффективнее
              работать с   Python.

              Если вы увидите такую пиктограмму, то знайте, что не следует вы­
              полнять соответствующие действия. Если вы все же рискнете сде­
              лать это, то полученный результат, скорее всего, вас разочарует.
 ВНИМАНИЕ!




              Эта пиктограмма обозначает какую-либо техническую подсказку
              или продвинутую методику. Порой эти крупицы полезной инфор­
              мации довольно скучны, но они же могут описывать решение, столь
ТЕХНИЧЕСКИЕ
ПОДРО6НС>m!   необходимое для запуска программы. В принципе, эти абзацы мож­
              но пропустить без особого ущерба для понимания материала.


              Даже если вы не почерпнете для себя ничего полезного из опреде­
              ленного раздела, все равно запомните материал, отмеченный этой
              пиктограммой. Здесь обычно приводится информация, которую сле­
 ЗАПОМНИ!
              дует знать, чтобы успешно создавать программы на    Python.


Дополнительные материалы

    Вряд ли вам захочется вручную набирать код примеров. Большинство чи­
тателей предпочтут потратить больше времени на работу с примерами. К сча­
стью, все примеры кода, рассмотренные в книге, доступны для загрузки. Более
того, каждый пример содержит сведения о проекте, в котором он используется.
Чтобы загрузить файлы примеров, воспользуйтесь следующей ссылкой:

http://go.dialektika.com/PythonFD


                                                                 Введение        17
Что дальше
     Итак, пришло время начать путешествие в увлекательный мир             Python! Если
вы вообще не имеете опыта программирования, начните с главы               1, а затем про­
двигайтесь в удобном для себя темпе.
     Если вы новичок в программировании, но хотите освоить            Python   как можно
быстрее, перейдите непосредственно к главе         2,   только учтите, что некоторые
темы могут оказаться не совсем понятными. Если у вас уже установлена копия
Python,   можете сразу перейти к главе   3.   Но все же бегло просмотрите главу        2,
чтобы знать о том, какие предположения были сделаны при написании книги.
     Читатели, которые уже имеют определенный опыт работы с       Python, могут
сразу же перейти к главе    4. Только не забудьте установить Anaconda, чтобы
получить доступ к среде   Jupyter Notebook, которая в этой книге используется в
качестве интегрированной среды разработки. В противном случае вы не смо­
жете запускать скачанные файлы примеров.        Anaconda -        бесплатный пакет, так
что вам не придется ни за что платить.

     Если вы уже установили    Jupyter Notebook     и знаете, как использовать эту
среду, можете перейти непосредственно к главе           6.   Вы всегда сможете вернуть­
ся к предыдущим главам, если в процессе чтения книги у вас возникнут вопро­

сы. Очень важно разобраться в том, как работает каждый пример, прежде чем
переходить к следующему примеру. Все примеры являются весьма полезными
и поучительными, поэтому не следует пропускать какой-либо из них.




Ждем ваших отзывов!
     Вы, читатель этой книги, и есть главный ее критик. Мы ценим ваше мнение
и хотим знать, что было сделано нами правильно, что можно было сделать
лучше и что еще вы хотели бы увидеть изданным нами. Нам интересны любые
ваши замечания в наш адрес.

     Мы ждем ваших комментариев и надеемся на них. Вы можете прислать нам
бумажное или электронное письмо либо просто посетить наш сайт и оставить
свои замечания там. Одним словом, любым удобным для вас способом дайте
нам знать, нравится ли вам эта книга, а также выскажите свое мнение о том,

как сделать наши книги более интересными для вас.
     Отправляя письмо или сообщение, не забудьте указать название книги и ее ав­
торов, а также свой обратный адрес. Мы внимательно ознакомимся с вашим мне­
нием и обязательно учтем его при отборе и подготовке к изданию новых книг.
     Наши электронные адреса:
E-mail: info@dialektika. сот
WWW: http://www. dialektika. сот

18        Введение
Зн комство со
средой   Python
В ЭТОЙ ЧАСТИ".

))   Общение с компьютером

))   Установка   Python   в   Linux,   Мае и   Windows

))   Взаимодействие с инструментами              Python

))   Установка   Anaconda      и соэдание первого приложения
Глава         1

Разrовор
с компьютером



 ))   Поговорим с компьютером

 )) Создание программ для общения с компьютером
 ))   Знакомство с программами и процессом их создания

 ))   Зачем нужен   Python




Б
        еседа с компьютером может показаться похожей на сценарий из науч­
        но-фантастического фильма. Если вы смотрели сериал "Звездный путь",
        то, наверное, помните, как экипаж корабля "Энтерпрайз" общался со
своим корабельным компьютером. Причем зачастую инициатором общения
был сам компьютер. С появлением таких программ-помощников, как Арр\е       Siri
(http://www. apple. com/ios/siri/), Amazon Echo (https: / /www. amazon. сот/
dp/BOOX4WHPSE/) и т.п., беседа человека с компьютером стала вполне реальной.

            Одно дело   -    запрашивать компьютер о предоставлении необходи­
            мой информации, а другое    -   самому предоставлять ему требуемые
            инструкции. В этой главе вы узнаете, зачем нужно давать инструк­
 ЗАПОМНИ!
            ции компьютеру и какую выгоду можно от всего этого получать.

            Вы также узнаете о том, зачем нужен специальный язык для тако­
            го общения и почему в качестве такого языка следует использовать
            Python. Но главный вывод, к которому вы придете после прочтения
            главы, -  программирование является лишь одной из разновиднос­
            тей общения между вами и компьютером.
Зачем нужно общаться с компьютером
     На первый взгляд, идея общения с компьютером может показаться странной,
но это не совсем так. Более того, это просто необходимо, ведь компьютер пока
еще не умеет читать наши мысли. Но даже если бы он владел телепатией, это
все равно было бы общением. На самом деле ничто не может произойти без об­
мена информацией между компьютером и пользователем. Такие действия, как

                »        чтение электронной почты,

                >>       публикация в социальной сети,

                »        поиск подарка в Интернете,

являются примерами общения между компьютером и человеком. А последу­
ющее взаимодействия компьютера с другими компьютерами или людьми при
обработке тех или иных запросов еще раз доказывает тот факт, что для получе­
ния какого-либо результата необходимо общение.
     В большинстве случаев общение с компьютером происходит так, что вы его
практически не замечаете, по крайней мере до тех пор, пока не задумываетесь
об этом. Например, когда вы посещаете комнату чата, у вас может возникнуть
ощущение, будто вы общаетесь с человеком. Но в действительности вы об­
мениваетесь информацией с компьютером, а тот в свою очередь обменивает­
ся данными с компьютером другого посетителя комнаты чата. Компьютер же
другого посетителя комнаты чата напрямую общается со своим владельцем.
Описанная ситуация проиллюстрирована на рис.               1.1.



                                            Комната чата




       Рис.   7. 7. Общение с компьютером может      быть незаметным до тех пор,
                                 пока вы не задумаетесь об этом


     Обратите внимание на облако, показанное в центре рис.         1.1.   В этом облаке
может находиться все что угодно, но в данном случае в нем находятся дру­

гие компьютеры, на которых выполняются иные приложения. Благодаря этим
компьютерам вы и ваш собеседник можете общаться в чате. И самое главное
заключается в том, что при использовании чата все процессы выполняются

в фоновом режиме. Создается впечатление, будто вы просто обмениваетесь со
своим собеседником сообщениями, которые как по мановению волшебной
палочки появляются на экране.




22       ЧАСТЬ       1    Знакомство со средой Pythoп
Приложение -                    это тоже средство общения
  Общение между компьютерами выполняется благодаря приложениям. Одни
приложения применяются для ответа на сообщения электронной почты, дру­
гие   -    для приобретения товаров, ну а третьи       -   для создания презентаций.
Благодаря приложениям мы можем транслировать человеческие идеи в понят­
ную компьютерам форму и осуществлять обмен данными. Но данные, демон­
стрируемые в ходе презентации, отличаются от данных, которые мы вводим

при совершении покупок в Интернете. Способы представления данных раз­
личны для каждой задачи, поэтому при работе за компьютером приходится ис­
пользовать разные приложения, в зависимости от конкретной ситуации.
  В настоящее время существуют приложения, способные удовлетворить
практически любую потребность, которую только можно себе вообразить. За
много лет программисты создали миллионы различных приложений, поэто­
му даже трудно себе представить, что можно придумать какой-либо новый
метод общения с компьютером, реализуемый с помощью приложения. В дей­
ствительности это вполне возможно, если отталкиваться от того, какие данные

имеются в вашем распоряжении. Порой данные слишком специфичны либо
требуются в формате, который не поддерживается ни одним из имеющихся
приложений. В результате приходится писать собственные приложения, чтобы
передать эти данные компьютеру.

  Далее мы поговорим о создании приложений, которые предназначены для
обработки уникальных данных тем или иным нестандартным способом. К при­
меру, у вас есть коллекция видеофайлов и вам нужно работать с ними опреде­
ленным образом. Поскольку данные уникальны и ваши потребности в доступе
к ним тоже специфичны, вам требуется создать приложение, которое позволит
вам обрабатывать данные в соответствии с вашими задачами.


Повседневные процедуры
  Процедура       -   это набор действий, которые нужно совершить для решения
определенной задачи. Например, чтобы поджарить тосты, можно воспользо­
ваться следующей процедурой.

  1.      Откройте хлебницу и достаньте два тоста.

 2.       Включите тостер в розетку.

 З.       Вставьте тосты в отдельные слоты тостера.

 4.       Опустите рычагтостера, чтобы начать процесс приготовления тостов.

 5.       Подождите, пока тосты не поджарятся.
 6.       Извлеките тосты из тостера.


                                         ГЛАВА   1    Разговор с компьютером      23
 7.    Положите тосты на тарелку.

 8..   Достаньте из холодильника масло.

 9.    Намажьте тосты маслом.

     Конечно, выполняемая вами процедура может отличаться от описанной
здесь, но вряд ли вы будете смазывать тосты маслом перед помещением в то­
стер. Просто большинство людей не задумываются о процедуре приготовления
тостов. Но даже если мы не осознаем этого, мы все равно следуем определен­
ной процедуре.

              Компьютеры могут решать задачи исключительно в рамках заранее
              оговоренной процедуры. Вам придется рассказать компьютеру о
              том, какие действия он должен выполнить, каков порядок выполне­
 ЗАПОМНИ!
              ния этих действий и какие ситуации могут привести к сбою. Вся эта
              информация (и многое другое) появляется в приложении. По сути,
              приложение    -   это процедура, которая содержит указания компью­

              теру о том, что ему нужно делать, когда делать и как делать. А по­
              скольку все мы сталкиваемся с процедурами в повседневной жизни,
              нам лишь остается применить имеющиеся знания в компьютерной
              среде, сообщив компьютеру необходимые сведения о выполняемых
              задачах.




Создание процедур
     Однажды, когда я учился в школе, учительница попросила каждого из нас
записать процедуру приготовления тостов. После того как мы завершили вы­
полнение этого задания, она принесла тостер и несколько буханок хлеба. Ка­
ждая процедура была зачитана, а указанные в ней инструкции         -   продемон­
стрированы на практике. Ни одна из процедур не сработала так, как ожида­
лось, и все они привели к анекдотичным результатам. В моем случае я забыл
указать на необходимость предварительно вынуть хлеб из упаковки, поэтому
учительница попыталась засунуть в тостер хлеб прямо в упаковке. Этот урок
я запомнил на всю жизнь. Как видите, процесс написания процедур не такой
простой, как кажется. Зачастую мы слишком хорошо знаем всю последователь­
ность действий и предполагаем, что человек, выполняющий процедуру, сдела­
ет все в точности так, как мы хотим, даже если мы не будем все расписывать
в мельчайших подробностях.
     Многие события нашей жизни связаны с процедурами. Например, перед
взлетом самолета пилот должен выполнить определенную последовательность

действий. И без тщательно продуманной процедуры взлета самолет может
потерпеть крушение. Безусловно, овладение искусством написания хороших



24          ЧАСТЬ   1 Знакомство со средой Python
процедур требует времени и сил, но это вполне решаемая задача. Впрочем, на­
писать процедуру          -    это только полдела. Ее еще нужно проверить, поручив эту
задачу тому, кто не знаком с самой процедурой. При работе с компьютерами
главным тестировщиком становится сам компьютер.



Приложения            -       это те же процедуры
   Компьютер ведет себя во многом подобно школьному учителю из предыду­
щего раздела. При разработке приложения вы фактически пишете процедуру,
определяющую набор действий, которые должен выполнить компьютер, что­
бы решить ту или иную задачу. Если же вы пропустите какое-то действие, то
результаты будут вовсе не такими, как ожидается. Компьютер не умеет читать
ваши мысли и вряд ли сможет решать задачи автоматически, без подсказок с
вашей стороны. Единственное, что знает компьютер,                      -   это то, что вы предо­
ставили ему определенную процедуру и ему нужно ее выполнить.



Компьютеры воспринимают все буквально
   Со временем люди ко всему привыкают. Они начинают автоматически
устранять недостатки в ваших процедурах или делать пометки, описывая про­

пущенные этапы.



            Другими словами, люди способны устранять недостатки, присущие
            процедурам. Когда вы начнете создавать компьютерные программы,
            вы столкнетесь с тем, что компьютеры точно выполняют предпи­
 3АПОМНИI
            санные действия и буквально воспринимают каждую инструкцию.
            Например, если вы говорите компьютеру о том, что переменная рав­
            на   5,   он присвоит ей значение, в точности равное                5.   Для человека
            значение          4,9   может оказаться вполне приемлемым приближением,
            но компьютер не способен на подобные умозаключения. Он решит,
            что значение            4,9   не равно   5.   Короче говоря, компьютерам не прису­
            щи такие качества, как гибкость, интуиция и воображение. Если вы
            написали процедуру, предназначенную для компьютера, то он будет
            каждый раз выполнять ее в буквальном виде, ничего не меняя и не
            делая никаких скрытых предположений.




Что же такое приложение
   Как уже было сказано, приложения позволяют выражать человеческие
идеи в виде, понятном компьютерам. Для этого приложение содержит одну
или несколько процедур, которые сообщают компьютеру о том, как выполнять


                                                     ГЛАВА   1   Разговор с компьютером       25
задачи, связанные с обработкой и представлением данных. К примеру, то, что
вы видите на экране,          -   это текст, отображаемый текстовым редактором. Но
для отображения этого текста на экране компьютеру требуются процедуры, ко­
торые считывают данные с диска, преобразуют их в понятный формат, а затем
выводят на экран.



Компьютеры общаются на специальном языке
     Человеческий язык сложен и труден для понимания. Даже такие современ­
ные голосовые помощники, как             Siri   и   Alexa,   имеют серьезные ограничения
в понимании человеческой речи. За много лет компьютеры научились обраба­
тывать потоки аудиоданных и воспринимать отдельные четко произнесенные

слова в качестве команд, но по-прежнему испытывают серьезные затруднения

в восприятии речи. Трудности понимания речи станут наглядными, если по­
знакомиться с юридической практикой. Большинство людей, далеких от юри­
спруденции, просто не понимают юридические тексты. Однако они специаль­
но написаны таким образом, чтобы не допускать свободную интерпретацию.
Проблема в том, что человеческой речи всегда присуща нечеткость формули­
ровок.

     Учитывая вышесказанное, можно сказать, что компьютеры никогда не будут
понимать человеческую речь настолько хорошо, чтобы осознать процедуры,
предназначенные для людей. Компьютеры всегда все воспринимают букваль­
но, поэтому вы получите совершенно непредсказуемые результаты, если буде­
те использовать человеческий язык для написания приложений. Вот почему
для общения с компьютерами люди придумывают специальные языки, называ­
емые языками про?ршимирования. Эти языки позволяют писать процедуры, ко­
торые являются с одной стороны предельно конкретными, а с другой               -   вполне
понятными и людям, и компьютерам.



                Компьютеры не говорят ни на каком языке. Они используют двоич­
                ные коды для установки различных переключателей и для выполне­
                ния математических вычислений. Компьютеры даже не понимают
ТЕХНИЧЕСКlllЕ
ПОДРОБНОСТИ     букв   -   они воспринимают только цифры. Специальное приложение
                превращает компьютерный язык, используемый для написания про­
                цедуры, в двоичные коды. К счастью, вам не нужно беспокоиться
                об особенностях работы компьютеров на двоичном уровне. Тем не
                менее важно знать, что компьютеры говорят на языке математики

                и цифр, а не на человеческом языке.




26         ЧАСТЬ 1 Знакомство со средой Python
Как наладить общение человека с компьютером
  Создавая любое приложение, важно знать, для чего оно нужно. Благодаря
приложениям люди могут общаться с компьютером. Каждое приложение рабо­
тает с определенными типами данных, которые оно может вводить, сохранять,

обрабатывать и выводить, что позволяет пользователям получать требуемые
результаты. Это справедливо в отношении любых приложений, будь то игро­
вые программы, электронные таблицы и др. Компьютер обрабатывает предо­
ставленные человеком данные для достижения нужного результата.

  Создавая приложение, вы придумываете новый способ общения человека
с компьютером, давая возможность пользователям просматривать данные но­

выми способами. Причем интерфейс между человеком и компьютером должен
быть настолько простым, чтобы наличие приложения-посредника вообще не
ощущалось. Наилучшими являются приложения, в которых вы целиком фоку­
сируетесь на данных. Например, когда речь заходит об игровых приложениях,
наилучшими из них будут те, которые позволяют сосредоточиться на спасе­
нии планеты от инопланетных захватчиков или пилотировании космического

корабля, а не на деталях работы самого приложения.

          Чтобы лучше понять, как создаются приложения, как они должны
          выглядеть и функционировать, стоит изучить опыт разработчиков.
          Попробуйте составить список преимуществ и недостатков прило­
  СОВЕТ
          жений, написанных другими людьми. В процессе изучения прило­
          жений задайте себе следующие вопросы.

           >>   Что мне не нравится в этом приложении?

           »    С чем было легко работать?

           »    С чем было сложно работать?

           »    Облегчило ли приложение работу с данными?

           »    Можно ли было бы еще больше упростить работу с данными?

           »    В чем планируемые преимущества моего приложения по сравне­
                нию с данным приложением?

   В процессе создания приложений профессиональные программисты зада­
ются и другими вопросами, но для начала достаточно и этих. Благодаря им
вы начнете понимать, что приложения являются средством общения человека
с компьютером. Если вы когда-либо испытывали разочарование от неудобной
программы, то понимаете, что другие пользователи могут испытать то же са­

мое при работе с вашим приложением. Поэтому очень важно задать самому
себе правильные вопросы. Эффективное взаимодействие        -   ключевой элемент
любого создаваемого вами приложения.


                                     ГЛАВА    1   Разговор с компьютером    27
      Старайтесь продумывать порядок работы. Сформулируйте последователь­
ность выполняемых действий. Разбейте процедуру на этапы и запишите все,
что знаете о каждом этапе. Затем попросите кого-нибудь протестировать эту
процедуру, чтобы понять, как она работает на самом деле. В итоге может ока­
заться, что, несмотря на все приложенные усилия и старания, вы все же забыли
учесть какие-то важные действия.

                 Провальные проекты обычно начинались с того, что разработчик
                 не понял цель, аудиторию и особенности своего приложения. При­
                 ступая к написанию программы, подумайте о том, для чего и для
ВНИМАНИЕ!
                 кого она создается. Составьте четкий план работы, и тогда процесс
                 создания приложения станет увлекательным. Поэтапно достигайте
                 поставленных целей, а в конце представьте результаты своей рабо­
                 ты друзьям, которые наверняка начнут считать вам крутым програм­

                 мистом.




В чем секрет популярности                             Python
      В настоящее время существует множество языков программирования. Мож­
но целый семестр изучать языки программирования, но так и не узнать о суще­
ствовании некоторых из них. Казалось бы, этого более чем достаточно, чтобы
выбрать язык, пригодный для общения с компьютером. Почему же продолжа­
ют появляться все новые и новые языки?

                  Новые языки программирования создаются по разным причинам.
                  В каждом из них есть своя изюминка, характерная особенность,
                  выделяющая его среди других языков. Более того, развитие ком­
    ЗАЛОМНИI
                  пьютерных технологий постоянно стимулирует создание новых и
                 совершенствование имеющихся языков программирования. Разра­
                 ботка любого приложения подразумевает эффективное решение по­
                 ставленных задач. Программистам, владеющим многими языками,
                  проще подобрать оптимальный язык для конкретной задачи. Одни
                 языки лучше приспособлены для работы с базами данных, другие
                 упрощают создание элементов пользовательского интерфейса.

      Как и любой язык программирования,         Python обладает   целым рядом преи­
муществ. Давайте познакомимся с ними поближе, прежде чем начнем работу
с   Python.      Вы даже не представляете, сколько всего интересного можно сделать
с помощью          Python.   Знание сильных и слабых сторон языка программирования




28             ЧАСТЬ 1 Знакомство со средой Python
поможет не только правильно его использовать, но и избежать разочарования,
связанного с неудачной попыткой сделать то, для чего он не предназначен.


Почему именно             Python
  При создании всех языков программирования преследовались вполне опре­
деленные цели. Именно эти цели облегчают определение характеристик и спо­
собов использования языка. Ведь невозможно создать универсальный язык
программирования, который позволял бы решать любые задачи. Что касается
Python, то   главная цель его разработки заключалась в создании языка, повыша­
ющего эффективность работы программистов. С учетом сказанного, рассмо­
трим основные причины выбора                 Python для   создания приложений.

              ))   Ускорение разработки приложений. Код на языке                Python обычно
                   в   2-1 О раз   короче   no сравнению с   аналогичным кодом, написанным
                   на С/С++ или      Java, что позволяет сократить время       разработки при­
                   ложения.

              ))   Простота чтения. Язык программирования подобен обычному
                   языку: нужно уметь читать тексты, написанные на нем. Код на языке
                   Python проще читать, чем код, написанный на других языках. Это по­
                   зволяет сократить время на интерпретацию кода и уделить больше
                   времени внесению существенных изменений.

              ))   Быстрота изучения. Разработчики              Python ставили своей целью
                   создание простого языка, не перегруженного правилами, чтобы не
                   усложнять его изучение. Ведь, в конце концов, задача программи­
                   стов   -   писать приложения, а не изучать сложные языки програм­

                   мирования.


   Несмотря на популярность,                Python   все же не является самым популярным
языком программирования. Например, согласно данным организации ТIОВЕ,
которая отслеживает статистику использования языков,                       Python   в настоящий
момент занимает третье место:

https://www.tiobe.com/tiobe-index/

   В то же время, согласно данным сайта                Tech Rapidly, Python занимает первое
место по популярности:


http://techrapidly.com/top-10-best-programming-languages-learn-2019/

             Если вы ищете работу программиста, то               Python    подойдет как нельзя
             лучше. Также неплохим вариантом                 будут Java,   С/С++ и С#, в зави­
             симости от того, чем именно вы будете заниматься.                  Visual Basic   в
  СОВЕТ
             настоящее время уже не так популярен, как               Python.   Выбирайте тот
             язык, который вам больше нравится и который будет максимально


                                                ГЛАВА   1 Разговор с компьютером            29
           эффективным для создания требуемых приложений. Интересно от­
            метить, что во многих вузах            Python   используется в качестве первого
           языка для изучения программирования. В этом отношении он один
            из самых популярных языков.




Преимущества             Python
     По большому счету, создавать приложения можно на любом языке програм­
мирования. Даже если выбрать не самый удачный язык, вы все равно сможете
решить поставленную задачу, просто работа затянется надолго и будет сопря­
жена с большим количеством ошибок. Разумеется, никому этого не хочется,
поэтому важно знать, какие именно приложения чаще всего создаются с помо­

щью    Python.    Ниже приведены наиболее популярные варианты (это далеко не
полный перечень).

             >>    Создание прототипов приnожений. Разработчики часто создают
                   прототипы, т.е. черновые варианты приложений, прежде чем при­
                   ступить к написанию реальных программ.              Python позволяет быстро
                   создавать рабочие прототипы.

             »     Создание сценариев дnя веб-приnожений.                   JavaScript   по праву
                   считается самым популярным языком написания веб-приложений,
                   однако    Python не уступает ему в популярности, занимая почетное
                   второе место.   Python обеспечивает доступ к большему набору функ­
                   ций, чем     JavaScript,   и позволяет ускорить разработку веб-приложе­
                   ний (что в наши дни является большим преимуществом).

             »     Создание математических, научных и инженерных приnоже­
                   ний.   Python предоставляет доступ к специализированным библи­
                   отекам, которые упрощают создание указанных приложений. Две
                   наиболее популярные библиотеки            -   это   NumPy (www. numpy. org)   и
                   SciPy (www. scipy. org). Благодаря        им можно значительно сократить
                   время на создание соответствующего кода.

             »     Работа с     XML.   Расширяемый язык разметки           (XML)   широко приме­
                   няется для хранения данных в Интернете и во многих настольных
                   приложениях. В отличие от многих других языков программирова­
                   ния, в   Python это базовый компонент. Таким образом, Python станет
                   оптимальным вариантом при работе с веб-службами.

             »     Взаимодействие с базами данных. Все бизнес-процессы осно­
                   ваны на использовании баз данных.      Python не является языком за­
                   просов, как     SQL или LINQ, но позволяет легко взаимодействовать
                   с базами данных, упрощая подключения к ним.

             »     Разработка поnьзоватеnьских интерфейсов. В отличие от С#,
                   в   Python   нет встроенного дизайнера, позволяющего перетаскивать


30      ЧАСТЬ     1 Знакомство со средой Python
                элементы из панели инструментов. Тем не менее он располагает
                обширным набором графических фреймворков, представляющих
                собой расширения, которые упрощают создание графических ин­
                терфейсов. Их список доступен по следующей ссылке:

                https://wiki.python.org/moin/GuiProgramming
                Некоторые из фреймворков поставляются с дизайнерами, облегча­
                ющими процесс создания пользовательских интерфейсов. Важно то,
                что   Python не привязан к какому-то одному методу создания поль­
                зовательских интерфейсов. Вы вольны выбрать любой вариант, ка­
                кой вам удобен.


В каких организациях используется                   Python
  Python    отлично подходит для решения широкого круга задач. Именно по­
этому он применяется во многих крупных компаниях, которые вкладывают

огромные средства в его усовершенствование. В табл.          1.1   перечислены круп­
ные организации, активно использующие          Python.

Таблица 1.1. Крупные организации, использующие Python

 Организация                                 Сайт                   Тип приложения


 Alice Educational Software   (Университет   www.alice.org          Обучающие
 Карнеги - Меллона)                                                 приложения


 Fermilab                                    www.fnal.gov           Научные прило-
                                                                    жения


 Go.com                                      go.com                 Веб-приложения

 Google                                      www.google.com         Поисковая
                                                                    система


 lndustrial Light & Magic                    www.ilm.com            Различные прило-
                                                                    жени я


 Ливерморская национальная лаборато-         www.llnl.gov           Научные прило-
 рия им. Лоуренса                                                   жени я


 Национальное управление по аэро-            www.nasa.gov           Научные прило-
 навтике и исследованию космического                                жени я
 пространства (НАСА)

 Нью-Йоркская фондовая биржа                 nyse.nyx.com           Веб-приложения

 Red Hat                                     www.redhat.com         Инструменты
                                                                    установки Linux



                                        ГЛАВА   1   Разговор с компьютером            31
                                                                          Окончание табл.   1.1

 Организация                                        Сайт                   Тип приложения


 Yahoo!                                             www.yahoo.com          Компоненты поч-
                                                                           товой системы
                                                                           Yahoo!

 YouTube                                            www.youtube.com        Графический
                                                                           движок


 Zope Community                                     http: // www.zope.     Издательское
                                                    org / en / latest /    приложение




              Это лишь небольшой перечень компаний, широко применяющих
              язык      Python.   Полный список таких компаний доступен по адресу
              http: //www.python.org / about / success / . Вы        легко убедитесь в том,
  СОВЕТ
              насколько этот список огромен.



Где найти полезные приложения                        Python
     Вы можете даже не догадываться о том, что приложение, с которым вы сей­
час работаете , написано на           Python.   Множество современных приложений на­
писано на этом языке, от консольных утилит до полноценных САПР-программ .
Одни приложения выполняются на мобильных устройствах, другие                        -   на кор­
поративных платформах . По сути , не существует таких задач , которые нельзя
было бы решить на             Python, и    вы можете воспользоваться плодами трудов раз­
работчиков приложений . Существует немало сайтов, на которых публикуются
списки приложений, созданных на                 Python. Один   из таких списков доступен по
следующей ссылке :

https: // wiki.python. or g/moin / Appli ca ti ons

     Любой программист, работающий на                 Python,   знает, насколько облегчают
жизнь инструменты разработки, позволяющие достичь определенного уровня
автоматизации в процессе написания процедур. Чем больше у разработчика
инструментов, тем меньше времени у него уходит на создание приложения.

В Интернете часто публикуют списки наиболее полезных инструментов. Вот
один из примеров:


http: //www.python.org /about / apps /

              В этой главе уже упоминались некоторые инструменты, например
              NumPy       и   SciPy (две   научные библиотеки) . В остальных главах будут
              описаны и другие важные инструменты. Подготовьте для себя пере­
 ЗАПОМНИ!
              чень инструментов, которые могут пригодиться в работе.


32          ЧАСТЬ   1   Знакомство со средой        Python
Python и другие языки                  программирования
     Некорректно сравнивать разные языки программирования, поскольку вы­
бор языка      -        это дело вкуса и личных предпочтений каждого программиста.
Прежде чем подвергнуться нападкам со стороны приверженцев рассмотрен­
ных ниже языков, отмечу, что в своей практике я использую разные языки про­
граммирования и нахожу, что многие из них в какой-то степени пересекаются.
Самого лучшего языка программирования в мире не существует, есть лишь
язык, который лучше подходит для решения той или иной задачи. Ниже ваше­
му вниманию предлагается сравнение некоторых языков программирования

и   Python.   Сравнение с другими языками доступно по следующей ссылке:

https://wiki.python.org/moin/LanguageComparisons

С#
     Многие пользователи обвиняют компанию                      Microsoft   в том, что она создала
С# полностью на основе             Java.   Тем не менее по сравнению с          Java   язык С# име­
ет определенные преимущества (и недостатки тоже). Основной и бесспорной
целью создания С# является получение усовершенствованной версии языка
С/С++    ,   которая была бы проще в использовании и изучении. Но не будем от­
влекаться от нашей главной цели. По сравнению с С# язык                         Python   имеет сле­
дующие преимущества:


                   ))    гораздо проще в изучении;

                   ))    имеет более компактный код;

                   ))    полностью поддерживается в качестве языка с открытым исходным

                         кодом;


                   ))    имеет более надежную многоплатформенную поддержку;

                   ))    обеспечивает возможность использования многочисленных
                         средств разработки;

                   ))    проще в расширении при использовании          Java   и С/С++;

                   ))    имеет улучшенную научную и инженерную поддержку.



Java
     В течение многих лет программисты пытались создать такой язык програм­
мирования, на котором можно было бы один раз написать приложение и потом
везде его использовать. К достоинствам                Java     можно отнести то, что он хорошо
работает на любой платформе.                Java   настолько успешно применяется в любых
сферах, что другие языки даже пытаются его эмулировать (с разной степенью
успешности). Тем не менее            Python    имеет ряд преимуществ перед         Java,   а именно:



                                                   ГЛАВА   1   Разговор с компьютером            33
                ))    гораздо проще в изучении;

                ))    более компактный код;

                ))    усовершенствованные переменные (блоки памяти), позволяющие
                      хранить различные типы данных в зависимости от текущих потреб­
                      ностей приложения (динамический контроль типов);

                ))    более быстрая разработка.


Perl
   Изначально название языка Perl nредставляло собой сокращение от
"Practical Extraction and Report Language" (nрактический язык для извлечения
данных и составления отчетов). Сейчас его называют nросто Perl. Основное
назначение этого языка сводится к извлечению информации из баз данных и
ее выводу в формате отчета. Но и nомимо этого сnектр nрименения                     Perl   доста­
точно широк. Мне даже доводилось исnользовать его для создания веб-nрило­
жений. Вот основные nреимущества                 Python   nеред   Perl:
                ))    проще в изучении;

                ))    легче в чтении;

                ))    улучшенная защита данных;

                ))    более высокий уровень интеграции с          Java;
                ))    меньше проблем, связанных с платформенной зависимостью.


R
     Сnециалистам          no   обработке данных довольно сложно выбирать между язы­
ками   R   и   Python,     nоскольку оба они nредназначены для статистического ана­
лиза и nостроения научных диаграмм. Оба языка имеют открытый исходный
код и nоддерживают широкий сnектр nлатформ. Тем не менее язык                          R   более
сnецифичен           no   сравнению с   Python   в том nлане, что ориентирован на разра­
ботку научных nриложений. Преимущества                    Python no   сравнению с   R таковы:
                ))    повышение производительности и разборчивости кода;

                ))    ориентированность на корпоративное применение;

                ))    простота отладки;

                ))    использование более совершенных методов кодирования;

                ))    большая степень гибкости;

                ))    проще в изучении.




34         ЧАСТЬ 1        Знакомство со средой     Python
Глава         2

Установка                              Python

 ))   Как получить копию   Python   для своей системы

 ))   Установка   Python
 )) Поиск и использование копии Python в своей системе
 ))   Проверка корректности установки      Python




        ели только вы не собираетесь писать программы на низком уровне
Е       (в машинных кодах), что довольно сложно даже для опытных програм­
        мистов, то учтите, что для создания приложений        Python   вам понадобятся
другие приложения. Они помогают работать с          Python,   создавая программный
код, предоставляя справочную информацию по мере необходимости и позво­
ляя запускать на выполнение написанный вами код. Прочитав эту главу, вы
сможете получить копию      Python,   установить ее на свой жесткий диск, найти
установленные приложения, которые можно использовать, и протестировать

установленную копию, чтобы увидеть, как она работает.



3аrрузка нужной версии
      Для каждой платформы, представляющей собой сочетание аппаратных
и программных средств, существуют специальные правила, которым нужно

следовать при выполнении приложений.            Python   скрывает соответствующие
детали от пользователя. Вы просто вводите код, который выполняется на лю­
бой поддерживаемой платформе, и        Python   преобразует этот код во что-то, что
может быть запущено на текущей платформе. Но для того, чтобы подобное
преобразование было успешным, нужно располагать версией                Python,   которая
работает в вашей конкретной системе.
     Ниже перечислены платформы, поддерживаемые в                     Python (хотя это,   вероят­
но, далеко не полный перечень):

             ))   AIX (Advanced IBM Unix);
             ))   Android;
             ))   Ве05;

             ))   Berkeley 5oftware Distribution (B5D)/FreeB5D;
             ))   HP-UX (Hewlett-Packard Unix);
             ))   IBM i (ранее А5/400, i5eries и 5ystem i);
             ))   i05 (iPhone Operating 5ystem);
             ))   Linux;
             ))   Мае      05 Х (Python предустановлен в этой системе);
             ))   M5-D05 (Microsoft Disk Operating 5ystem);
             ))   Morph05;
             ))   05/2 (Operating 5ystem 2);
             ))   05/390 и z/05;
             ))   Palm05;
             ))   Play5tation;
             ))   Psion;
             )) QNX;
             ))   Rl5C 05        (изначально   Acorn);
             ))       5eries 60;
             ))       5olaris;
             ))   VM5 (Virtual Memory 5ystem);
             ))       32-разрядные версии       Windows (ХР и более поздние);
             ))       64-разрядные версии       Windows;
             ))   Windows CE/Pocket РС.

            Как видите, количество поддерживаемых платформ просто пора­
            жает воображение! Примеры, рассмотренные в этой книге, были
            проверены в среде           Windows,     Мае   OS   Х и   Linux.   Но они могут хо­
  СОВЕТ
            рошо работать и в других системах, поскольку не используют код,
            специфичный для платформы. Если по какой-то причине пример не
            работает в вашей системе, отправьте мне письмо по адресуJohn@
            JohnMuellerBooks. com, описав суть проблемы. На момент выхода
            книги текущая версия           Python - 3.7.0.


36        ЧАСТЬ   1     Знакомство со средой         Python
      Чтобы получить версию                                        Python,       подходящую для вашей платформы, перей­
дите по адресу                                 https: //www.python.org/downloads/release/python-370/.
Раздел загрузки обычно скрыт, поэтому нужно выполнить прокрутку, чтобы
получить к нему доступ. После этого на экране появится страница, подобная
показанной на рис.                                 2.1.   Основной раздел этой страницы содержит ссылки на
загрузочные файлы для                                      Windows,             Мае            OS            Х и    Linux.             Эти ссылки позволяют
выполнить установку по умолчанию, используемую в книге. В левой части
страницы находятся ссылки для разных платформ, отображающие альтерна­
тивные конфигурации                                  Python,             которые можно использовать в случае необходи­
мости. Например, если вам понадобится редактор с расширенными функция­
ми, отличающийся от редактора, предлагаемого стандартным пакетом                                                                                                                Python,
можете воспользоваться одной из альтернативных конфигураций.


  "   Pyttoi~PyttюnJ.7.0 !                   х




      Fites
                                                     Oper~ting Sy!;tem    Dc~riptim1                          M05Sur11                                           l-ilu5i.le     GPG

                                                     Soшce rE4e-d'foe                                         41Ь659Xlt>Ь4l47•1E!d~l f а 7d9.a!НI01 f l           J.214tJf16    ;1с


                                                                                                              ~Ь8c1.it&hl4tl /d~l'k'U:Н1'4af 411Нlf J             tбчnню        ;1с


      nмс0'::!64·   tt1t/Jl   Ь t   1n"r .• 11"r                          fOf Md1 OS Х   10.Ь .i11i.I \IНИ    1..1' 3t>h840'11dOff6dOlf'4JfG.1a l )4   J i!U>     \4}/Ц8J       SI<

                                                     м..:оsх              fщ~X10.9aщJl11tm                    !i~O 1) f "01t-fe1Зt)()(>tl:J4ditdt6RVdL4'-38       176:;1176     SIL

                                                                                                              4t.562af86<.lU49ddOL<. /680..И818<kk.~             8>11699        bl(1


                                                                                                              cb8b4JOd9 79~36J.58t 73f'd:S.. l d,,-f 1OJ~         G.946081      ~lf-J


                                                                                                              !i31c3kA11 (r0<t4107b6d/r6в I )9tк-Эн               26>62280      Sl<1

                                                                                                              3i.fdal4c8d 3ЫМ /531'\{·с} /bajl01dtмd2             13Ul60        !)lli

                                                                                                              ed9~1(028c1('9<1fSЗl     lb9r.10t'iJrtftl(1f        6J')~<Jtl2    i;1t1

                                                                                                              f'bM4Mc7A.4t 1447~?~738 t~fpffO                     2S306&12      "il(i

                                                                                                               f79'408~64eti3ti!)Ьla4Пfd~3tк.d4                   1.198l80      Slf




         Рис.         2. 7.          На странице загрузки                     Python              приведены ссылки для всех версий

      Если вы используете другую платформу, перейдите по адресу                                                                                                  https: / /www.
python. org / download/ other /. На экране появится список файлов установки
Python для                    других систем (рис.                         2.2).      Многие из этих файлов поддерживаются
волонтерами, а не разработчиками, создающими версии                                                                                           Python             для           Windows,
Мае    OS           Х и             Linux.         Обращайтесь к ним, если у вас возникли вопросы по уста­
новке, поскольку они лучше знают, каким образом установить                                                                                                      Python          в вашей
системе.




                                                                                                             ГЛАВА         2       Установка                     Python                 37
                                    P:,ot11un ))) tJow         о      t~ Ш     Ot ltt'I Pl<1tlo11щ,




                                    Download Python for Other
                                    Platforms
                                    Pyltюn       h;'I-. ix•f-11 p111lt~J tt     ~     irr.t>et t•f "f><-'« 1.J1l111•d   ;н1cllt,r ul1JP1 p.l.tlio1n•       ii<>(E-11

                                    t1t•1,1\     m~lrt1at       t1t   1tщ1J         Not1 11at       t'{'S['po1t,01t~nl•яw1'ltx.t1щdttч·l•11• t

                                    l'\llf;u11нl1     ,151



                                    Python for AIX
                                    Python Jand Pythnn 7 a1f'~il&Ь4~f0t frнforA1Xill                             1   •!•1 lpformst м AIXl()(){ ':о WthP
                                    AJ')(Тf101   S W< ~ tf' la1 gN'll:'r.11     iн,о (цr1~nrly,         tt'eriro rtrt> no ltddrtioмl pte     tt>quбrt~ t»tt1(1" t/1,щ

                                    d f<'<t'f)t V\'f'_,юn of ope11Y.J Ьd':i<P       fm   Py1tюn3 З       6S


                                    Tt'lr> do.,.,nl~ pagl:' for Pyttюn l i16t trp                   ""'1'VW a1:0.t~      \f.:f 1nd i pt\f'   P'r11"1(.r: .!nd ttн>

                                    d0\-~11\oad ~Ct          k1r ~hnn 2 is at            ft'   NW\'tJ   fkxtno    ~     "    • ph     ~:      >fi•




                                    Python for IBM i (formerly AS/400, ISeries, System
                                    i)
                                    Вm:t1   t-'y\t1011 l. / •11d Pytlкm J 4 otfll 6Va1lэbl(I for            fн_ie fur IВМ 1v1a   th€ 5733t1PS l1t~nst:'d Pf?-
                                    gram blfe11ng tMSf' t•1n"r1М. rf'quirf' IВМ 11 1 0t N--Nf'Г f-ormnt\O'infc.rmatюn ~Ьо11t 513.iOf'S,

                                    '(Ч:' :ht!   » ·111       ld1 :i П1' fнt      :')(1\Р:М 1k\'   ri1-м•1Wo1~       A/t('1n,1tiw>ly, t   11 ,'w'l<.W .,
                                                                                                                                                                        ..
       Рис.   2.2.   Благодаря волонтерам Pythoп доступен для любых платформ




Инсталляция                     Python
     После загрузки       Python   нужно установить файлы в системе. Загрузочный па-
кет содержит все, что нужно для установки:


                >>    интерпретатор         Python;
                »     файлы справки (документация);

                »     утилиты командной строки;

                »     интегрированная среда разработки                                                                      (lntegrated Development
                      Environment - IDLE);
                »     программа установки                        (Preferred lnstaller Program - pip);
                »     деинсталлятор (только для платформ, в которых он требуется).


     В книге предполагается, что вы используете файлы установки             Python,
доступные по адресу             https://www.python.org/downloads/release/
python-370/.          Если же   вы работаете с версией, которая отличается от 3.7.0,
то некоторые примеры могут оказаться неработоспособными. В следующих


38      ЧАСТЬ 1 Знакомство со средой Python
разделах описывается установка                             Python        на трех основных платформах:
Windows,        Мае     OS   Х и   Linux.

В   Windows
     Процесс установки             Python      в   Windows        осуществляется традиционным обра­
зом. Главное       -     найти загрузочный файл, с которого начинается процесс уста­
новки. Рассмотренная ниже процедура подходит для любой версии                                                           Windows,
независимо от того, что вы устанавливаете:                                   32-     или 64-разрядную версию
Python.

    1.   Найдите загрузочный файл Python.
         Имя этого файла обычно выглядит как       python-3. 7. О. ехе для 32-разрядных
         систем и      python-3. 7. 0-amd64. ехе для 64-разрядных систем. Номер версии
         является частью имени файла. В данном случае имя файла указывает на вер­
         сию   3.7.0,   которая используется в книге.

    2.   Дважды щелкните на файле установки.
         Возможно, на экране появится диалоговое окно                                Open File -          Security       Warпing
         (Открыть файл        -    предупреждение системы безопасности) с вопросом, хотите
         ли вы запустить файл на выполнение. Щелкните на кнопке                                        Run       (Выполнить),
         если увидите такое окно. После этого на экране появится диалоговое окно
         Python Setup (Установка Pythoп), подобное показанному на рис. 2.3. Вид этого
         окна зависит от версии Python.

          ~ Pytlюn з.7 .о (б4- bit)   Setup

                                       lnstall Python 3.7.0 (64-blt)
                                       Select lnstall Now 10 install Python wiih de'ault set1ings. or choose
                                       Customize 10 еn а Ые or d 1saЫe fea tures.

                                        +   InstaRNow
                                            C:\UsersWexlAppOata\Local\Programs\Python\Python37

                                            lndudes IDLE, pip and documentatiOn
                                            Creates shortcuts and fde assoeiatiOns


                                        + Customize installation
                                            Choose Ьc<ition and features



           python
               ,,                      Р' lnstall launcher for all users (recommended)

           windows                     Г Add Python 3.7 to РАТН                                                Cancel    j

         Рис.   2.3.   Процесс установки начинается с выбора типа инсталляции




                                                                        ГЛАВА        2 Установка Python                       39
 3.   Выберите вариант установки. В книге используется настройка, заданная
      по умолчанию: lnstall launcher for all users (Установить для всех пользова­
      телей).

      Благодаря персонализированной установке облегчается инсталляция прило­
      жения в системе с несколькими пользователями. Иногда это также уменьшает
      количество появляющихся предупреждений системы безопасности.

 4.   Установите флажок Add Python 3.7 to РАТН (Добавить Python 3.7 в пере­
      менную РАТН).

      Эта настройка обеспечивает доступ к Pythoп с любого места на жестком дис­
      ке. В противном случае придется добавлять путь к установочному каталогу
      Pythoп вручную.

 5.   Щелкните на ссылке Customize lnstallation (Настроить установку).
      В процессе установки можно будет выбрать, какие функции должны поддер­
      живаться в     Python, как показано на рис. 2.4. Установите все флажки, пусть даже
      не все они вам сейчас понятны.

 6.   Щелкните на кнопке              Next (Далее).

       ~ Pyttюn з.1.0 (64 - Ьit) Setup"':i     ·

                                   Optional Features
                                   Р" Documentation




                                                                                   • tti   •   е1 Р   t     ка е

                                   Р" tcl/ k and ID Е
                                                                         1- rr l    •


                                   Р" Python test suite


                                   Р" ру launcher Р" for all users (requ1res elevation)



        python
            r
        windows                        Back                                                      Next          Cancel



                  Рис.   2.4.   Выберите устанавливаемые функции                                      Python

      На экране появится диалоговое окно                    Advanced Options (Дополнительные па­
      раметры), показанное на рис.                 2.5. Обратите внимание на то, что флажок lnstall
      for all users (Установить для всех пользователей) не установлен, несмотря на то
      что эта возможность была запрошена раньше. В процессе инсталляции нужно
      также указать путь к каталогу, в котором будет установлен                                           Python. Проще ис­
      пользовать каталог, заданный по умолчанию, чтобы сэкономить время и силы
      (хотя можно установить Python в любой каталог).


40     ЧАСТЬ      1 Знакомство со средой Pythoп
        ~ Pytho11 3.7.О (64 -blt) Setup   .~\/'!,'1;_,_ ·


                                  Advanced Options
                                  Г !nstall for all users
                                  Р- Assoda!e fil es with Python (requires !he ру launcher)
                                  Р- Create shortcu!s for installed applications
                                  Р- Add Python to environment variaЫes
                                  Г Precompile standard library
                                  Г Do1•mload debugging symbols
                                  Г Download debug binaries (requires VS 2015 or later)



                                  С ustomize   install location
                                  j C:\Users\дlex\дppData\ ocal\Programs\ Py1hon\Python37        Browse
            python
                f(
            windows                    Back                                          lnstall     Cancef


                         Рис.   2.5. Выбор места для установки Python

             Использование папки               \Prograrn Files или \Prograrn Files                  (х86) может
             вызвать проблемы в силу двух причин. Во-первых, имя папки содержит
             пробел, что затрудняет доступ к ней из некоторых приложений. Во-вто-
вниМАниеt    рых, для доступа к этим папкам обычно требуются права администрато­
             ра, поэтому после установки Python в одну из этих папок вам придется
             постоянно иметь дело со всплывающими окнами системы контроля учет­

             ных записей Windows.

       7.    Чтобы сделать          Python доступным для всех пользователей, устано­
             вите флажок lnstall       for all users (Установить для всех пользователей).
             Учтите, что выбор этого параметра приводит к автоматической установ­
             ке флажка Precompile standard library (Предварительная компиляция стан­
             дартной библиотеки), который нужно оставить.

       8.    При необходимости введите название целевой папки.

             В этой книге используется каталог установки                           Python37.
       9.    Щелкните на кнопке                lnstall (Установить).
             После этого начнется процесс установки. В какой-то момент может по­
             явиться окно системы контроля учетных записей с запросом о продол­
             жении установки. В таком случае щелкните на кнопке                                Yes (Да). Процесс
             установки продолжится, а после его завершения появится диалоговое

             окно   lnstallation Complete (Установка завершена).
      1О.     Щелкните на кнопке Close (Закрыть).
             Теперь можно начинать работать с                     Python.




                                                                   ГЛАВА 2         Установка Python          41
В Мае
     Как правило, в этой системе              Python    установлен изначально. И хотя обычно
его версия не самая последняя, ничего страшного в этом нет. Для работы с
примерами книги последней версии и не нужно. Вы же не собираетесь тести­
ровать все новейшие средства и функции, а просто хотите научиться програм­
мировать на         Python.
                В OS Х Leopard ( 10.5) используется действительно устаревшая вер­
                сия Python под номером 2.5 .1, в которой отсутствует прямой до­
                ступ к приложению IDLE. В результате некоторые примеры книги
ТЕХНИЧЕСКИЕ
nОДРОбНОСl\.1   будут выполняться некорректно. В статье по адресу                      https: / /wiki.
                python. org / moin / MacPyth on / Leopard            описаны способы решения
                данной проблемы. Примеры книги были протестированы на предмет
                совместимости с          OS   Х версии    10.12,   которая поставляется вместе с
                Python 2.7.10.        Более поздние версии         OS   Х и   Python   также должны
                работать нормально, хотя и могут появляться предупреждения об
                использовании некорректной библиотеки или о других потенциаль­
                ных проблемах совместимости.

     Скорее всего, в какой-то момент вам потребуется обновить версию                           Python,
в частности, установить утилиты                    GCC (GNU Compiler Collection),           обеспечи­
вающие доступ к низкоуровневым ресурсам . Чтобы установить новую версию
Python     в Мае      OS   Х   10.6   или выше, выполните следующие действия .

   1.    В адресной строке браузера введите ссылку https:                      / /www.python.org/
         downloads/release/python-370/.
         На экране отобразится информация, относящаяся к последней версии                       Python
         (см. рис.    2.1 ).
   2.    Щелкните на ссылке мае               os   х 64-Ьit/32-Ьit        installer.
         После этого начнет загружаться образ диска. Наберитесь терпения, так как
         загрузка может занять несколько минут. Большинство браузеров показывает
         ход загрузки, поэтому вы сможете видеть, сколько времени осталось до завер­

         шения загрузки.


   3.    Дважды щелкните на файле                  python-3. 7. 0-macosxlO. 6 .pkg, находя­
         щемся в папке загрузки.

         На экране появится диалоговое окно приветствия, в котором отображаются
         сведения о данной версии             Python.
   4.    Трижды щелкните на кнопке                 Continue (Продолжить).
         Программа установки отобразит последние новости о                    Python, сведения о ли­
         цензии, которую нужно будет принять, щелкнув на кнопке Agree (Согласиться),
         и, наконец, финальное диалоговое окно.


42         ЧАСТЬ      1 Знакомство со средой Python
    5.   Щелкните на кнопке     lnstall (Установить).
         Программа установки может запросить ваш пароль администратора. Введи­
         те его и щелкните на кнопке ОК. После этого отобразится диалоговое окно
         lnstalling Python (Установка Python). В процессе установки содержимое этого
         окна изменяется, благодаря чему вы будете знать, какая именно часть про­
         граммы установки выполняется в данный момент.

         После завершения установки появится диалоговое окно           lnstall Succeeded
         (Установка успешно завершена) .

    6.   Щелкните на кнопке    Close (Закрыть).
         Теперь ваша копия   Python готова к применению. (Можете закрыть образ диска
         и удалить его из системы.)



В   Linux
     Некоторые версии      Linux   поставляются с предустановленной копией
                                                                   Python.
Например, если вы располагаете дистрибутивом, основанным на RPM (Red
Hat Package Manager), таким как SUSE, Red Hat, Yellow Dog, Fedora Core или
CentOS, то Python у вас уже есть, и ничего делать не нужно.

               В разных версиях     Linux   будут установлены разные версии   Python,
               и в некоторых системах может не оказаться            приложения IDLE
               (lnteractive DeveLopment Environment). Если у вас старая версия
'IЕХНИЧЕСКИЕ
nодРО6Ности    Python (2.5.1 или еще более ранняя), установите версию поновее,
               где есть IDLE. Многие из примеров, рассматриваемых в книге, рас­
               считаны на использование именно IDLE.

     Python    можно установить в     Linux   двумя способами, которые будут рассмо­
трены в следующих разделах. Первая методика подходит для любого дистри­
бутива     Linux,   тогда как вторая требует выполнения определенных условий.

Стандартная установка
     Стандартная установка может применяться в любой системе . Но вам при­
дется работать в окне терминала и вводить команды вручную. Причем неко­
торые команды могут отличаться в зависимости от версии                 Linux.   На сайте
http: / / docs. python. org/3/install/         вы найдете ряд полезных советов, кото­
рыми сможете воспользоваться при выполнении описанных ниже действий .

    1.   В адресной строке браузера введите         h t tps : / / www. python. org / down
         loads/release/python-370/.
         Отобразится окно с информацией о последней версии        Python (см. рис. 2.1 ).




                                                    ГЛАВА 2   Установка Python          43
 2.    Щелкните на ссыпке, соответствующей вашей версии                     Linux:
       •    Gzipped source tarball     (подойдет для любой версии               Linux);
       • XZ compressed source tarball           (лучшая степень сжатия архива и мень­
            шее время загрузки).

 3.    Когда появится окно с вопросом о том, что вы хотите сделать                    - открыть
       иnи сохранить файл,    -    щелкните на кнопке Сохранить.

       После этого начнут загружаться файлы исходного кода Pythoп. Будьте терпе­
       ливы: процесс загрузки файлов может занять несколько минут.

 4.    Дважды щелкните на загруженном файле.
       Откроется окно менеджера архивов. Когда файлы будут извлечены из архива,
       в окне менеджера появится папка     Python 3. 7. О.
 5.    Дважды щелкните на папке        Python   З.   7 . о.
       Менеджер архивов извлечет файлы в подпапку             Python 3 . 7 • О домашней   папки.

 6.    Откройте пpиnoжeниeTerminal.

       На экране появится окно терминала. Если вам не приходилось ранее выпол­
       нять сборку программных пакетов, то сначала нужно установить необходи­
       мые компоненты сборки, а также утилиты        SQLite и bzip2, в противном случае
       установка Pythoп завершится неудачей. Если же соответствующие приложе­
       ния уже установлены, переходите к п.     1О, чтобы незамедлительно начать ра­
       ботать с   Python.
 7.    Введите команду      sudo apt-get install build-essential.
       Linux установит поддержку Build Essential, требуемую для сборки пакетов.
 8.    Введите команду      sudo apt-get install              libsqliteЗ-dev.
       Liпux установит поддержку SQLite, необходимую для работы с базами данных.

 9.    Введите команду      sudo apt-get install libbz2-dev.
       Linux установит поддержку bzip2, необходимую для выполнения операций
       с архивами.

1 О.   В окне терминала введите команду CD           Python        З.   7. О.
       Текущим каталогом станет папка    Python 3. 7. О.
11 .   Введите команду . / confiqure.
       Сценарий проверит тип сборки, после чего выполнит ряд действий на основе
       используемой вами системы. Этот процесс может занять несколько минут.

1 2.   Введите команду make.
       Linux выполнит сценарий make, который создает среду Python. Выполнение
       сценария занимает около минуты в зависимости от быстродействия системы.

13.    Введите команду      sudo make altinstall.



1+4        ЧАСТЬ 1   Знакомство со средой Python
      Система может запросить ввод пароля администратора. Введите пароль и
      нажмите клавишу <Eпter>. На этом установка              Python   в вашей системе за­
      вершается.



Графическая установка

  Все версии    Linux   поддерживают стандартную установку, которая была рас­
смотрена в предыдущем разделе. Также есть несколько дистрибутивов                   Linux,
основанных на DeЬian, например         Ubuntu   12.х и более поздние, которые под­
держивают графическую установку. Для этого требуется знать пароль админи­
стратора (команда   sudo),   поэтому держите его под рукой. Ниже приведена по­
шаговая инструкция графической установки в             Ubuntu;   в других версиях   Linux
процедура будет аналогичной.

 1.   Откройте папку UЬuntu       Software Center. (На друrих платформах она
      может называться       Synaptics.)
      На экране появится список наиболее популярных программ, доступных для
      загрузки и установки.

 2.   В раскрывающемся списке All Software (Все проrраммы) выберите пункт
      Developer Tools (Инструменты разработчика) или Development (Разра­
      ботка).

      Отобразится список инструментов разработчика, включая              Python.
 3.   Дважды щелкните на записи        Python    З.   7. О.
      Программа Ubuntu Software Center отобразит подробные сведения о версии
      Python 3.7.0 и предложит установить ее.
 4.   Щелкните на кнопке lnstall (Установить).
      Начнется процесс установки      Python и появится индикатор хода выполнения.
      По завершении установки кнопка       lnstall превратится в кнопку Remove (Уда­
      лить).

 5.   Закройте пaпкyUЬuntu       Software Center.
      Значок Pythoп появится на рабочем столе.        Python готов к использованию!



Получение доступа к копии
Python на своем компьютере
  После завершения установки          Python   нужно понять, где его можно найти.
В определенном смысле        Python   делает все возможное, чтобы облегчить этот
процесс, например добавляет каталог установки в переменную среды РАТН.
И тем не менее полезно знать, где конкретно установлен             Python.

                                                 ГЛАВА 2        Установка Python       45
     НЕСКОЛЬКО СЛОВ ОБ ЭКРАННЫХ СНИМКАХ В КНИГЕ


     В первых примерах книги вы будете работать с Pythoп, используя интегри­
     рованную среду разработки     (IDLE) или командную строку. Затем вы начнете
     использовать    Anaconda, поскольку эта графическая среда существенно упро­
     щает работу с   Python. Обе среды, IDLE и Anaconda, называются одинаково на
     всех трех платформах, да и внешние различия практически отсутствуют. Раз­
     личия между платформами несущественны, поэтому в процессе чтения книги
     их можно игнорировать. Учитывая этот факт, все экранные снимки для книги
     были сделаны в   Windows, чтобы все выглядело согласованно.
     Командная строка также работает практически идентично на всех трех плат­
     формах. Ее внешний вид может отличаться чуть сильнее, чем в случае           IDLE или
     Anaconda,   поскольку на разных платформах используются разные командные
     оболочки. Но сами вводимые команды будут одними и теми же. Также иден­
     тичным будет результат выполнения команд на разных платформах. Поэтому
     при просмотре экранных снимков обращайте внимание на результаты работы
     программы, а не на различия в интерфейсе.



В   Windows
     В процессе установки     Python в Windows создается          новая папка в меню Пуск,
с помощью которой обеспечивается доступ к установленным компонентам
Python.   Чтобы перейти в эту папку, выберите Пускс>Все программыс>Руthоп 3.7.
Нас больше всего интересуют пункты IDLE (графическая среда                    Python)   и Python
(командная строка). В главе 4 мы поговорим о том, как использовать графиче­
скую оболочку      Anaconda для создания первого реального               приложения, но пока
мы будем работать в     IDLE и командной строке Python.
     После щелчка на пункте IDLE появится окно интерактивной графической
среды, подобное показанному на рис. 2.6.             IDLE    автоматически отображает
определенную информацию, свидетельствующую о том, что вы открыли нуж­
ное приложение. В частности, программа сообщает номер используемой вер­
сии   Python   (в данном случае       3.7.0).   Также выводятся сведения о системе,
в которой выполняется       Python.
     При выборе пункта меню Python (командная строка) откроется окно команд­
ной строки и будет выполнена команда            Python   (рис.   2.7).   И снова программная
среда автоматически отображает определенную информацию, такую как номер
версии    Python   и сведения о платформе.
     Третий способ обращения к        Python    заключается в том, чтобы открыть окно
командной строки, ввести       Python и нажать клавишу <Enter>. Это может по­
требоваться в случае, когда нужно запустить           Python     в среде с более высокими


46        ЧАСТЬ 1 Знакомство со средой Python
привилегиями (где вы получаете дополнительные права доступа).                                  Python     под­
держивает большое количество параметров командной строки, для просмотра
которых нужно ввести               Python       /?.   На рис.      2.8   показан типичный результат.
Пока что особо не переживайте о параметрах командной строки, поскольку
при работе с примерами книги они вам не понадобятся; просто полезно знать
об их наличии.



   Fte Edlt Shel       Debug Opt.ions WlndOV/ Help
   Python 3.7.0 (v3 . 7 . 0 :1Ьf9cc5 093 , Jun 27 2 18, 0 4:59:51 )           [MSC v.1914 64 Ьit (ii.mб   _J
   4)] on win32
   Туре     "copyrigh~",     "credit3" o r   "licen~e () "   f o r mo re info rmati on .
   >>>




                                                                                                          .:.!
                                                                                                Ln: З СО!: 4

         Рис.   2.6.   Благодаря   IDLE можно работать в удобной графической среде

  ~ Адм1111истра1ор: Кома11д11ая орока - Pythш1
  C:\Users\Alex>Python
   ython З . 7 . 0 (u3.7.0 : 1bf9cc5093 , Jun 27 2018, 0Ч : 59 : 51) [HSC v . 191Ч 6Ч bit (AHDG......J
  Ч)] on win32
  Туре "help" , "copyright" , "credits" or "license" for more information .
  >»




            Рис.   2.7.   Используйте командную строку для быстрого выполнения
                                        требуемых команд


                 Чтобы третий способ обращения к            Python стал доступен, необходи­
                мо добавить каталог установки            Python в системный путь Windows.
                Для этого достаточно            установить флажок Add Python 3.7 to РАТН (До­
 ЗАЛОМНИI
                бавить       Python 3.7      в переменную РАТН) в процессе инсталляции
                 Python.     Если же это не было сделано, воспользуйтесь инструкция­
                 ми, приведенными в моей статье                  "Adding      а   Location to the Windows
                 Path",    которая опубликована по следующему адресу:

                http://Ьlog.johnmuellerbooks.com/2014/02/17/
                 adding-a-location-to-the-windows-path/


                                                                 ГЛАВА 2        Установка   Python             47
  ~ дДfl.tин~ктратор: Командная crpnкi ~-..-~~~~-~ ___ "




  -ь
    :\Python37>Python /?
    sage : Python [option] ... [-с c11d 1 -• mod 1 file 1 -] [arg] . . .
    ptions and argu•ents (and corresponding environment variaЫes) :
             issue warnings about str(bytes_instance) , str(bytearray_instance)
                                                                                        J
             and comparing bytes/bytearray with str . (-ЬЬ : issue errors)
  -В         don "t write . рус files on import ; al so PYTHONDONTWRITEBYTECODE=x
  -с cmd     program passed in as string (ter•inates option list)
  -d         debug output from parser ; also PYTHONDEBUG=x
  -Е         ignore РУТНОN м environ•ent variaЫes (such as PYTHONPATH)
  -h         print this help 11essage and exit (also --help)
  -i         inspect interactively after running script ; forces а pro•pt even
             if stdin does not appear to Ье а terminal ; also PYTHONINSPECT=x
  -I         isolate Python fro• the user's environment (i•plies -Е and - s )
  -m mod run library •odule as а script (terminates option list)
  -О         remove assert and __ debug __ - dependent statements ; add .opt-1 before
             . рус extension ; also PYTHONOPTIHIZE=x
  -оо        do -о changes and als o discard docstrings ; add .opt-2 before
              . рус extension
  -q         don ' t print version and copyright 11essages on interactive startup
  -s         don't add user site directory to sys .path ; also PYTHONNOUSERSITE
  -S         don't i•ply 'i•port site' on initialization
  -u         force the stdout and stderr streams to Ье unbuffered ;
             this option has no effect on s tdin ; also PYTHONUNBUFFERED =x
  -v         verbose (trace import statements ); also PYTHONUERBOSE =x
             can Ье supplied multiple times to increase verbosity
  -u         print the Python version number and exit (also --version)
             when given twice , print more infor11ation about the build
  -w arg warning control ; arg is action :message :category :module : lineno
             also PYTHONWARNINGS=arg
  -х         skip first line of source , allowing use of non -Unix forms of M!cmd
  -Х opt     set implementation-specific option
  - -check-hash-based-pycs alwaysldefaultlnever :
        control how Python invalidates hash-based . рус file s
    ile    : program read from script file
           : program read from stdin (default ; interactive mode if а tty )             ~

         Рис.   2.8. Pythoп можно гибко настраивать с помощью параметров
                                        командной строки

     Аналогичная методика применяется для добавления переменных среды,
специфичных для          Python,   а именно:

                ))    PYTHONSTARTUP;
                ))    РУТНОNРАТН;

                ))    PYTHONHOME;
                ))    PYTHONCASEOК;

                ))    PYTHONIOENCODING;
                ))    PYTHONFAULTHANDLER;
                ))    PYTHONНASHSEED.


     Ни одна из этих переменных не будет использоваться в примерах книги.
Дополнительные сведения о них можно найти по следующему адресу:

https://docs.python.org/3.7/using/cmdline.html#environment-variaЬles


48      ЧАСТЬ        1 Знакомство со средой Python
В Мае
      Работая в Мае, учтите, что          Python,    скорее всего, уже установлен и вам не
нужно устанавливать его повторно. Но в любом случае полезно знать, где он
находится. В следующих разделах рассказывается, как можно получить доступ
к   Python      в зависимости от типа выполненной установки.

поиск установки, заданной по умолчанию
      В большинстве случаев стандартная установка                 OS   Х не включает папку для
Python.        Поэтому нужно открыть окно терминала с помощью команды                      Applica-
tionsqUtilitiesqTerminal,        ввести   Python     и нажать клавишу       <Enter> для   получе­
ния доступа к командной строке                Python.   Результат будет напоминать рис.        2.7.
Как и в        Windows,   командная строка поддерживает целый ряд параметров, с по­
мощью которых можно настраивать способ работы                         Python.
поиск обновленной версии Python, которую вь1 установили
      Если вы устанавливали         Python       в Мае, откройте папку     Applications. В ней
находится папка           Python 3. 7,   в которой содержится следующее:

                  ))   папка   Extras;
                  ))   приложение    IDLE (графическая среда      разработки);

                  ))   Pythoп Lauпcher (интерактивная командная среда);

                  ))   команда   Update Sh.
      После двойного щелчка на значке               IDLE   запустится графическая среда, на­
поминающая ту, которая была показана на рис.                   2.6.   Разумеется, будут неболь­
шие косметические отличия, но содержимое окна останется таким же. После
двойного щелчка на значке            Python Launcher откроется          окно командной строки,
подобное показанному на рис.              2.7.   В этой среде используются все заданные по
умолчанию настройки             Python, обеспечивающие стандартную среду              выполнения.

                 Даже если вы устанавливаете новую версию                  Python    в Мае, вы не
                 обязаны использовать среду, заданную по умолчанию. По-прежнему
                 можно открыть окно терминала, чтобы получить доступ к параме­
    ЗАПОМНИ!
                 трам командной строки           Python. Только   следует убедиться в том, что
                 вы не обращаетесь к установке, заданной по умолчанию. Не забудь­
                 те добавить каталог      /usr / local/Ьin/PythonЗ. 7           в системный путь.


В    Linux
      После завершения процесса установки в вашей домашней папке появит­
ся подпапка        Python 3. 7. Физически Python 3.7 в Linux обычно находится в
папке      /usr / local/Ьin/PythonЗ. 7. Это важно, поскольку может понадобиться

                                                           ГЛАВА 2     Установка Pythoп         49
поменять путь вручную. В                  Linux при работе в окне терминала,                                чтобы получить
доступ к установке                 Python 3.7, нужно ввести PythonЗ. 7, а не                                просто   Python.


Тестирование установки

     Чтобы убедиться в наличии рабочей среды, нужно ее протестировать. По
сути, процесс тестирования означает написание первого приложения     Python.
Начните с открытия IDLE. Как уже упоминалось, в окне IDLE автоматически
отображаются версия Python и сведения о системе.
   Чтобы проверить работоспособность Python, введите print ( "Мо11 первая
программа на языхе Python. ") . Python выдаст только что введенное со­
общение, как показано на рис. 2.9. Команда print () отобразит на экране все,
что вы ей скажете; она является одной из наиболее часто используемых.

    ~ l'ytho11 3./ .О Shel . •"~
    Fle Ed Shel OeЬug Options W.ndow Не1р
    Py~hon З.7. 0 (v З.7. 0: 1Ьf9сс5 93, Jun 27 2018, 0 4:59:51 ) [МЗС v.1914 64 bi~ (АМD64 ) ]                           ~
    on win32
    Туре " copyriqht. 11 ,     " c re di~~ "          o r "licenee () " for more inform.aci o n.
    >>> print( "!. ,.. ~     t:-e~:;.    -~   ... :--рах::::а   ~   ....   -~ ~   .   )
    Моя   первая   nparplll.ммa         ка    А3ыке        Pyt.hon.
    >>>


                                                                                                                          _J
                                                                                                                 Ln: 5 Col: 4

    Рис.   2.9. Команда pr in t () отображает любую информацию, которую нужно
                                                                вывести на экран



     В    IDLE     применяется цветовая разметка кода, чтобы его было легче пони­
мать. По цветовой разметке можно сразу же определить, все ли вы сделали
правильно. Чаще всего вам встретятся четыре цвета.

                   ))    Фиолетовый. Указывает на то, что вы ввели команду.

                   ))    Зеленый. Соответствует аргументам команды.

                   >>    Синий. Указывает на вывод команды.

                   »     Черный. Код, не относящийся к команде.

     Итак, вы проверили работоспособность                                                 Python,   отправив ему команду и
получив на нее ответ. А теперь попробуем ввести еще одну команду. Введите
З   +4     и нажмите клавишу                            <Enter>. Python               ответит, отобразив значение 7, как
показано на рис.               2.1 О.          Обратите внимание на то, что выражение 3 + 4 будет
выделено черным цветом, так как это не команда. В то же время цифра 7 выде­
ляется синим цветом, поскольку это результат выполнения команды.




50         ЧАСТЬ        1 Знакомство со средой Python
  Fle    Edt   Shel   OeЬUg   Options   Wll1dow   не!р
  P;'1'hon 3 . 7 .  (v 3.7.0:1Ьf9сс5 09 З, Jun 27 2018 , 0 4:59:51) [МЗС 7.1914 64 Ьi~ ( АИD64)]            ~
  on win32
  Туре "copyrighc", " credit~" or "licen3e()" for more information.
  >>> prin«;( "~~~;;; ~eF~a01. ;-:f::rpa;~a ~а 'i:!-~.~ r .... , .::n '' )
  м:оя   переая    программа    на   Я3ЫКе   Python"
  >>> 3 + 4
  7
  >>>




                                                                                                            ~
                                                                                                  ll1: 7 COI: 4

         Рис. 2.1 О. Pythoп позволяет выполнять математические вычисления
                                  в интерактивной среде


   Ну а теперь пришло время завершить сеанс                                  IDLE.    Введитеqui t ()     и на­
жмите клавишу            <Enter>.       Появится сообщение, показанное на                   рис. 2.11.   Щел­
кните на кнопке ОК, что приведет к завершению сеанса.




                                                   Уоuг program IS sti running!
                                                    Do you want to ldl it?



                                                   l [.~__9.К~.:JI _о_т_ме_на___,

                                        Рис. 2. 71. Предупреждение при
                                          попытке завершить сеанс



   Заметьте, что команда qui t () снабжена круглыми скобками, как и команда
print ().      В   Python      все команды дополняются круглыми скобками, это их от­
личительный признак. Если вы не передаете команде никаких параметров, то
между скобками ничего вводить не нужно.




                                                                      ГЛАВА       2 Установка Python              51
Глава З

Взаимодействие
с Python


 >>   Доступ к командной строке

 »    Использование команд для выполнения задач

 »     Получение помощи

 »    Завершение сеанса командной строки




в
         конечном счете любое приложение, созданное пользователем, взаимо­
         действует с компьютером и содержащимися в нем данными. Основную
         роль здесь играют данные, поскольку без них нет смысла использовать
приложения. Любое приложение, даже такое простое, как пасьянс Косынка,
каким-то образом манипулирует данными. То, что делает большинство прило­
жений, хорошо описывается акронимом             CRUD:
             ))   Create (Создание);
             ))   Read   (Чтение) ;

             ))   Update (Обновление);
             ))   Delete (Удаление).

      Просто запомните акроним        CRUD, и   вы будете знать, как работает с данны­
ми большинство приложений. Но прежде чем приложение сможет общаться с
компьютером, нужно составить для него список задач на языке программиро­

вания, понятном компьютеру. Об этом и пойдет речь в данной главе. Мы нач­
нем общаться с     Python,   передавая ему команды, которые он будет превращать
в инструкции, воспринимаемые компьютером.
Открытие командной строки
     Пользователи могут взаимодействовать с             Python   несколькими способа­
ми. Например, вы уже успели немного поработать в графической среде                     IDLE
(lntegrated DeveLopment Environment), которая описывалась в главе 2. (В гла­
ве 4 вы познакомитесь с полнофункциональной интегрированной средой раз­
работки под названием Anaconda.) Благодаря IDLE упрощается разработка
сложных приложений. Но зачастую нужно просто немного поэксперименти­
ровать или запустить существующее приложение. В таком случае проще вос­
пользоваться командной строкой           Python,   поскольку она обеспечивает лучший
контроль над средой выполнения с помощью различных параметров команд­
ной строки и использует меньше ресурсов. Благодаря предельно простому ин­
терфейсу можно сосредоточиться на выполнении кода и не тратить время на
разбирательство с графическим интерфейсом.


Запуск    Python
     Командную строку можно запускать по-разному, в зависимости от платфор­
мы. Вот наиболее распространенные варианты.

              ))     Перейдите в папку   Python37   и выберите элемент   Python   (Командная
                   строка). Это приведет к запуску сеанса командной строки с исполь­
                   зованием настроек, заданных по умолчанию.

              ))   Откройте командную строку или окно терминала и введите            Python.
                     Используйте этот способ в том случае, когда хотите получить воз­
                     можность настраивать среду      Python   с помощью параметров ко­
                     мандной строки.

              ))     Найдите папку   Python,   которая может называться с:   \    PythonЗ 7 в
                     Windows, и непосредственно запустите файл Python. ехе. В резуль­
                   тате откроется сеанс командной строки, использующий настройки
                     по умолчанию. Можно также открыть этот сеанс с повышенными
                     привилегиями (если планируется запускать приложения, которые
                     нуждаются в доступе к защищенным ресурсам) либо изменить свой­
                     ства исполняемого файла (добавив параметры командной строки).

     В любом случае в командной строке появится подсказка, подобная показан­
ной на рис.   3.1.   (Ваше окно может отличаться от окна, показанного на рис.            3.1,
если вы работаете не в        Windows,    если вместо командной версии        Python    при­
меняется    IDLE,     ваша система имеет иную конфигурацию либо у вас установ­
лена другая версия       Python.)   В командной строке отображается информация о
версии   Python,     операционной системе и способах получения дополнительных
сведений.


54       ЧАСТЬ 1      Знакомство со средой Python
 !J,vvttю11 з.1.0 s11eU                        •   .·-~~:~::_    _
  F1e   Edit   Shel    DeЬug      Optюns   W111d0\v    Help
  Py>ohon 3 . 7.0 (v3.7.0:1Ьf9cc5093, Jun 27 2 0 18, 04 :59:51) [НЗС v.1914 64 bit ( АМD64)]               _:_J
  an win32
  Туре "copyright'     "credit:!1' or 11 licenзe (} " for more information.
                         1
                             ,             1


  >>>




                                                                                                           _:J
                                                                                              Ln:   З   Col: 4

    Рис.   3. 1. Благодаря командной строке можно больше узнать о среде Python


  НЕ ЗАБЫВАЙТЕ О ФАЙЛЕ


  Многие приложения включают файл README. К сожалению, большинство
  пользователей игнорируют его, а некоторые даже не подозревают о его суще­
  ствовании. В результате они упускают важные сведения о своих приложени­
  ях. В Python имеется файл NEWS. txt, который находится в папке \Python37.
  В нем содержится полезная информация, в основном о новинках текущей вер­
  сии    Python, о которых стоит знать.
  Не поленитесь открыть и прочитать файл NEWS. txt, чтобы потом поражать
  друзей глубиной своих познаний языка.




Как извлечь максимум пользы из командной строки
  Этот раздел может поначалу показаться немного сложным, да и не особо по­
лезным. Но уверен, в будущем вам пригодится эта информация. А пока можете
просто пробежать раздел глазами, чтобы понять, какие варианты есть в вашем
распоряжении.

  Чтобы запустить                  Python из командной строки, достаточно ввести Python и
нажать клавишу                   <Enter>. Однако это далеко не все, что можно сделать. В ко­
мандной строке можно ввести дополнительную информацию, которая позво­
лит изменить способ работы                         Python.
                  >>     Параметры. Параметр, или переключатель, командной стро­
                         ки начинается знаком "минус'; за которым следует одна или не­
                         сколько букв. Например, для получения справки о                   Python введи­
                        те       Python -h.         На экране появится информация о порядке работы


                                                                ГЛАВА 3   Взаимодействие с Python            55
                      с   Python   в режиме командной сроки. О параметрах командной стро­
                      ки мы детально поговорим далее.

                 ))   Имя файла. Если при вызове       Python указать имя файла, то Python
                      запустит его на выполнение. Подобным образом можно запустить
                      любой пример книги, просто указав в командной строке имя его
                      файла. Пусть, к примеру, файл называется SayHello. ру. Чтобы за­
                      пустить пример, введите      Python SayHello. ру.
                 ))   Аргументы. Работу многих приложений можно контролировать
                      с помощью аргументов командной строки. К этой теме мы вернемся
                      в других главах.



                Большинство параметров вам пока ни о чем не скажут. Поэтому мо­
                жете спокойно пропустить данный раздел и вернуться к нему позже,
                когда в этом возникнет необходимость.
lСХНИЧЕСКИЕ
ПОДРОБНОСТ\.1


                В   Python    параметры командной строки чувствительны к регистру
                символов. Например, параметр          -s   принципиально отличается от па­
                раметра      -s. Параметры запуска Python      перечислены ниже.
 ЗАПОМНИ!



                 ))   -Ь. Вывод предупреждения, когда приложение выполняет сравне­
                      ние байтов или байтовых массивов с помощью функции        str ().
                 ))   -ЬЬ. Вывод сообщения об ошибке, когда приложение выполня­
                      ет сравнение байтов или байтовых массивов с помощью функции
                      str ().
                 ))   -в. Не записывать файлы .ру или .русо при импорте модулей.

                 ))   -с     cmd. Запускать программу с использованием информации, за­
                      данной в аргументе cmd. Все последующие данные трактуются как
                      часть этого аргумента.

                 ))   -d. Запуск отладчика (применяется для поиска ошибок в приложе­
                      нии).

                 ))   - Е. Игнорирование всех переменных среды Pythoп, таких как
                      PYTHONPATH, применяемых для конфигурирования среды выполне­
                      ния.

                 ))   -h. Отображение справки по параметрам и основным переменным
                      среды. В результате выполнения этой команды Python всегда завер­
                      шает свою работу, чтобы вы смогли прочитать справку.

                 ))   - i. Заставляет Python    перейти в интерактивный режим выполнения
                      кода после запуска сценария. Запрос на ввод появляется даже в том
                      случае, когда     stdin   (стандартное устройство ввода) не является
                      терминалом.



56          ЧАСТЬ 1 Знакомство со средой Python
))   -m mod. Запуск библиотечного модуля, указанного с помощью аргу­
     мента    mod,   в качестве сценария. Все последующие данные трактуют­
     ся как часть аргумента      mod.
))   -о. Небольшая оптимизация генерируемого байт-кода {ускоряет его
     выполнение).

))   -оо. Дополнительная оптимизация за счет удаления строк докумен­
     тации.


))   -q. Указывает на то, что не нужно выводить сообщения о версии
     и авторском праве при интерактивном запуске.


)) -s. Указывает        на то, что не нужно добавлять каталог местоположе­
     ния пользователя в переменную            sys .path {эта   переменная сообща­
     ет   Python   о том, где искать модули).

)) -s. Не запускать импорт местоположений при инициализации. Это
     означает, что      Python   не будет искать каталоги, в которых могут
     содержаться необходимые модули.

))   -u. Разрешает небуферизованный двоичный ввод для устройств
     stdout    (стандартный вывод) и         stderr (стандартный   поток ошибок).
     Устройство      stdin всегда   буферизуется.

))   -v.   Переключение в режим вывода подробных сведений, позволя­
     ющий просматривать все инструкции импорта. Многократное ис­
     пользование этого параметра увеличивает уровень подробностей.

))   -v.   Вывод номера версии      Python     и завершение работы.

)) --version. Вывод номера           версии     Python   и завершение работы.

)) -w arg.      Изменение уровня предупреждений, которое приводит к
     тому, что     Python   отображает больше или меньше предупреждений.
     Допустимые значения аrgприведены в ниже.

     •     action
     • message
     •     category
     • module
     •     lineno
))   -х. Пропуск первой строки файла исходного кода, благодаря чему
     можно использовать синтаксис #!команда, несовместимый с                 Unix.
))   -х    opt. Установка    параметра, зависящего от реализации. (Информа­
     цию о таких параметрах вы сможете найти в документации к своей
     версии    Python.)




                                 ГЛАВА   3    Взаимодействие с      Python      57
Использование переменных среды                      Python
     Переменные среды         -    это специальные настройки, которые являются
частью командной строки или среды терминала операционной системы. Они
предназначены для согласованной настройки             Python.   Переменные среды вы­
полняют те же функции, что и параметры, указываемые при запуске                 Python.
Но благодаря тому, что значения переменных среды не изменяются, можно со­
хранять постоянную конфигурацию            Python   при каждом запуске. Это позволит
избежать настройки параметров вручную.

              Как и в случае с параметрами, переменные среды вряд ли будут
              для вас полезны прямо сейчас. Это просто информация, которой вы
              сможете воспользоваться в случае необходимости. Некоторые из пе­
технические
nодю&ности    ременных среды будут использованы в примерах книги. Сделайте
              закладку на этом разделе, чтобы вернуться к нему позже.

     В большинстве операционных систем переменные среды можно конфигури­
ровать временно, в течение определенного сеанса, или на постоянной основе,
как часть конфигурации операционной системы. Как конкретно это делается,
зависит от платформы. Например, в         Windows    можно воспользоваться командой
Set (см. мой пост в блоге http: / /Ыоg. johnmuellerbooks. com/2014 /02/24 /
using-the-set-command-to-your-advantage) либо специальной утилитой кон­
фигурации Windows (см. мой пост в блоге http: / /Ыоg. j ohnmuellerbooks.
com/2014/02/17 /adding-a-location-tothe-windows-path/, где описан при­
мер настройки переменной Path).

               Переменные среды имеет смысл использовать в том случае, когда
               приходится регулярно конфигурировать         Python однотипным     обра­
              зом. Ниже перечислены переменные среды          Python.
 ЗАЛОМНИI



               >>     PYTHONCASEOK=x. Заставляет Python игнорировать регистр симво­
                    лов при синтаксическом анализе инструкций     import.   Эта перемен­
                      ная среды предназначена только для   Windows.
               »      PYTHONDEBUG=x. Выполняет ту же функцию, что и параметр -d.
               ))     PYTHONDONTWRITEBYTECODE=x. Выполняет ту же функцию, что и па­
                      раметр -в.

               »      PYTHONFAULТHANDLER=x. Заставляет     Python выводить дамп стека
                      вызовов в случае возникновения фатальных ошибок.

               »      PYTHONHASHSEED=arg. Определяет начальное значение, использу­
                      емое для генерирования различных видов хеш-значений. Если этой
                      переменной присвоено значение    random, Python   использует слу­
                      чайное число в качестве начальной величины для генерирования


58          ЧАСТЬ 1    Знакомство со средой Python
                 хеш-значений объектов    str, bytes и datetime. Допустимый диапа­
                 зон целочисленных значений      - от О до 4 294 967 295. Использо­
                 вание фиксированного числа позволяет получать прогнозируемые
                 хеш-значения в целях тестирования.

            ))   PYTHONHOME=arg. Определяет заданный             по умолчанию путь поиска,
                 применяемый в     Python для   поиска модулей.

            ))   PYTHONINSPECT=x. Выполняет ту же функцию, что и параметр -i.
            ))   PYTHONIOENCODING=arg.      Задает кодировку (например,             UTF-8),   ис-
                 пользуемую для устройств       stdin, stdout и stderr.
            ))   PYTHONNOUSERSITE. Выполняет ту же функцию, что и параметр -s.
            ))   PYTHONOPTIMI ZE=x. Выполняет ту же функцию, что и параметр -о.
            ))   PYTHONPATH=arg. Содержит        разделенный точками с запятой(;) спи-
                 сок каталогов, применяемых для поиска модулей. Это значение хра­
                 нится в переменной    sys .path в Python.
            ))   PYTHONSTARTUP=arg. Задает имя файла, вызываемого при запуске
                 Python. У этой   переменной среды нет значения по умолчанию.

            ))   PYTHONUNBUFFERED=x. Выполняет ту же функцию, что и пара­
                 метр-u.
            ))   PYTHONVERBOSE=x. Выполняет ту же функцию, что и параметр -v.
            ))   PYTHONWARNINGS=arg. Выполняет ту же функцию, что и пара­
                 метр   -w.


Ввод команд
  После запуска командной строки         Python       можно начинать вводить команды.
Это позволяет проверять различные идеи, возникающие по ходу написания
приложений, и получать представление о том, как фактически работает                    Python.
Соответствующие детали зачастую скрыты в интерактивной среде, такой как
IDLE.

Скажите компьютеру, что ему нужно делать
  Python,   как и любой другой язык программирования, опирается на исполь­
зование команд. Команда       -   это просто шаг процедуры, как, например, вызов
функции print ().
  Чтобы проинструктировать компьютер о выполняемых действиях, нужно
передать ему одну или несколько команд на             Python.   Затем   Python   переведет эти
команды в инструкции, понятные компьютеру, после чего появится результат.




                                         ГЛАВА    3    Взаимодействие с          Python       59
Команда типа    print () может практически мгновенно отображать результаты
на экране. В   Python    имеется множество команд, многие из которых не отобра­
жают на экране ничего, хотя и делают что-то важное.

     По мере чтения книги вы будете использовать команды для решения самых
разных задач. Каждая из этих команд поможет вам достичь нужной цели, по­
добно шагам процедуры. Если вам кажется, что команды             Python   становятся
слишком сложными, просто относитесь к ним, как к отдельным шагам. Любая,
даже самая сложная, процедура становится проще, если рассматривать ее по­

шагово. То же самое можно сказать и о командах       Python.   Рассматривайте их по
очереди и фокусируйтесь на конкретном шаге.


Расскажите компьютеру, что вы сделали
     В какой-то момент времени выполнение процедуры завершается. В примере
с приготовлением тостов это происходит, когда вы заканчиваете намазывать

масло на хлеб. Компьютерные процедуры работают точно так же. Все они име­
ют точку начала и конца. При вводе команд конечной точкой для конкретного
шага является нажатие клавиши        <Enter>. После ввода команды вы сообщаете
об этом компьютеру нажатием        клавиши <Enter>. По мере чтения книги вы об­
наружите, что в   Python существует      несколько способов показать, что команда,
процедура или даже целое приложение завершены.



Просмотр результатов
     Теперь вы знаете, что команда является шагом процедуры и что каждая ко­
манда имеет точку начала и конца. Кроме того, группы команд и целые прило­
жения также имеют начало и конец. Давайте рассмотрим, как все это работает.
Следующая процедура поможет вам увидеть результат выполнения команды.

  1.   Запустите командную строку Python.

       На экране появится окно, в котором можно вводить команды, как было пока­
       зано на рис.   3.1.
 2.    В командной строке введите        print ("Текстовая строка. ").
       Обратите внимание: ничего не происходит. Да, вы ввели команду, но вы не
       указали, что она завершена.

  3.   Нажмите кnавишу <Enter>.
       Теперь команда завершена, поэтому вы увидите результат, подобный показан­
       ному на рис.   3.2.
     Это упражнение показывает, как все работает в       Python.   Каждая команда,
вводимая пользователем, выполняет определенное действие, но только по­
сле того, как вы сообщите       Python   о том, что команда завершена. К примеру,


60       ЧАСТЬ 1 Знакомство со средой Python
  А1е   Edlt   Shel   DeЬug   OptiOns   Window   HeJp
  Python З. 7. О (v3. 7 . О : 1Ьf9сс5093, Jun 27 2 18, 04: 59: 51 ) [MSC v. 1914 64 Ьit (АМD64) г- ~
  on win32
  Туре "copyri9ht 11 ,  ''credit~" or "licen~e () " for more information.
  >>> print(":eкcтo~aя ~тр~r~." )
  Текстоеая      строка .

  >>>

                                                                                          Ln: 5 Col: 4

   Рис. 3.2. С помощью команд вы говорите Pythoп о том, что должен сделать
                                                    компьютер



команда        print ()       выводит данные на экране. В данном случае отображается
текст, вводимый пользователем. Результат, показанный на рис.                      3.2,   появляется
непосредственно после ввода команды, поскольку используется интерактивная

среда. Позже, когда вы начнете создавать приложения, вы поймете, что иногда
результат появляется не сразу из-за задержек со стороны приложения. Как бы
там ни было, команда начинает обрабатываться, как только приложение сооб­
щает    Python о       том, что команда завершена.



  СТИЛИ ПРОГРАММИРОВАНИЯ НА                                PYTHON

  Большинство языков программирования ориентировано на использование
  одного стиля программирования, что существенно снижает их гибкость. Но о
  Python такого не скажешь. В нем можно использовать разные стили програм­
  мирования. Ниже перечислены четыре наиболее часто используемых стиля
  программрования.


   •    Функциональный. Каждая инструкция является своего рода математиче­
        ским уравнением. Этот стиль хорош для выполнения параллельной обра­
        ботки инструкций.

   •    Императивный. Вычисления происходят при изменении состояния про­
        граммы. Этот стиль чаще всего используется для управления структурами
        данных.


   •    Объектно-ориентированный. Этот стиль обычно применяется для упро­
        щения кода. В данном случае реальный мир моделируется с помощью па­
        радигмы объектов.               Python не полностью реализуеттакой стиль программи­
        рования, поскольку не поддерживает некоторые возможности, например

        инкапсуляцию. Тем не менее элементы объектно-ориентированного стиля
        используются достаточно широко. Примеры будут показаны в последую­
        щих главах.


   •    Процедурный. Весь код, который вы написали до сих пор (как и большая
        часть кода примеров книги), является процедурным: задачи в нем выпол-



                                                        ГЛАВА З   Взаимодействие с Python                61
        няются последовательно, шаг за шагом. Этот стиль больше всего подходит
        для итеративных, последовательных вычислений и выборки данных. Это
        простейший стиль программирования.

     Несмотря на то что наша книга не охватывает все стили программирования,
     полезно знать, что вы не являетесь заложником одного конкретного стиля.

     Благодаря тому что в Pythoп поддерживается несколько стилей программи­
     рования, которые можно свободно сочетать в одном приложении, вы вольны
     использовать Pythoп тем способом, который лучше всего подходит для ваше­
     го конкретного случая. Дополнительные сведения о различных стилях про­
     граммирования можно найти в статье по адресу
                                               https: / /Ыоg. newrelic.
     com/2015/04/01/python-prograrnming-styles/.



Справочная система
     Не следует забывать о том, что   Python- это   компьютерный язык, а не чело­
веческий. Поэтому никто не может изначально на нем говорить. И даже освоив
Python, вы не начнете свободно говорить "на языке Python". Освоение команд
Python требует времени, сравнимого с затратами времени на изучение друго­
го человеческого языка. Например, если вы хорошо говорите по-английски и
хотите выучить другой язык, тот же немецкий, вам понадобится соответству­
ющее руководство, иначе ваши попытки могут оказаться безуспешными, а все,
что вы будете говорить на другом языке, будет звучать как минимум странно.
И даже если вы скажете что-то осмысленное, оно может восприниматься со­
всем не так, как вы думаете.

     Аналогично при изучении языка программирования        Python   вам понадобит­
ся руководство, которое поможет в затруднительных ситуациях. К счастью,
о наличии такого руководства позаботились разработчики           Python.   Справка
Python   работает на двух уровнях:

             >>   режим справки, позволяющий просматривать сведения по всем до­
                  ступным командам;

             >>   непосредственная справка, предоставляющая сведения о конкрет­

                  ной команде.

     Не существует единственного верного способа использования справки, по­
скольку все зависит от конкретной ситуации. Способы получения справки опи­
саны в следующих разделах.




62       ЧАСТЬ 1 Знакомство со средой Python
Переход в режим справки
   После первого запуска                                        Python      появляется экран, подобный показанному
на рис.     3.1. Python                     сразу же предлагает вам следующие четыре команды (соб­
ственно говоря, это первая часть справочной информации):

                      >> help ();
                      »         copyright ();
                      »         credi ts ();
                      »         license ().

   Все они позволяют получить справку о                                                         Python.       Например, команда
copyright () сообщает о тех, кто имеет право копировать, лицензировать или
иным образом распространять Python. Команда credi ts () сообщает о разра­
ботчиках Python. Команда license () выводит соглашение об использовании,
заключенное между вами и владельцем авторских прав. Однако самая интерес­
ная команда                -     это, конечно,                    help ().
   Чтобы перейти в режим справки, введите                                                  help ().       Учтите, что нужно ука­
зывать круглые скобки после команды, даже если они не отображаются в тек­
сте справки. Каждая команда                                         Python      завершается круглыми скобками. После
ввода этой команды                            Python           переходит в режим справки, и на экране появляется
окно, подобное показанному на рис.                                            3.3.


  Fle    Edit       Shel       DeЬug        Optlons       W1ndow       Нф
  Python З.7 . 0 (v3.7.0 : lb f 9cc509З , Ju n 27 2018 , 0 4: 59 : 51)                               [MSC v . 1~14 6 4 bit (АМD64 ) ~
  ] on '"'i n32
  Туре "copyri ght " ,                 11   c r ed i t8   11   o r "licen!S e () " f o r mo re in fo nnati o n.
  >>> help ()

  Welcome to Python 3.7'!S help utilityl

  If thi~ i~ your fir~t time u!Sing Python, you !Should definitely check out
  the tutorial on the Internet at http~://docs.python.org/3.7/tutorial/.

  Enter the name of any module, keyword , or topic to ge~ help on writing
  Python program!S and U!Sing Python module~.    То quit thi!S help utili~y and
  return to the interpret.er, ju!St ~уре "qui.:.".

  То            а
            li!St of availaЫe module!S, keз•worciз, ~yrnЬole, or tор1сг, type
        ge-c.
  "module~",   11 keywords", 1 ' зуmЬоl~", or "topics". I:ach module al.so c:ime.e
  wi th а one-line .sumrnary of what. it does; tc list. the moduleз •,;ho~e name
  or зurnmary contain а given зtring зuch а~ "зраm 11 , type "moduleз !'pam 11 •

  help>


                                                                                                                                      .:J
                                                                                                                         Lл :   19 Col: 6

                                                    Рис.        3.3.   Переход в режим справки


   Признаком режима справки служит приглашение                                                        help> в командной строке.

                                                                             ГЛАВА 3        Взаимодействие с Python                     63
Получение справки
     Чтобы получить справку, нужно знать, какой именно вопрос задать. Началь­
ное справочное сообщение, отображаемое после перехода в режим справки
(см. рис.       3.3), содержит несколько                 полезных советов о типах вопросов, которые
можно задать. Если хотите изучить                            Python,   обратите внимание на следующие
четыре основные темы:


                  ))     modules;
                  ))     keywords;
                  ))     symЬols;

                  ))     topics.
     Первые две темы на данный момент вам неизвестны. Тема                                        modules       (мо­
дули) не понадобится вам до главы                              1О.   Ну а тема   keywords     (ключевые сло­
ва) пригодится, начиная с главы                        4.    Зато темы symЬols (специальные символы)
и   topics (разделы справки) будут полезны прямо сейчас, поскольку помогут
лучше понять, с чего начать путешествие в мир                               Python.     Введите symЬols, и
вы увидите список специальных символов, используемых в                                Python (рис. 3.4).
О них мы поговорим в главе                       7,   при рассмотрении      операторов Python.



    Fie   Edt   Shel    DeЬug     Opt!ons   Windolv   не1р

    help>   "ymЬ o l"


    Here i~ а li~t of the punctuaticn ~ymhol~ which Pyth on                  a~~ign~    ~pecial   meaning
    to . Enter any "ymЬol to get more help.

    !=                            +                           <=
                                  +=                          <>
                                                                                   Ь"
                                                              >                   Ь'
    ~=                                                        >=                   f"
                                                              >>                   f'
    &=                                                        >>=
                                  1                           @                    r"
                                  11                          J                    r'
                                  11 =                         [                   u"
                                  !=                          \                    u'
                                                               ]                   1
                                  <                                                1=
    *"=                           <<                          Л:


    ·=                            <<=

    help>
                                                                                                     Ln:ЗЗ   Col: 62

                   Рис.    3.4.   Специальные символы, поддерживаемые в Pythoп


     Чтобы просмотреть список доступных разделов, по которым можно полу­
чить справку, введите                    topics.       Если вас заинтересует определенный раздел,



64          ЧАСТЬ 1 Знакомство со средой Python
например FUNCTIONS, просто введите его название и нажмите клавишу                                                    <Enter>.
На экране появится справочная информация, подобная показанной                                                     на рис. 3.5.

  ~ *Руtlюп :i./.O S11е.П*                      .      ,:_ ~;{ · '
  Fle   Edlt   Shef   DeЬug     Opt:Ьns             WlndOlv    Help

  help> FUNCTIONS
  f'unction~



  Functian object~ are created Ьу function definition~ .   The only
  operation on а function object iз t.o call it: "func (argument-li~t}"                                     .


  There are really two               flavorз           of function objects: built-in               function~
  and   uзer-defined         functionз.                Бoth    зupport       the   за.те   operation (to call
  the   fun~tion),      but the implementation                        iз    different , hence the
  diffe ren t object         tурез.


  See Function definitionз for rnore information.

  Related help        topicз:        def , TYPES

  help>
                                                                                                                  Ln: 61 Col:   б


                          Рис.       3.5.   Получение справки по выбранной теме


   По мере выполнения примеров книги вы будете использовать различные
команды и, возможно, захотите узнать о них больше. Например, в разделе
"Просмотр результатов" вы познакомились с командой  print (). Чтобы про­
смотреть дополнительные сведения о ней, введите print. (Учтите, что на сей
раз круглые скобки не нужны, поскольку мы не выполняем команду print (),
а запрашиваем справку по ней.) На рис.                                             3.6     показана типичная справочная
информация по команде                       print ().


  Ае    Edlt   Shef   DeЬug     Opt:Ьns             W11d01V    Help

  help> print
  Help on built-in function print in madule                                  builtin~:


  print ( ... }
        print(value,                  зер= '          ', end=' \n ',        file=зyз. зtdout,     flu~h=F'alзe)


        Printз    the   valueз        to    а        зtream,     o r to     зyз.зtdout Ьу      default .
        Optional      ~eyword argumentз:
        file:     а file-like object (зt ream ); defaultз to the current syз.зtciout.
        зер:      зtring  inзerted between val 1.ieз, default а зрасе.
        end:      зtring appended after the laзt value, default а newline.
        flu~h:    whether to          forciЫy             fluзh       the   ~tream .


  help>
                                                                                                                  Ln: 74 Col:   б


                      Рис.    3.6.   Получение справочной информации о команде




                                                                       ГЛАВА 3             Взаимодействие с Python              65
                   Конечно, пока вы практически ничего не знаете о                    Python,   вряд ли
                   вам поможет чтение справочной информации. Но в некоторых ситу­
                   ациях можно получить дополнительные сведения . Предположим, вы
     СОВЕТ
                   хотите понять, что такое    s ys. stdout.    Просто введите          sys . stdout,
                   и на экране появится справочная информация (рис.                   3.7).


     Help on TextIOWrapper in sys object :
     sys .stdout = class TextIOWrappor(_TextIOBaso)
      1 sys.stdout(buffor , oncoding=None , errors=Nono , newline=None , line_bufforing= j
     False , writo_through=Falso)
             Charactor and lino based layer over   а   BufferedIOBase object , buffer .
             encoding givos the namo of tho oncoding that tho stream will Ьо
             docodod or oncodod with . It dofaults to localo . 9etproferredencodin9(Falso) .
             orrors detorminos tho strictness of encoding and docoding (see
             holp(codocs .Codec) or tho docu•ontation for codocs .registor) and
             defaults to "strict" .
             newline controls how line endings are handled . It can     Ье   Nono ,
             ' \n ', ' \r' , and '\r\n'. It works as follows:
           On input , if newline is None, universal newlines mode is
             к
           onaЬlod. Lines in tho input can end in '\n' , ' \r ', or '\r\n' , and
           theso are translated into '\n' bofore being roturnod to tho
           caller . If it is · · , universal newline моdе is enaЬled , but line
           endings aro returned to tho caller untranslatod. If it has any of
           the othor legal values, input linos are only torminatod Ьу tho givon
        Даnоо --                                                                                   .:_!

 Рис. 3.7. Можно запросить дополнительную справку по уже полученной справке


      Не факт, что вы получили то , что искали . Но обратите внимание на то, что
это еще не все сведения . В данном случае справка занимает много места и не
помещается на экране, поэтому в нижней части экрана отображается следую­
щая запись:


--    Далее        --

      Для просмотра следующей страницы справки нажмите клавишу пробела,
а если и это еще не конец, то снова нажмите клавишу пробела для перехода к
очередной странице . При необходимости всегда можно вернуться к предыду­
щей странице справки.


Выход из режима справки
      Наступает момент, когда нужно выйти из режима справки. Для этого до­
статочно нажать            <Enter>,   не вводя дополнительной информации . Появится



66               ЧАСТЬ 1 Знакомство со средой Python
сообщение о выходе из режима справки, а приглашение превратится в стан­
дартную командную строку         Python,   как показано на рис.      3.8.


 help>
 You are now leaving help and returning to the Python interpreter .
 If you want to ask for help on а particular object directly fro• the
 interpreter , you can type "help(object)" . Executing "help("string')"
 has the saae effect as typing а particular string at the help> prompt .
  »>
  Рис. 3.8. Для выхода из режима справки достаточно нажать клавишу <Eпter>



Непосредственное получение справки
   Переход в режим справки не слишком-то и нужен, если вы не планируете
просматривать несколько разделов справки или же хорошо знаете, что именно

хотите найти. В     Python   есть удобная возможность непосредственного получе­
ния справки по конкретной команде. Вместо того чтобы переходить в режим
справки, достаточно ввести слово         help,   а затем в круглых скобках указать ко­
манду, для которой нужно получить справку. Например, чтобы узнать больше
о команде   print   (),введите   help (print).       На рис.   3.9   показан типичный ре­
зультат при использовании этого вида справки.




  >» help(print)
   elp on built-in function print in module builtins :
  print( ... )
      print(value, . .. , sep= · ·, end= '\n ', file=sys.stdout , flush=False)
       Prints the values to а streaa , or to sys .stdout Ьу default .
       Optional keyword arguaents :
       file : а file-like object (streaв) ; defaults to the current sys .stdout .
       sep :   string inserted between values , default а space .
       end :   string appended after the last value , default а newline.
       flush : whether to forciЫy flush the stream.

  »>

Рис. 3.9. Можно получить справку, не выходя из режима командной строки Pythoп


   Можно также просматривать разделы справки в режиме командной строки
Python.   Если ввести   help ( 'topics'),        то на экране появится список тем, как
показано на рис .   3.1 О.




                                           ГЛАВА З    Взаимодействие с Python         67
 >>> help('topics')
 Неге       is   е   list of   eueileЫe   topics.   Enter eny topic ne•e to get •ore help .       _J
 ASSERTION                      DELETION               LOOPING             SHIFТING
 ASSIGNHENT                     DICTIONARIES           HAPPINGHEТHODS      SLICINGS
  TTRIBUTEHETHODS               DICTIONARYLITERALS     HAPPINGS            SPECIALATTRIBUTES
 ATTRIBUTES                     DYNAHICFEATURES        HETHODS             SPECIALIDENTIFIERS
 AUGHENTEDASSIGNHENT            ELLIPSIS               HODULES             SPECIALHETHODS
 BASICHETHODS                   EXCEPTIONS             NAHESPACES          STRINGHETHODS
 BINARY                         EXECUTION              NONE                STRINGS
 BITWISE                        EXPRESSIONS            NUHBERHETHOOS       SUBSCRIPTS
 BOOLEAN                        FLOAT                  NUHBERS             TRACEBACKS
 CALLABLEHETHODS                FORHATTING             OBJECTS             TRUTHUALUE
 CALLS                          FRAHEOBJECTS           OPERATORS           TUPLELIТERALS
 CLASSES                        FRAHES                 PACKAGES            TUPLES
 CODEOBJECTS                    FUNCTIONS              POWER               TYPEOBJECTS
 COHPARISON                     IDENTIFIERS            PRECEDENCE          TYPES
 COHPLEX                        IHPORTING              PRIUATENAHES        UNARY
 CONDITIONAL                    INTEGER                RETURNING           UNICODE
 CONTEXTHANAGERS                LISTLITERALS           SCOPING
 CONUERSIONS                    LISTS                  SEQUENCEHEТHODS
 DEBUGGING                      LITERALS               SEQUENCES
 »>
     Рис.   3. 10.    При желании можно просматривать разделы справки в командной
                                         строке Pythoп



                     У многих читателей наверняка возник вопрос: зачем нужен режим
                     справки, если те же самые результаты можно получить из командной
                     строки    Python?    В действительности режим справки просто удобен.
 СОВЕТ
                     В нем легче просматривать информацию. Кроме того, в нем при­
                     ходится вводить меньше команд. К тому же в нем можно получать
                     дополнительные сведения, как было показано на рис.               3.3.   Таким об­
                     разом, у вас есть все основания для перехода в режим справки, если

                     вы планируете задать       Python   много вопросов.


                     Независимо от того, как вы обращаетесь за помощью, нужно при­
                     держиваться корректного регистра символов в названиях разделов

                     справки. Например, чтобы получить общую информацию о функци­
ЗАПОМНИ!
                     ях, нужно ввести  help ( ' FUNCTIONS ' ) , а не help ( ' Functions ' )
                     или   help ( 'functions' ) . Если регистр символов задан неправиль­
                     но,   Python   сообщит о том, что не знает, чего вы от него хотите, или
                     не может найти раздел справки. Когда-нибудь компьютеры научатся
                     читать мысли, но пока что до этого далеко.




68          ЧАСТЬ 1 Знакомство со средой Python
Выход из режима командной строки
  Рано или поздно вы захотите покинуть гостеприимную среду                    Python, тем
более что есть и другие дела, кроме как целый день возиться с                 Python. Для
выхода из среды       Python   можно воспользоваться двумя стандартными метода­
ми и целой кучей нестандартных способов. Стандартные методы гарантируют
корректное завершение работы             Python.   Но и нестандартные способы тоже хо­
роши, особенно если вы просто экспериментировали с                 Python,   не занимаясь
написанием готового кода. Вот два стандартных метода:

             ))   quit ();
             ))   exit ().

  Любая из указанных функций осуществляет выход из интерактивной среды
Python   (ее еще называют оболочкой).
  Обе функции поддерживают необязательный аргумент. Например, можно
ввести   qui t ( 5)   или   exi t ( 5)   и нажать клавишу    <Enter>   для выхода из обо­
лочки. Обычно, если приложение завершилось без сбоев, выполняют команду
qui t () и exi t () без аргумента. Числовой аргумент устанавливает переменную
среды ERRORLEVEL, которую можно перехватить в командной строке или в сце­
нарии. Чтобы увидеть, как это работает, выполните следующие действия.

 1.   Откройте командную строку иnи окно терминала.

      На экране появится приглашение командной строки.

 2.   Введите     Python, чтобы запустить Python.
      На экране появится приглашение Pythoп.

 3.   Введите     quit(S).
      Снова появится стандартное приглашение командной строки.

 4.   Введите echo %ERRORLEVEL%.
      Отобразится код ошибки, как показано на рис. 3.11. Если вы работаете не в
      Windows, нужно будет ввести какую-то другую команду. Например, при работе
      с Ьаsh-сценарием нужно ввести echo            $.

  Один из наиболее распространенных нестандартных способов выхода за­
ключается в щелчке на кнопке Close (Закрыть) окна командной строки или тер­
минала. В данном случае у приложения может не быть времени на выполнение
необходимой очистки, что может привести к странному поведению. Всегда
лучше закрыть      Python,     используя стандартный метод, если вы делали что-то
большее, чем обычный просмотр справки.




                                            ГЛАВА 3      Взаимодействие с Python      69
   icгosoft Windows [Ueгsion 6.1 .1601)
  (с) Корпорация Найкросо+т ( Hicгosoft Согр.)                  , 2009 .   Все права эащищень1 .

  C:\Useгs\Alex>python
   ython 3. 1. 0 (v3 . 7.8: 1bf9cc5093 , Jun 21 2018 , 0Ч : 59 : 51) [HSC v.191Ч 6Ч bit (AHD6
  Ч)] on win32
   уре "'help"" , "copyгight"", ·· cгedits" ог " license" fог •оге infoг•ation .
  »> quit(S)
      : \Useгs\Alex > echo         1.ERRORLEUEL1.
  5

  C : \Useгs\Alex >




        Рис.   3. 11.     Укажите код ошибки, чтобы уведомить других пользователей
                                    о статусе завершения Python



                 При необходимости можно также восnользоваться рядом других ко­
                 манд для закрытия командной строки. В большинстве случаев эти
                 сnециальные команды не нужны, nоэтому можно nроnустить остав­
ТЕХНИЧЕСКИЕ
ПОДРО6НОСТИ      шуюся часть раздела.


      При исnользовании команды                     quit ()   или   exit () Python      выполняет ряд дей­
ствий, гарантирующих корректное завершение сеанса. Если есть подозрение,
что сеанс все-таки завершается некорректно, вы всегда можете положиться на

одну из двух команд, осуществляющих закрытие командной строки:

                     ))       sys. exi t ();
                     ))       os . _ exi t ( ) .

      Обе они используются только в аварийных ситуациях. Первая команда,                              sys.
exit    (),поддерживает специальные средства обработки ошибок, которые будут
рассмотрены в главе                    9.   Вторая команда,      os. _ exi t ( ) ,   обеспечивает выход из
среды     Python          без выполнения каких-либо стандартных операций по очистке.
В обоих случаях следует предварительно импортировать специальный модуль,
sys    или     os.   Таким образом, команда                sys. exi t ()   фактически вызывается так.

import sys
sys.exit()

      В случае команды                  os. _ exi t ()   следует указать код ошибки, поскольку эта
команда используется только при возникновении серьезной ошибки. Если код




70         ЧАСТЬ          1     Знакомство со средой          Python
ошибки не указан, вызов команды завершится неудачей. Схема вызова коман­
ды   os. _ exi t ()   такова (код ошибки в данном случае равен   5).
import os
os. exit(5)

     В главе   1О   мы подробно рассмотрим импорт модулей. А пока вам достаточ­
но знать, что эти две команды предназначены для специального применения и

в приложениях обычно не используются.




                                         ГЛАВА 3   Взаимодействие с    Python   71
Глава         4

Создание первого
приложения


 В ЭТОЙ ГЛАВЕ ...

 >> Использование Jupyter Notebook в качестве
       интегрированной среды разработки

 >>    Создание и выполнение первого приложения

 >> Форматирование кода приложения

 >> Комментарии в коде

 >> Управление приложениями с помощью Anaconda




м
           нагие люди считают разработку приложений своего рода магическим
           ритуалом, доступным лишь избранным, тем, кто умеет с помощью
           клавиатуры создавать различные программы. Хотя на самом деле все
гораздо проще.

      Как однажды отметил Артур Кларк, "любая достаточно продвинутая тех­
нология неотличима от магии". Разработка приложений        -   довольно строгая
дисциплина и, безусловно, далекая от магии. В этой главе завеса тайны будет
убрана, и читатель познакомится с технологией разработки приложений. По­
сле прочтения главы вы сможете написать простую программу. (Безо всякой
магии, уж поверьте!)
  Для написания приложений нужен соответствующий инструментарий.
В случае с   Python   вам не обязательно использовать сложные инструменты, но
они настолько упрощают решение задач, что лучше все же воспользоваться

ими. В этой главе применяется общедоступная интегрированная среда раз­
работки    (lntegrated Development Environment -   IDE)   под названием   Jupyter
Notebook,    которая входит в пакет      Anaconda.     Благодаря   IDE   значительно упро­
щается процесс написания, тестирования и отладки кода. В предыдущей главе
мы использовали утилиту командной строки, что позволило немного поэкс­
периментировать с          Python.   Однако возможности      Anaconda    намного шире по
сравнению с командной строкой и позволяют существенно упростить создание
приложений.

             Для создания приложений          Python   можно использовать огромное ко­
             личество других инструментов. В книге они не рассматриваются,
             поскольку пакет       Anaconda   свободно доступен и подходит для реше­
  совет
             ния всего спектра требуемых задач. Можете самостоятельно ознако­
             миться с возможностями других инструментов, например    Komodo
             Edit (http://www. acti vestate. com/komodo-edi t/downloads). Об­
             ширный перечень подобных инструментов можно найти по следу­
             ющему адресу:


             https://wiki.python.org/moin/IntegratedDevelopmentEnvironments



Преимущества                      IDE
     У многих читателей возникнет вполне закономерный вопрос: зачем при ра­
боте с    Python   нужна   IDE,   если утилиты командной строки вполне достаточно?
К тому же в комплект поставки           Python   входит   IDLE (lntegrated DeveLopement
Environment),       более продвинутая среда, чем командная строка. Казалось бы,
для целей обучения и даже разработки приложений ничего другого и не нуж­
но. Конечно, инструменты, поставляемые с               Python,   интересны и полезны на
ознакомительном этапе, но с их помощью довольно сложно создавать полно­

функциональные приложения. Если вы собираетесь работать с                   Python   серьез­
но, то в силу многих причин вам понадобится действительно универсальный
инструмент.



Создание оптимального кода
     Хорошая       IDE   предлагает определенный уровень интеллектуальной под­
держки. Например,          IDE    предложит альтернативы при вводе неправильного
ключевого слова или подскажет, если введенная строка кода не будет работать.
Чем обширнее такого рода поддержка со стороны                 IDE,   тем проще создавать
хороший код. А это важно, поскольку плохой код чреват появлением ошибок,
называемых багани, на поиск и устранение которых уходит много времени.




74        ЧАСТЬ    1 Знакомство со средой Python
           Различные     IDE   сильно отличаются по уровню интеллектуальной
           поддержки и разнообразию предоставляемой информации. Может,
           поэтому их так много. И если вас в какой-то момент времени пере­
  CO!lff
           стала устраивать имеющаяся           IDE,   не стоит отчаиваться, поскольку
           всегда можно выбрать другую. У каждого разработчика свои по­
           требности и, следовательно, разные требования к            IDE.   Вся проблема
           заключается в выборе     IDE,      которая поможет быстро и легко писать
           понятный и эффективный код.



Контроль ошибок
   Поиск ошибок в коде называется отладкой. Даже самый опытный разра­
ботчик массу времени тратит на отладку. Создать совершенный код с первой
попытки практически невозможно. Если вам это удастся, можете себя поздра­
вить с редкой удачей. Следовательно, возможности             IDE   по отладке имеют кри­
тически важное значение. К сожалению, входяш.ие в комплект поставки                  Python
инструменты имеют весьма скромные возможности в плане отладки. Вам при­
дется тратить массу времени и сил на отладку, поэтому лучше заранее выбрать
другой инструментарий.

           Наиболее универсальные         IDE   могут выступать в качестве обучаю­
           щих инструментов. Обладая достаточным потенциалом,                  IDE   помо­
           жет вам изучить код, написанный настоящими профессионалами.
  СОВЕТ
           Трассировка приложений         -   проверенный временем способ получе-
           ния новых навыков и совершенствования имеющихся. Как извест­
           но, даже небольшое увеличение багажа знаний может обернуться
           в будущем серьезной экономией ресурсов. Если вы выбираете                   IDE,
           не только уделяйте внимание функциям отладки как средству для
           контроля ошибок, но и обращайте внимание на возможности, пре­
           доставляемые в      IDE для   изучения      Python.


Преимущества блокнота
   Большинство   IDE    выглядят как текстовые редакторы, и это не удивительно.
Они предоставляют вам различные интеллектуальные возможности, подсказ­
ки, советы, цветовые коды и прочее, но, в конце концов, это всего лишь тексто­

вые редакторы, от которых трудно ожидать многого. Учитывая тот факт, что
пользователи   Python   часто сосредоточены на разработке научных приложений
и нуждаются в соответствующей поддержке, которая отличается от правки тек­
ста, лучше перейти на использование блокнотов.



                                  ГЛАВА   4    Создание первого приложения              75
              Блокнот отличается от текстового редактора тем, что основан на ме­
              тодологии грамотного программирования, разработанной компью­
              терным ученым из Стэнфордского университета Дональдом Кнутом.
 ЗАПОМНИ!
              Грамотное программирование применяется для создания смешан­
               ного представления кода, заметок, математических уравнений и гра­
              фиков. Короче говоря, вы получаете в свое распоряжение блокнот
               исследователя, заполненный массой информации, которая требуется
              для всестороннего понимания кода. Методы грамотного програм­
              мирования часто применяются в дорогостоящих пакетах, таких как

               Mathematica и MATLAB.       Разработка в среде блокнота обеспечивает
              следующие возможности:


                ))   удобное представление примеров;

                ))   совместная разработка проектов;

                ))   научные расчеты;

                ))   обучение программированию;

                ))   наглядные презентации.



     В книге используется пакет         Anaconda,   который не только предлагает пре­
красные возможности по разработке приложений               Python,   но и позволяет при­
менять принципы грамотного программирования. Если вы решаете в основном
научные задачи, то без пакетов типа          Anaconda    вам не обойтись. Кроме того,
Anaconda доступен        бесплатно.



Получаем собственную копию Anaconda
     Как уже упоминалось,       Anaconda    не входит в состав  Python. Конечно, при
желании вы сможете выполнять примеры книги в                 IDLE, но желательно пе­
рейти на      Anaconda.   В следующих разделах будет показано, как установить
Anaconda      на трех основных платформах.


Где можно скачать            Anaconda
     Базовый пакет Anaconda можно бесплатно загрузить по следующему адресу:

https://www.anaconda.com/download/

     На сайте можно выбрать одну из трех платформ и загрузить бесплатно рас­
пространяемый пакет.        Anaconda    поддерживает следующие платформы:




76          ЧАСТЬ 1 Знакомство со средой       Python
              >> Windows - 32- и 64-разрядная версии            (программа установки пред­
                   ложит загрузить       32- или   64-разрядную версию пакета в зависимости
                   от версии   Windows);
              >> Linux- 32- и 64-разрядная версии;
              >> Мае 05 Х - 64-разрядная версия.

             В книге используется версия              Anaconda 5.3.0, которая поддержива­
             ет   Python 3.7.0.   Если у вас другая версия       Anaconda, может оказать­
             ся, что некоторые примеры будут работать некорректно, причем то,
ВНИМАНИЕ!
             что отображается у вас на экране, может не соответствовать содер­
             жанию рисунков в книге, даже если вы работаете в                  Windows.   Ко­
             пии экранов, приведенные в книге, получены в 64-разрядной среде
             Windows,    и они должны быть близки к тому, что отображается на
             экране при использовании              Anaconda 5.3.0   на других платформах.

             Можно загрузить версию            Anaconda, предназначенную для работы
             с ранними версиями           Python. Для этого щелкните на ссылке, соот­
             ветствующей архиву программы установки, которая отображается
     СОВЕf
             в нижней части страницы сайта              Anaconda.    К ранней версии   Python
             следует прибегать лишь в том случае, если в этом есть необходи­
             мость.


     Программа установки          Miniconda        позволяет сэкономить время инсталля­
ции, ограничив количество устанавливаемых функций. Но лучше выполнить
полную установку, чтобы иметь под рукой все необходимое для выполнения
проектов. Полная установка не займет много времени и не отнимет много ре­
сурсов.

     Бесплатной версии   Anaconda вполне достаточно для освоения примеров
книги. На    сайте Anaconda доступен также ряд других продуктов, которые по­
зволят создавать надежные приложения. Эти продукты не рассматриваются в
книге, но на сайте      Anaconda     можно найти подробную информацию об их ис­
пользовании.



Установка         Anaconda      в   Linux
     Для установки     Anaconda     на   Linux     придется использовать режим командной
строки, поскольку возможность графической установки не предоставляется.
Прежде чем выполнить установку, нужно загрузить копию дистрибутива с сай­
та   Anaconda.    Необходимую информацию о загрузке можно найти в предыду­
щем разделе. Следующая процедура должна работать в любой Linux-cиcтeмe
независимо от того, какую версию              Anaconda     вы используете:   32-   или 64-раз­
рядную.




                                     ГЛАВА       4   Создание первого приложения            71
 1.    Откройте приложение Termiпal.
       Отобразится окно терминала.

 2.    Перейдите в каталог, куда была загружена Апасопdа.

       Имя загружаемого файла может быть разным, но обычно это       Anaconda3-
       5. 3. 0-Linux-x86. sh для 32-разрядных систем и Anaconda3-5.3.0-
       Linux-x8 6_ 64. sh - для 64-разрядных. Номер версии закодирован в имени
       файла. В данном случае имя файла указывает на версию 5.3.0, используемую в
       книге. Если применяется другая версия, могут возникнуть проблемы с исход­
       ным кодом примеров, и в них придется вносить коррективы.

 3.    ВведитеЬаsh AnacondaЗ-5. З. 0-Linux-xBб.        sh (для 32-разрядной вер­
       сии) или   bash   AnacondaЗ-5. З.   0-Linux-x86_64. sh (для 64-разрядной
       версии).

       Запустится мастер установки с просьбой принять условия лицензионного со­
       глашения для использования Апасопdа.

 4.    Ознакомьтесь с условиями лицензионного договора и примите их.

       Мастер попросит предоставить место для установки Апасопdа. В книге пред­
       полагается, что по умолчанию используется местоположение      - / anaconda.
       Если выбирается другое место, может возникнуть необходимость внести ряд
       изменений в некоторые примеры.

 5.    Укажите каталог установки (если это необходимо) и нажмите клавишу
       <Enter> или   щелкните на кнопке    Next (Далее).
       Начнется процесс установки приложения. После его завершения появится со­
       ответствующее сообщение.

 6.    Добавьте путь установки в переменную среды РАТИ.
       Теперь можно использовать Апасопdа.



Установка     Anaconda в Мае OS
     Для платформы Мае     OS   Х существует только 64-разрядная версия Anaconda.
Прежде чем приступить к установке, следует скачать копию файла установки
для Мае с сайта Anaconda. Необходимая информация о загрузке была приве­
дена выше.

     Файлы установки представлены в двух форматах. Во-первых, имеется гра­
фический инсталлятор, а во-вторых       - утилита командной строки. Последняя
работает так же, как и версия для     Linux, которая была описана в главе 2. Ниже
приведена пошаговая инструкция, которая поможет установить 64-разрядную
версию Anaconda в Мае в графическом режиме.




78      ЧАСТЬ 1    Знакомство со средой Python
        1.   Найдите в системе загруженную копию файла установки          Anaconda.
             Имя этого файла может быть разным, но обычно это AnacondaЗ-5.       3. 0-
             MacOSX-x8 6_ 64. pkg.   Номер версии закодирован в имени файла. В дан­
             ном случае имя файла указывает на версию     5.3.0, используемую в книге.
             Если применяется другая версия, могут возникнуть проблемы с исход­
             ным кодом примеров, и в них придется вносить коррективы.

       2.    Дважды щелкните на файле установки.
             Появится начальное диалоговое окно.

       3.    Щелкните на кнопке      Continue (Продолжить).
             Мастер установки спросит, желаете ли вы просмотреть файл        Read Ме.
             Можно ознакомиться с ним позже.

       4.    Щелкните на кнопке      Continue.
             Мастер отобразит текст лицензионного соглашения. Обязательно озна­
             комьтесь с лицензионным договором, содержащим условия использова­

             ния программы.


       5.    Щелкните на кнопке      1Agree (Я согласен), если вы согласны с услови­
             ями лицензионного соглашения.

             Мастер попросит указать место для установки. Выбор местоположения
             зависит от того, для кого выполняется установка: для отдельного пользо­

             вателя или для группы пользователей.

             На данном этапе может появиться сообщение об ошибке, в котором бу­
             дет сказано, что установка   Anaconda в вашей системе невозможна. Это
             следствие ошибки в инсталляторе и не имеет отношения к вашей систе-
внимдниЕ1    ме. Для того чтобы сообщение исчезло, установите флажок lпstall
                                                                          Only fог
             Ме (Установить только для меня). Пакет   Anaconda невозможно устано­
             вить в Мае для группы пользователей.

       6.    Щелкните на кнопке      Continue.
             Программа установки отобразит диалоговое окно, содержащее вари­
             анты по изменению типа установки. Щелкните на кнопке    Change lnstall
             Location (Изменить местоположение установки), если необходимо из­
             менить каталог Anaconda в системе. (В книге предполагается использо­
             вание заданного по умолчанию пути -/ anaconda.) Щелкните на кнопке
             Customize (Настроить), если необходимо внести изменения в работу про­
             граммы установки. Например, можно установить флажок, который позво­
             лит не добавлять Anaconda в переменную среды РАТН. Но в книге пред­
             полагается выбор параметров установки по умолчанию, и если только в
             системе не установлена другая копия    Python 3.7.0, то нет веских причин
             для изменения этих параметров.


       7.    Щелкните на кнопке lnstall (Установить).




                                 ГЛАВА    4   Создание первого приложения          79
       Начнется процесс установки. По завершении появится соответствующее диа­
       логовое окно.

 8.    Щелкните на кнопке Continue.
       Все готово к использованию   Anaconda.


Установка      Anaconda    в   Windows
     В комплект поставки    Anaconda     входит графический инсталлятор для
Windows,     поэтому установку можно выполнить с помощью мастера. Конечно,
предварительно нужно загрузить копию установочного файла; о том, как это
сделать, говорилось выше. Следующая процедура должна работать в любой
Windows-cиcтeмe независимо от того, какую версию      Anaconda    вы используете:
32-   или 64-разрядную.

 1.    Найдите в системе загруженную копию Anaconda.
       Имя загружаемого файла может быть разным, но обычно это AnacondaЗ-
       5. 3. 0-Windows-xB 6. ехе   для 32-разрядных систем и AnacondaЗ-5.     3. 0-
       Windows-xB 6 64. ехе -       для 64-разрядных. Номер версии закодирован
       в имени файла. В данном случае имя файла указывает на версию   5.3.0, исполь­
       зуемую в книге. Если применяется другая версия, могут возникнуть проблемы
       с исходным кодом примеров, и в них придется вносить коррективы.

 2.    Дважды щелкните на файле установки.
       Может появиться предупреждение подсистемы безопасности с вопросом
       о том, хотите ли вы запустить этот файл. Щелкните на кнопке     Run (Выпол­
       нить). На экране появится диалоговое окно AnacondaЗ   5.3.0 Setup (Установка
       AnacondaЗ 5.3.0), подобное показанному на рис. 4.1. Точный вид диалогового
       окна зависит от загружаемой версии программы установки     Anaconda. Если у
       вас 64-разрядная операционная система, то используйте 64-разрядную вер­
       сию   Anaconda, что позволит добиться максимальной производительности.
       В нашем случае мы имеем дело с 64-разрядной версией продукта.

 3.    Щелкните на кнопке   Next (Далее).
       Мастер отобразит лицензионное соглашение. Обязательно прочтите его для
       ознакомления с условиями использования пакета.

 4.    Щелкните на кнопке 1Agree (Я согласен), чтобы принять лицензионное
       соглашение.

       Появится запрос о типе выполняемой установки (рис.   4.2). В большинстве слу­
       чаев программа устанавливается для личных целей. Исключение имеет место
       в случае, когда в системе работают несколько пользователей и всем им необ­
       ходим доступ к Anacoпda.




80       ЧАСТЬ 1   Знакомство со средой Python
                                      We\come to АпасоndаЗ 5.3.0
                                      (64-Ьit) Setup

                                      Setup wlll gulde you through the lnstallatlon of AnacondaЗ
                                      5.3 . О {б4·Ыt) .


                                      It ls recommended that you close all other applications
                                      before startlng Setup . Thls will make lt posslЫe to update
                                      relevмt system flles without havlng to reboot your
                                      computer.

                                      Cllck Next to continue .




                                                                     :......~~~..~.,-.. ,·11
                                                                    1г·-····-·                 Cancel



 Рис.    4. 1. Первое окно программы установки 64-разрядной
                    версии Anaconda для Windows


   Anacondaз s.з.о (64 - Ьit) -setup

                               Select lnstallalion         Туре

 о        ANACONDA                 Please select the type of lnstallation you would llke to perform
                                   for AnacondaЗ 5 . 3.О ( 64-Ыt).




   lnstell for:


   (е" Just Ме (recommended)


   (' All Users (requlres admln privlleges)




.:<nacondiЭ,   rnc - - - - , - -

                                                           < Back          Next >              Cllncel



Рис.     4.2.     Сообщите программе установки, каким образом
                  следует установить Anaconda в системе




                                   ГЛАВА 4                Создание первого приложения                    81
 5.   Выберите нужный тип установки и щелкните на кнопке Next (Далее).
      Мастер попросит указать каталог для установки                                         Anaconda (рис. 4.3). В книге
      предполагается, что используется местоположение, выбранное                                            no умолча­
      нию. Если выбирается другое место, может возникнуть необходимость внести
      ряд изменений в некоторые примеры.


              AnacondaЗ 5.З.О (64 · Ьit)         Sct\1p

                                             Choose lnstall Location
              · ) ANACONDI                     Choose the folder ln v1hich to lnstall   Anacond a З 5 . 3 . О ( 64·Ыt).




              Set\Jp wlll install AnacondaЗ 5. 3 . О (64·Ыt) ln the follo\.'/lng folder. То lnstall ln а dlfferent
              folder, clicl: Browse and select another folder. Cl1ck Next to contlnue .




                Destlnatlon Folder

                 1F:\дnacondaЗ\                                                                   Brov1se."



               Space requlred : 2.9GB
               Space avallaЫe: 163.4GB



                                                                       < Back           Next >                Cancel



                      Рис.    4.3.   Укажите местоположение установки


 6.   Укажите каталог установки (если это необходимо) и щелкните на кнопке
      Next.
      Появится окно Advanced                  lnstallation Options (Дополнительные параметры уста­
      новки), показанное на рис. 4.4. Это параметры по умолчанию, и в большинстве
      случаев менять их не следует. В книге предполагается, что                                                Anaconda устанав­
      ливается с параметрами по умолчанию.

 7.   Измените параметры установки (если это необходимо), а затем щелкни­
      те на кнопке       lnstall (Установить).
      Появится диалоговое окно с индикатором прогресса. Процесс установки зай­
      мет несколько минут. По завершении становится активной кнопка                                                       Next.
 8.   Щелкните на кнопке Next (Далее).

      Мастер сообщит о том, что установка завершена.

 9.   Щелкните на кнопке Finish (Готово).

      Все готово к использованию                     Anaconda.



82     ЧАСТЬ 1       Знакомство со средой Python
               AnacondaЗ 5.3.О        (64-blt) Setщ>

                                            Adv anced lnstallation Options
             ·:)      ANACOt DA                 Customlze ho;; An aconda integrates v1ith W1ndov1s




               r   Advanced Optlons

                      Г Add Anaconda to
                                       -    -     -      - - -----

                                            my РАТН envlronment vcirlaЫe
                       Not recommended. Jnstead, open Aмconda vlith the Windows Start
                       menu and select "Anaconda (64-blt)'. Thts 'add to РАТН' option makes
                       Anaconda get found before previously installed sofuчare, but may
                       cause proЫems requirlng you to unlnstalJ and reinstall Anaconda.

                      Р' ReglSter Al!aconda as my default Python 3.7
                       Thls v1Jll allow other programs, such as Python Tools for Visual Studlo
                       PyCharm, Wlng IDE, F"{Dev, and MSI blnary pacl;ages, to automatically

               l _:~~-=~=nda-a=rlm:V_~hon з~~п th~~st~m~                            ·- _      --~---


                                                                    < Back          Jnstall          cancel



             Рис. 4.4. Выбор дополнительных параметров установки




Загрузка наборов данных
и файлов примеров
  Книга посвящена использованию                             Python       для решения основных задач про­
граммирования. Конечно, можно написать код с нуля, выполнить его отладку
и затем попытаться понять, как все это работает, но проще скачать готовый
код с сайта книги, о чем говорилось во введении, и сразу приступить к работе.
В следующих разделах демонстрируется работа с                                     Jupyter Notebook- интегри­
рованной средой разработки                      Anaconda.         Будут показаны различные возможно­
сти работы с кодом приложения, включая импорт загружаемого исходного кода
и экспорт разработанных вами приложений.


Работа с Jupyter              Notebook
  Для облегчения работы с примерами в книге используется среда                                                Jupyter
Notebook.   Данная среда позволяет легко создавать файлы блокнотов                                            Python,
содержащие произвольное число примеров, причем каждый из них может вы­
полняться индивидуально. Программа выполняется в браузере, поэтому не
имеет значения, какая именно платформа используется для разработки: если
в системе имеется браузер, все будет в порядке.



                                                ГЛАВА 4          Создание первого приложения                      83
Запуск Jupyter Notebook
     Большинство систем снабжено значком, который обеспечивает доступ к
Jupyter Notebook.       Например, в
                             Windows выберите команду ПускqВсе nporpaм­
мыqAпacondaЗqJupyter Notebook. На рис. 4.5 показано, как выглядит Jupyter
Notebook при просмотре в браузере Firefox. Конкретный вид окна зависит от
используемого вами браузера и операционной системы.




              Jupyter




                                                               ...
                                                               , -...-
                                                                   ·--
                                                               16.,._
                                                                ,_,,,_
                                                                111..- . . .




                                                               ,__
                                                              ·---
                                                              ·---
                                                               '-""-
                                                                ..........
                                                               ,_
                                                                   ,...........

             Рис.   4.5. Jиpyter Notebook упрощает работу с примерами


Завершение работы сервера Jupyter Notebook
     Независимо от того, как вы запустили       Jupyter Notebook     (в дальнейшем мы
будем писать просто       Notebook), для   его поддержки система обычно открывает
окно командной строки или терминала. В данном окне выполняется сервер,
управляющий работой приложения. После закрытия окна браузера при завер­
шении сеанса выберите окно сервера и нажмите           <Ctrl+C>       или         <Ctrl+Break>,
чтобы остановить сервер.


Создание репозитория кода
     Код примеров книги располагается в репозитории, находящемся на жест­
ком диске. Можно рассматривать репозиторий как своего рода шкаф, в кото­
рый заносится код.       Notebook открывает   ящик, достает папку и показывает код
пользователю. Можно изменять код, запускать отдельные примеры в папке,
добавлять новые примеры и просто взаимодействовать с кодом. В следующих




84      ЧАСТЬ 1 Знакомство со средой Python
разделах мы начнем работать с                         Notebook, чтобы          познакомиться с концепцией
репозитория .


Создание папки для примеров книги
      Желательно организовать файлы примеров таким образом , чтобы облегчить
к ним доступ в дальнейшем. Все примеры книги будут находиться в папке BPPD
(сокращение от "Beginning                        Programming with Python For Dummies"). Для созда­
ния новой папки выполните следующие действия в                          Notebook.
 1.     Выпоnните команду NewqFolder (СоздатьqПапку).
        Notebook создаст новую папку под названием Unti tled Folder                                         (рис. 4.6). На­
        звания папок обычно отсортированы по алфавиту, поэтому найти нужную пап­
        ку не составит особого труда. Достаточно прокрутить список к нужному месту.



 +-     с   Q          -,     ........                             "' о   t1                               • 111 •   !!]
                                                                                                                           "
                                                                                                                           о
                                                                                                                               .
                                                                                                                               s
                    1opyter



                                                                                                .....    -·о




                г     ...."




                                                                                      15 ""'""" ......



                Рис.           4.6.      Новая папка получает название Ип t i      tled Folder

 2.     Установите фnажок рядом с названием Untitled                                 Folder.
 З.     Щеnкните на кнопке                       Rename   (Переименовать), находящейся в верхней
        части страницы.

        Появится диалоговое окно                     Rename directory      (Переименование каталога), как
        показано на рис. 4.7.

 4.     Введите название BPPD и щеnкните на кнопке                               Rename.
        Notebook изменит название папки .
 5.     Щеnкните в списке на новой записи BPPD.
        Вы перейдете в только что созданную папку BPPD.



                                                    ГЛАВА 4   Создание первого приложения                                      85
                                                                                                      --..._
                                                                                                     ~--
                                                                                                     ·--
                                     Рис.   4.7.     Выбор подходящего названия для папки



Создание нового блокнота
     Каждый новый блокнот напоминает папку с файлами. Отдельные примеры
помещаются в папку с файлами так же, как листы бумаги                                                  -    в физическую
папку. Каждый пример отображается в ячейке. Также можно поместить в пап­
ку и другие файлы. По мере изучения книги вы увидите, как это происходит
на практике. Чтобы создать новый блокнот, выполните следующие действия.

 1.     Выполните команду Newc::>Python 3 (Создатьс::>Руthоn 3).
        В браузере откроется новая вкладка с только что созданным блокнотом
        (рис.        4.8).        Обратите внимание на то, что блокнот содержит ячейку, которая
        была выделена для ввода в нее кода. Название нового блокнота                                               -   Untitled
        {Без названия). Это название не слишком информативно и подлежит изме­
        нению.




                                                                                                           11\ О       ID ~   -
     i) ЧIСТо~          ~Cl'Plrl'of.11          J' ГОСТРИСО5S77·20   () Мodlr'r1StDdliJria:5•T                                ))

              jUpyter Un\itled Las1Chec1ц>ooo1              нес"""''°'"-""'" tuosavedcмnoes>

                                  "•Vf                                                                      , "        о

          G    + ,.,        fl}     t'>   + +      М Run   8   С "                       _:j     а



                fl   1 J;




                                          Рис.     4.8. Блокнот содержит ячейки с кодом

 2.     Щелкните на названии Unti tled.
        Блокнот запросит ввод нового названия, как показано на рис.                                         4.9.
 3.     Введите название BPPD_ 04_ Sample.




86       ЧАСТЬ 1 Знакомство со средой Python
     Новое название указывает на то, что в данной папке находятся файлы приме­
     ров из главы   4 книги Beginning Programming with Python For Dиmmies. Этот файл
     имеет расширение      . ipynb. Использование подобного соглашения об именах
     позволяет легко различать файлы нашего репозитория.




                Рис.   4.9. Запрос ввода нового названия блокнота

  Конечно, только что созданный блокнот пока что пуст. Поместите курсор
в ячейку, введите команду      print ( 'Python -        самая лучшая среда nро­
граммироааиия!       ')   и щелкните на кнопке
                                             Run        (Выполнить). Эта кнопка обо­
значена указывающей вправо стрелкой и находится на панели инструментов.
Отобразится результат, показанный на рис.      4.1 О.   Результат выводится в той же
ячейке, что и исходный код. Несмотря на то что код находится в прямоуголь­
ном поле, а выводимый результат      -   за пределами этого поля, все это относит­
ся к одной и той же ячейке. Заметьте, что блокнот визуально отделяет выход­
ные данные от кода, поэтому можно рассматривать их отдельно. Новые ячейки
блокнота создаются автоматически.
  По завершении работы с блокнотом следует его закрыть. Для этого выбе­
рите команду   FileqClose and Halt   (ФайлqЗакрыть и остановить). В результате
вы вернетесь на начальную страницу, где заметите, что только что созданный
блокнот добавлен в список, как показано на рис.         4.11.

Экспорт блокнота
  Пользователи не всегда создают блокноты только для себя. Может так слу­
читься, что вы захотите отправить блокнот другому пользователю. Для этого
следует экспортировать блокнот из репозитория в файл. Далее можно отпра­
вить этот файл другому пользователю, который импортирует его в свой репо­
зиторий.




                                 ГЛАВА 4    Создание первого приложения          87
                            ju pyte r BPPD_04_Sample La>IChe<kpoont                                             • • , ..,,,",.,,   i""'"""''""""""
                                                                       ! ....11                                                                                                            ;        1~"110


                      G        +         )ll.QJ               ~       ++~ Run           8     C ~                            :J f:'I

                               rn 1 1                   i.:   lt 1   'F'ythm1      1111.,,.1 лУ' 11;.dA ер~'-     т:&:- ноr i.-.иi-    11111 • J




                               iн    (      1




                                                                         Рис.     4.1 О.      Блокнот хранит код в ячейках




                                                                                                                                                                                                                l!D ~   -
     () Чюtinoc:eщill!НЫ.                начаn....-ст~ е гОСТ Рl!СО!S7 1·20.м () МOd!rnStochlstlc5: T ,,                                  СЮ1е,'\ЬIМ\"1 - Ч'( ,,   ~ f'iOc;048";ВO.UПtpiU. .• ·-~~ ..                   ))


                  ·· 1upyt er

                                      •..,. •1

              SeJec1ltвn'5 10 pefkJrlm &ehons on them                                                                                                                                      u,....    rw ... "

                 го            . ",                                                                                                                                              L11~tJntfiltod +     Folew~
                                                                                                                                                                                                                "
                 г        11   HPl'P              4 ')311µ!
                                                                                                                                                                        """"      ммкуту   tta3an         9<2   в


                 г        DUl'f'
                                                                     "'"'                                                                                                       1Q 1~11МНУf К8)1Д

                 г        1- Oot         lff\('   11·                                                                                                                          З2 минуты нюад


                 г        (') IJt:1..,,.,l1~                                                                                                                                     16дней tt838,Q


                 г        CJ   lJU\lll!llVtiLI'>                                                                                                                                 1 6д~Ж1)8Д


                 г        IJ11юpbm(                                                                                                                                             4 мвсяцв Н8З8д

                  г       D ~ 1. ~19. kl( k ~,on                                                                                                                               6 r.tеСЯЦ88 Н&311д          11 kB

                 г        D    r1.~n r<            !                                                                                                                           6 1.МКЯЦИ неид




         Рис.         4. 11 . Все созданные блокноты отображаются в списке репозитория

     В предыдущем разделе мы создали блокнот BPPD_ 04_Sample . ipynb. Для от­
крытия блокнота следует щелкнуть на его записи в списке репозитория, после
чего на экране появится написанный вами код. Для экспорта этого кода выпол­
ните команду                                 FileqDownloadAsqNotebook (.ipynb) (ФайлqЗаrрузить                                                                                                      какqБлокнот
(.ipynb)).            Последующая процедура зависит от браузера. Обычно появляется ди­
алоговое окно с запросом на сохранение блокнота в виде файла. По окончании
не забудьте закрыть приложение, выбрав команду                                                                                                                     FileqClose and Halt (Файлq
Закрыть и остановить).




88             ЧАСТЬ 1 Знакомство со средой                                                                                        Python
Удаление блокнота
   Иногда блокноты устаревают или просто становятся ненужными. Чтобы ре­
позиторий не засорялся ненужными файлами, следует удалить их из списка.
Для удаления файла выполните следующие действия.

 1.         Установите флажок слева от записи BPPD_                                                       04_Saшple. ipynЬ.
 2.         Щелкните на пиктограмме корзины                                                    (Delete)     в верхней части страницы.

            На экране появится предупреждающее сообщение об удалении блокнота
            (рис.   4.12).
 3.         Щелкните на кнопке                           Delete (Удалить).
            Файл будет удален из списка.



    ltome                    Х




                             Delete


            ~       ~~       Are you   sше   you want to permenenuv delele ·ePPD_().4_5empJe IV)'l'lb"?




 Рис.   4. 12. Перед удалением файла                                    из репозитория появляется предупреждающее
                                                                          сообщение



Импорт блокнота
   Для работы с исходными кодами примеров книги следует импортировать
загруженные файлы в репозиторий. Исходные коды содержатся в архиве, ко­
торый извлекается в определенный каталог на жестком диске. В архив входят
файлы        . ipynЬ (IPython Notebook), содержащие                                                       исходные коды примеров книги
(см. введение). Чтобы импортировать исходный код в репозиторий, выполните
следующие действия.

  1.        Щелкните на кнопке                             Upload (Загрузить), находящейся в верхней части
            страницы.

            Последующая процедура зависит от применяемого браузера. В большинстве
            случаев появляется диалоговое окно                                             File Upload (Загрузка     файла), обеспечива­
            ющее доступ к файлам на жестком диске.

 2.         Перейдите в каталог файлов, которые нужно импортировать в блокнот.




                                                                  ГЛАВА 4                Создание первого приложения                 89
 3.     Выделите для импорта один или несколько файлов и щелкните на кноп­
        ке   Open             (Открыть), чтобы начать процесс загрузки.

       Файл вносится в список загрузки, как показано на рис.                              4.13. Файл еще не стал
        частью репозитория, а просто выбран для загрузки.

 4.     Щелкните на кнопке                           Upload (Загрузить).
        Notebook помещает файл в репозиторий, и теперь его можно использовать.

                                                                                                                                      - Q: X


                                   "

                 Jupyter                                                                                   C..Jf            ""Т




         Select rterм to pertorm rк:ьом on tnem                                                                         .., •     с
                                                                                                        """'
                                                                                                                   t~




            г    {1   •   "   ,                                                  ......     "'""           "
                  . ,IPl-1..' 04   tin   ~   J                                                                     ~
                                                                                                                           •
             Г        bl1UQ1~1.~IP'fl•                                                       1 Nмну1'   ка18,д            ",.
             г    li hPff'I                                                                 2б Wмну1 li838д


                                                                                            38   NмtfYТ назв.о,

                                                                                             16 днем    на38Д


                                                                                             t6дмеМ ..аэад


                                                                                            •wес~наэм

                                                                                           6 wecsщae    кaJa.Q             11 kB


     Рис. 4. 73. Файлы, добавляемые в репозиторий, включаются в список загрузки




Создание приложения
     Фактически, выполняя действия из раздела ''Создание нового блокнота'', вы
создали первое приложение                              Anaconda.   Оно содержит лишь команду print (),
которая в том или ином виде применяется довольно часто. Однако поддержива­
емая в   Anaconda                      методология грамотного программирования требует большего
объема знаний, чем у вас есть в данный момент. Следующие разделы помогут
получить представление о том, насколько обширны функциональные возмож­
ности грамотного программирования. Прежде чем приступить к работе, удо­
стоверьтесь, что файл                             BPPD_ 04 _ Sample. ipynb открыт для использования, по­
скольку он необходим нам для изучения возможностей приложения                                                               Notebook.

Знакомство с ячейками
     Если бы приложение                             Notebook   было стандартной средой разработки, в
нем не было бы ячеек. Вместо этого в вашем распоряжении оказался бы до­
кумент, содержащий одну непрерывную последовательность инструкций. Для


90        ЧАСТЬ               1        Знакомство со средой        Python
структурирования элементов кода пришлось бы использовались отдельные
файлы. В случае же ячеек каждая из них независима от остальных, поэтому
они различаются между собой. Конечно, результаты операций, выполняемых
в предыдущих ячейках, имеют значение, но если ячейка предназначена для
автономного использования, можно просто перейти к ней и выполнить соот­
ветствующий код. Чтобы увидеть, как все это работает, введите следующий код
в ячейку файла BPPD 04 Sample.

myVar = 3 + 4
print(myVar)

   После этого щелкните на кнопке                                                               Run              (обозначена стрелкой, указывающей
вправо). В результате выполнения кода отобразится результат, показанный на
рис.   4.14.        В данном случае результатом будет                                                                       7,   чего и следовало ожидать. Од­
нако обратите внимание на запись                                                         In [ 1 J : • Она указывает на то, что выполня­
ется код, находящийся в первой ячейке.




  (·    -1   (!!   1i)             r,v   localhost< " ""      ,, ""'           1                           •••   ~ -tr       "   11   '"      ::1: ., о   l'IJ ~   -
  О чю-о~                       НiNa.1ьt"llC1p;ttii'ILll'I '?rостРИСОS577·20" o ~mStochasro::T. . • ~~-чу._ U' Poccю:8o.lюtfttpКI ~ - ~~ ··                        »
              ::' jUpyter BPP0_04_Sample LaS\Check!><>nt                               2ммну,,,.назад        (•Ulosave<I)




                   ·г.   [11     print (' .ytt.c,r~   с.1~я   •тyчllJiЭ;i:t    ;rеда    пр f"J.'i!NКi'lp 11.нt11-. 1 ')


                                 Python -    самая лучшая     среда           програыииро!!ания        !


                   1111_1        myVar•      +4
                                 r"'1nr myVo!lr l




                   In {    J:




                   Рис. 4.14. Ячейки обрабатываются в блокноте по отдельности


   Первая ячейка также помечена записью In [ 1 J : • Она осталась после пре­
дыдущего сеанса. Поместите указатель мыши в данную ячейку и щелкните
на кнопке                Run        (Выполнить). Теперь ячейка будет включать запись                                                                      In [ 2 J : •
Но заметьте, что следующая ячейка по-прежнему содержит запись                                                                                              In [ 1 J :
(рис.   4.15).
   Теперь поместите указатель мыши в третью ячейку, которая в данный мо­
мент пуста, и введите команду                                                      print                   ("Переменная                    myVar: ", myVar).
Щелкните на кнопке                                Run      (Выполнить). Показанный на рис.                                                   4.16   результат сви­
детельствует о том, что код, находящийся в ячейках, выполняется не в стро­
гом порядке, а переменная myVar является глобальной для блокнота. Действия,


                                                                              ГЛАВА            4           Создание первого приложения                                 91
выполняемые над данными, влияют на каждую из ячеек независимо от поряд­

ка их выполнения.




                 JUpyter              BPPD_04_Sample LastCМclфoon1 4минуrw..,..                             (unsavldcn•noa•)

                                                                                                                                                 о

           1!1    +        :1<   llJ ~          + +             " Run      8    С "                  .:J    а




                 Jn (            -rayvar •          + 4
                                 pt   11t.   1'11.yV•r




                 .r. ( 1




     Рис. 4. 75. Код, находящийся в ячейках, может выполняться в произвольном
                                         порядке


                                                                                                                                                      .JP.l ><J

                                                                                                           ".    ~ ~
                                                                                                                                 '*   11\ о     tD о      -
                 JUpyter BPPD_04_Sample LestChetkpoont. 7миlfl"н•,.,,                                      <...,..,..,•.,,...,
                                                                                                                                       ,   ~i   f о



           1!1    + " ll! ~                        + + " ""' • с "                                   .:J    С3

                  11 {     1     pr1nt (' ytr




                  '1   {         niyvar •           + 4
                                 рr1п        myVar ·




                 !11             pt   lП     •[i     ..... t,   ~>1   /V   L!   • ,   llly°V.11.I:




           1      n    (   ]




 Рис. 4.    76.        Изменения в данных оказывают влияние на каждую ячейку, в которой
                             используется модифицированная переменная


Добавление документирующих ячеек
     Ячейки бывают разных видов, и далеко не все из них будут использоваться
в книге. Тем не менее вам может пригодиться знакомство с документирую­
щими ячейками . Выберите первую ячейку (помечена номером                                                                              2)   и выполните



92      ЧАСТЬ                    1           Знакомство со средой                                          Python
команду       lnsertqlnsert Cell Above                                         (ВставитьqВставить ячейку сверху). В блокнот
будет вставлена новая ячейка. Обратите внимание на раскрывающийся спи­
сок панели инструментов, в котором выбран пункт                                                                                              Code       (Код). Данный спи­
сок позволяет указывать тип создаваемой ячейки. Выберите в списке параметр
Markdown       (Разметка), введите название                                                                 # ЗаI"олово1е                        1-I"o уровня. и щел­
кните на кнопке                       Run. В                результате текст ячейки превратится в заголовок, как
показано на рис.                      4.17.


                                                                                                                                                 l
     t) Чкrо~              Нl'iall..мa.lcrpllMmt е ГOCТf'ИCOSS7NO . () ~nSt:Dchм:Ь::s ; T .., •                  CIO'otI11tM'4!!И-Чy....   '(:.t Роса.t11:Во1ю1п~и:s." - н.дt.жнw~   ))

            ·-· JUpyter BPPD_04_Sample                           LastCheckpo'"t             1 6мину;наэад   (autosaved)                                               i'   '"""'
                                                                                                                                                            ,,   ".



                             Заголовок 1-го уровня.

              lt\ ('   ·     pr1nt('Fyrh.::in           rама11   JТ'fЧI::ol!tl С'~.!11'11   np<:тт.1~··вattиR'' I


                             Python -       самая луч111ая среда            про гр~ванкя               !


              •r1 fl         111yVar •   -+ 4
                             print. myva r




                             ttереме нн а J11:   myVa r :   1


              rr. r 1:




     Рис.   4. 17. Заголовки помогают визуально разделять                                                                                   и документировать код


     Вы, возможно, подумали, что это напоминает НТМL-разметку, и будете
правы. Выполните команду                                                lnsertqlnsert Cell Below                                           (ВставитьqВставить ячей­
ку внизу), выберите в раскрывающемся списке параметр                                                                                                    Markdown, введите
##   ЗаI"оло1101е 2-I"o уровня. и щелкните на кнопке                                                                                                 Run. Как показано на
рис.   4.18, от количества начальных                                                           символов                # зависит уровень                              заголовка, хотя
в самом заголовке эти символы не отображаются.


Друrое содержимое ячеек
     В этой главе (и книге) рассматриваются далеко не все виды ячеек, которые
можно создавать с помощью приложения                                                                             Notebook.                    В блокнот можно добав­
лять всевозможные объекты, например графические изображения. Со време­
нем вы научитесь выводить на печать содержимое блокнота в виде отчета и
использовать его в ходе презентаций. Методология грамотного программиро­
вания отличается от всего, с чем вам ранее доводилось сталкиваться, и она




                                                                             ГЛАВА                4         Создание первого приложения                                                   93
обладает несомненными преимуществами, о чем мы поговорим в следующих
главах.




     О чкто~            ~ст~ егостР~5S7NО .. 0 Мodlrn5tlltt\Нtt:l:T                     ... ~~-Чу   UPocotA;Вonoмт!p\t:S.   -   ~·~           ))
                             .                                -
          .:· jupyter BPPD_04_Sample Last Checkoo•nt • •••нут,,.,.. (un58V<Кlc,,.._)                                            11'   "'•~•


          ~   +     :t<~ ~          ++      H Run 8 C "           '1(1"    .:J      e




                         Заголовок 1-го уровня.


                         Python -   саwая лучшая     с~дА   nрогрМ81Ироаа ния   !



                         Заголовок 2-го уровня .

                         myVi!r • ·" + 4
          1 '"    111    р" iц (;ayVarl




                         Переыенна я:   myVar:   7




          Рис.     4. 18. Заголовки разных уровней позволяют структурировать
                                                             содержимое ячеек




Использование отступов
     Работая с примерами книги, вы заметите, что некоторые строки имеют от­
ступы. Помните, что                      Python        игнорирует отступы в коде. Они используются для
визуальной разметки кода подобно тому, как в книгах используются отступы
красной строки.
     Различные способы применения отступов станут понятнее при дальнейшем
изучении книги. Но сначала нужно узнать, зачем нужны отступы и как они
создаются. Рассмотрим следующий пример, в котором применяется отступ,
позволяющий сделать связь между элементами приложения более очевидной.

 1.    Выберите команду Newr=>PythonЗ.

       Jupyter Notebook создаст новый блокнот. Соответствующий файл исходного
       кода называется BPPD_ 04 Indentation. ipynb (это имя можно изменить).

 2.    Введите prin t ("Реально дпинная 'l"екс'l"овая с'l"рока, ко'l"орая буде'l" "+.




94        ЧАСТЬ 1             Знакомство со средой Python
      Как и ожидалось, на экране отобразится обычный текст. Знак"плюс" (+)указы­
      вает Python на наличие дополнительного текста для отображения. Процесс
      объединения текста из нескольких строк в один фрагмент называется конка­
      тенацией (об этом мы поговорим в последующих главах).

 3.   Нажмите клавишу                               <Enter>.
      Как и следовало ожидать, курсор не возвращается в начало строки. Вместо
      этого он устанавливается непосредственно под первой двойной кавычкой,
      как показано на рис.                                   4.19. В данном случае создается автоматический от­
      ступ   -     особенность, отличающая редактор кода от обычного текстового ре­
      дактора.




       _ JUpyter           BPPD_04_1ndentation Lostctнкkpoont Бмннvт нвэад (unsovedch•noe»




       ~     +   :tc   ~ ~           + +      М Run 8              С "                       .:J       f.lJ




                       i,111!11 f"   &":bJI   n.; 111-1.Hdll 1'"<"1':    ЮН ("''Т '!",о,   К :т   ".    -! "У.-. т "+

                                ···1




             Рис.      4.19.         В окне редактирования автоматически создаются
                                               необходимые отступы

 4.   Введите           " занимать несколько строк в файле исходноrо кода. ") •
      Заметьте, что курсор возвращается в начало строки. По достижении конца
      кода блокнот автоматически возвращает отступ в исходное положение.

 5.   Щелкните на кнопке                                    Run          (Выполнить).

      Отобразится результат, показанный на рис.                                                                         4.20.   И хотя текст занимает не­
      сколько строк в файле исходного кода, программа формирует только одну
      строку в окне вывода. Разрыв строки появляется из-за недостаточных разме­
      ров окна; на самом деле это одна строка.




Добавление комментариев
  Людям свойственно постоянно делать для себя заметки. Перед закупкой
продуктов проверяется содержимое холодильника, уточняется, что нужно ку­

пить, и составляется список. Уже в магазине люди просматривают свои записи,
вспоминая, что нужно купить. Заметки делают в разных ситуациях, например,
во время деловых переговоров или по ходу лекции. Людям нужны заметки для


                                                                        ГЛАВА              4 Создание первого приложения                              95
того, чтобы позднее можно было освежить воспоминания. Комментарии вис­
ходном коде служат тем же целям. Их добавляют в код, чтобы потом быстро
вспомнить, для чего он предназначен. В следующих разделах комментарии
описываются более подробно. Соответствующие примеры содержатся в файле
исходного кода                       BPPD_ 04 _ Comments. ipynb.




               jupyter BPPD_04_1ndentation

                      "          \                             11      k.<
                                                                              Les1 C1нк._,l Qммнут """" (unяvodchangesJ

                                                                               "'                              h(•
                                                                                                                                                                            "    Pv
                                                                                                                                                                                          ,""
                                                                                                                                                                                            0

         l!j   +      11<   <'ll 11'>         + +         Н   Run     8      С      "                            .:J ""

                "\   flJ     р       i:1 ( •f   d.':ЬНО   n!t;.tttl-l<IЯ     ek-"r'• f'.21'1       'l'VJ!U,     Х ':'OD<llЯ   r:.y."• "+
                                          "     .JtiмtildTЬ    lf8< '1:СЛ11\""      C~f"I.~~   8      '8~.'1    ~"Хо"\Г.НС'      ~<'Л   ." )

                             Реа.пьно nтснна.я                'N!кстомя          строка,           ке тораJt будет            ~ниwать      неско.nько строк   а файп~ исходн о r~о   ко

                            ".
          1     n      1




       Рис.    4.20.        Применение конкатенации для объединения нескольких строк
                                             текста в одну



     ЗАГОЛОВКИ И КОММЕНТАРИИ


     Не нужно путать заголовки и комментарии. Заголовки отображаются в отдель­
     ных ячейках, а комментарии                                                     -      в исходном коде. И служат они разным целям.
     Заголовки описывают назначение группы строк, а комментарии уточняют на­
     значение отдельных шагов или строк в коде. Впрочем, и то, и то используется
     для документирования. Комментарии, как правило, являются более много­
     словными по сравнению с заголовками.




Знакомство с комментариями
     Важно указать компьютеру, что написанный вами текст является коммен­
тарием, а не кодом, который требует выполнения. В                                                                                                      Python           поддерживаются
два способа представления текста в виде комментариев. Первый способ заклю­
чается в использовании однострочного комментария. При этом используется
символ#.

#   Пример комментария.
рrint("Привет от                         Python!")                           #Еще один пример комментария.




96       ЧАСТЬ 1 Знакомство со средой Pythoп
                        Однострочный комментарий может занимать отдельную строку или
                        располагаться сразу после команды. Обычно такой комментарий
                        содержит короткое описание, например пояснение к инструкции.
ЗАПОМНИ!
                        В окне блокнота комментарии выделяются курсивом и другим цве-
                     том (обычно синим).

  Многострочные комментарии не поддерживаются в                                                              Python   напрямую, но их
можно сформировать с помощью строки с тремя кавычками. Многострочный
комментарий начинается и заканчивается тремя двойными                                                                 ("" ")    или тремя
одинарными кавычками                                        (' ' '),     как показано ниже.


  Приложение:                        Comrnents.py
  Автор:             Алекс
  Назначение:                        демонстрация                  применения                комментариев




                        Строки комментариев не являются выполняемыми инструкциями.
                        Python                ничего не сообщает при их появлении, однако                              Notebook трак­
                     тует их по-особому, что и проиллюстрировано на рис.                                                  4.21. Заметь­
ЗАПОМНИ!
                     те, что фактические комментарии, которым в ячейке                                                 1 предшествует
                        символ решетки                           ( #),   не появляются в выводе. А вот строки, заклю­
                        ченные в тройные кавычки, появляются. Если вы планируете выво­
                     дить блокнот в виде отчета, избегайте комментариев тремя кавычка­
                        ми. (Некоторые                           IDE,     например               IDLE,   просто игнорируют тройные
                        кавычки.)


           JUpyter BPPD_04_Comments Last Chectч:nn1                 22ов201а (UМ8\ledcti.nges)

                                                                                                                          ,    ,.,..   ,,)


      ~    +        tc ttl f)       + +        H Run   8   С "            .:]   18



           1n       1    # llf   •W /'   '<



                         Приоет     от    Python !


           rn ! 1




           п    [   1    1




          Рис.          4.21.       Многострочные комментарии распознаются, но при этом
                                                                 отображаются в выводе


  В отличие от стандартных комментариев текст, содержащийся между трой­
ным и кавычками, выделяется красным, а не синим цветом, и не выделяется

курсивом. Обычно мноrострочные комментарии содержат информацию о том,


                                                                     ГЛАВА           4     Создание первого приложения                       97
кто автор приложения, для чего оно было создано и какие действия оно выпол­
няет. Разумеется, не существует строгих правил использования комментариев.
Нужно просто указать компьютеру, какой текст является комментарием, а ка­
кой   -   не является.


Применение комментариев в качестве напоминаний
     Многие пользователи не видят особой ценности в комментариях; более
того, им кажется, что комментарии излишни. Просто они не учитывают, что
спустя много месяцев или даже лет после написания программы будет трудно
восстановить в памяти нюансы ее работы. Перечислим основные причины ис­
пользования комментариев в коде:


              ))   они позволяют вспомнить, с какой целью создавался код и какую
                   задачу он решает;


              ))   они содержат указания о том, как правильно запускать программу;

              ))   они упрощают работу с кодом другим программистам;

              ))   они содержат подсказки относительно будущих обновлений кода;

              ))   они содержат ссылки на документацию;

              ))   они содержат список изменений, которые были внесены в код.

     Конечно, можно применять комментарии и в других целях, но указанные
варианты наиболее популярны. В последующих главах вы увидите различные
примеры использования комментариев. По мере усложнения кода приходится
добавлять все больше и больше комментариев, чтобы не упустить из виду ни­
каких важных моментов.



Применение комментариев для предотвращения
выполнения строк кода

     Программисты иногда используют комментарии, чтобы избежать выпол­
нения кода (как говорят, закомментировать код). Так поступают, когда хотят
проверить, не приводит ли та или иная строка кода к сбою в работе прило­
жения. Для подобных целей можно применять как однострочные, так и мно­
гострочные комментарии. Однако во втором случае на экран будет выведен
закомментированный код (рис.       4.22).


Как закрыть Jupyter Notebook
     После выполнения команды          FileqClose апd Halt для закрытия каждого из от­
крытых блокнотов нужно закрыть окно браузера, чтобы завершить текущий


98        ЧАСТЬ 1 Знакомство со средой Python
сеанс. Однако сервер продолжит выполняться в фоновом режиме (рис.                                                                                                    4.23).
Окно   Jupyter Notebook останется                                                                            открытым до тех пор, пока вы не остановите
сервер. Чтобы завершить сеанс работы с сервером, нажмите комбинацию кла­
виш    <Ctrl+C>,                           после чего окно закроется.




       ~   +   JC         ft.I ~          + +           N Run       8     С "                            .:J     r;:r




                      .   1        1••·

                          Привет от             Pyt.ho n !


           lr."
                          l!t""•.,.."'""•1~             <ON:::n•".py
                          А~т-г           J'J!'>"К>:"
                          H<i ~. ·1.-.,_и~.         '1E.\C:>t' "!'р..1Ч.; 1i щ:....,,_"   11,    1< -   li   Ц      А




                          ' \nПриnожеНИ:5:               ca.nent.a.py\ nAa7op:                  мекс:\nНа~качекие: n'!Wекстрщия пpиweнetl.ИJll ~соае~~ектармев\n '




                           1   \npr1nt( '"~ kQJI. не ewnOJDU1eтc.11 юcJtO:oд5."J \ n'




       1 '"       1




                  Рис. 4.22. Комментарии, предотвращающие выполнение кода




   d2c-9d98-o22Чabba3a95
  [I   22 :81 :32.766 NotobookApp]                                                        Saving filo at /BPPD_0Ч_Sa•plo . ipynb
  [I   22 : 85 : 32 . 52Ч NotobookApp]                                                    Saving filo at /BPPD_eЧ_Sa•plo . ipynb
  [I   22 :07 :32 . 527 NotebookApp]                                                      Saving file at /BPPD_eч_ Sa•plo . ipynb
  [I   22 :89 :32 . 528 NotobookApp]                                                      Saving file at /BPPD_eч_Sa•plo . ipynb
  [I   22 : 11 :32 . 531 NotobookApp]                                                     Saving filo at /BPPD_ BЧ_Sa•plo . ipynb
  [I   22 : 13 : 32 . 5Ч5 NotobookApp]                                                    Saving filo at /BPPD_0Ч_ Sa•plo . ipynb
  [I   22 : 15 : 32 . 5Ч7 NotobookApp]                                                    Saving file at /BPPD_0Ч_Sa•ple . ipynb
  [I   22 : 17 : 32.5Ч9 NotobookApp]                                                      Saving filo at /BPPD_GЧ_Sa•ple . ipynb
  [I   22 : 19 : 32 .559 NotobookApp]                                                     Saving filo at /BPPD_0Ч_Sa•plo.ipynb
  [I   22 :28:19.031 NotebookApp]                                                         Starting buffering for 95еЬЬеаЧ-GdЧ6-Чd2с-9d98-е22Ч

  1;
   bba3a95 : f922Чo23fb28Ч8358aG5cc197dGeЧЧ65
       22 :28:19 . 351 NotebookApp] Kernol s hutdown :                                                                             95оЬЬоаЧ-еdЧ6-Чd2с - Зd98-о22ЧаЬЬа3а_J

  [1 22 :28 :28.391 NotobookApp] Croating new notebook in
  [I 22 :28 : 3G.G03 NotebookApp] Kernel started : Ьс 0d99Зе - Зf3с-Ч618 - ЬЧdс - ЧЬ89Ч9933с6

  [I 22 :28 :31 .369 NotobookApp] Adapting to protocol v5 . 1 for kornol bc0d999o-9f3c-
   618-ЬЧdс-ЧЬ89Ч9933с6о
  [I 22 :30 :29 . 999                            NotobookApp]                             Saving                 file       at   /BPPD_GЧ_Indentation . ipynb
  [I 22 :32 :30 . 018                            NotobookApp]                             Saving                 file       at   /BPPD_0Ч_Indentation . ipynb
  [I 22 : 3Ч : 30 . 013                          NotobookApp]                             Saving                 f i lo     at   /BPPD_0Ч_ Indontation.ipynb
  [I 22 : 36 : 30 . 0Ч9                          NotebookApp]                             Saving                 f i lo     at   /BPPD_ BЧ_Indentation . ipynb
  [I 22 :38 :30 . 029                            NotebookApp]                             Savi ng                f ilo      at   /BPPD_ GЧ_Indentation . ipynb



                                                Рис. 4.23. Убедитесь, что окно сервера закрыто




                                                                                                 ГЛАВА                  4   Создание первого приложения                 99
              Еще раз взгляните на рис.   4.23.   Команды, отображаемые в данном
              окне, сообщают о том, какие действия выполняются в пользователь­
              ском интерфейсе. Это позволяет узнать, что происходит во время
ТЕХНИЧЕСКИЕ
подrоБности   сеанса. Вряд ли вы будете часто заглядывать сюда, тем не менее по-
              лезно помнить о такой возможности.




100       ЧАСТЬ   1   Знакомство со средой   Python
Глава                             5
Работа с                                    Anaconda
~t"•/;-'•%~" .,.~ 1 :t'f   ;- '

~/в ' этоИ ;ТЛАВЕ ...
~:~~ :c·"<}"'~(:~t~~J ·- ~/~~):~


    ))     Работа с файлами кода

    ))     Работа с ячейками

    )) Конфигурирование пользовательского интерфейса
    ))     Изменение внешнего вида кода




в
                  качестве интегрированной среды разработки в        Anaconda   используется
                  Jupyter Notebook.    Фактически все программистские задачи, рассматри­
                   ваемые в книге, можно решить с помощью одной лишь этой утилиты.
Вот почему в данной главе основное внимание уделяется   Jupyter Notebook
(в дальнейшем просто Notebook). В отличие от большинства IDE, в Notebook
используется принцип грамотного программирования, описанный в главе 4.
Прочитав данную главу, вы поймете, каким образом методология грамотного
программирования позволяет вести продуктивную разработку приложений на
Python.
         По ходу знакомства с возможностями            Notebook вы   узнаете о том, как загру­
жать код и как создавать контрольные точки, упрощающие процесс восстанов­

ления после ошибок. Важной частью процесса разработки является эффектив­
ная работа с файлами. В главе                4 мы   рассмотрели лишь основы, ну а в данной
главе мы остановимся на этой теме более подробно.
         Кроме того, в главе          4 рассматривались   ячейки. Благодаря этим структурам
существенно упрощается процесс кодирования. В данной главе вас ожидает
больше информации о них.
         Мы также поговорим о том, как эффективно работать с                  Notebook.   На­
пример, вам может не понравиться то, как сконфигурирована рабочая сре­
да, и вы захотите выяснить, как изменить настройки среды. Вы узнаете, как
перезапустить ядро в случае замедления или ухудшения работы                     Notebook и   как
получить справку. Кроме того, в                  Notebook есть   ряд функций, которые иногда
называются магическими (в силу предоставляемых ими возможностей). Они не
влияют на работу кода, но влияют на способ его отображения в                    Notebook   и на
представление графики. В конце мы поговорим о том, как взаимодействовать с
выполняющимися процессами. Иногда нужно выяснить, чем занят конкретный
процесс, чтобы определить порядок обращения к нему.



Заrрузка кода
   Notebook -             это особая среда разработки, основанная не на текстах про­
грамм, в отличие от других                IDE.   Если открыть файл    IPython Notebook   с рас­
ширением        . ipynb, то можно увидеть,           что данный файл содержит читабельный
текст, но это не листинг программы. Для включения специальных функций,
предоставляемых в             Notebook, файл должен содержать дополнительную инфор­
мацию, которая отсутствует в обычном текстовом файле. Соответственно, что­
бы можно было открыть код в другой среде, его нужно загрузить.

               В главе       4   было показано , каким образом можно экспортировать
               блокнот в формат, поддерживаемый программой                   Notebook.   Мож­
               но также загружать код в других форматах, распознаваемых ины­
 ЗАЛОМ НИ!
               ми приложениями . Команда              FileqDownload As (ФайлqЗагрузить     как)
               обеспечивает доступ к следующим форматам:

                ))       Python (. ру);
                ))       HTML (. html);
                ))       Markdown (.md);
                ))       reST (. rst);
                ))       laTeX (. tex);
                ))       PDF via laTeX (. pdf).

               Перечисленные форматы доступны не всегда. Например, чтобы
               создать файл          PDF   с помощью     LaTeX,    нужно установить модуль
               ХеТеХ. Соответствующие инструкции приведены по следующему
ВНИМАНИЕ!
               адресу :


               https : //nbconvert . readthedocs.io / en/ la t est/ instal l.
               html #installingtex

   Модуль ХеТеХ содержит движок рендеринга, который требуется для созда­
ния РDF-файлов.


102          ЧАСТЬ   1     Знакомство со средой       Python
  В зависимости от конфигурации системы файлы некоторых форматов мож­
но открывать прямо в браузере. Например, на рис.                                          5.1 показано, какой вид мо­
жет иметь один из примеров главы                                     4   в формате      HTML, открываемый в брау­
зере. Все выглядит точно так же, как и при                                          открытии файла примера в Jupyter
Notebook.
                                                                                    ".9   {>

  о --




                     '•tl..~-'   C:-1'ts.py llAll':'<JP"   ,.,.к,•J11ь1ч-: ~!O<ll q:i..-"1""" -кt•_...a,r.'




   Рис. 5.   7. Некоторые форматы файлов можно открывать непосредственно
                                                                 в браузере




Контрольные точки
  Благодаря контрольным точкшw можно сэкономить немало времени и уси­
лий на отладку кода. Они могут применяться как для сохранения промежуточ­
ного состояния , так и для контроля кода. С помощью этого средства можно
получить снимок состояния приложения в определенный момент времени.


Методика использования контрольных точек
  В отличие от операции сохранения приложения контрольная точка приво­
дит к созданию скрытого файла, который помещается в специальну ю папку
проекта. Например, при работе с примерами книги контрольные точки можно
найти в папке       \BPPD\. ipynb_checkpoint s.                                       К контрольной точке можно вер­
нуться впоследствии, когда потребуется восстановить предыдущее состояние
приложения. Контрольные точки создаются следующим образом.

               »    Автоматически. По умолчанию                                           Notebook автоматически создает
                    контрольную точку каждые                                   120 секунд,           если пользователь не изме­
                    нит данный интервал с помощью магической функции                                                  %autosav e
                    (об этом мы поговорим в разделе "Применение магических
                    функций") .

               ))   Вручную. Можно создать отдельный файл контрольной точки
                    в ручном режиме.



                                                                                  ГЛАВА 5             Работа с   Anaconda   103
   Все контрольные точки сохраняются в одном файле. Таким образом, при
каждом сохранении предыдущий файл перезаписывается. Это позволяет иметь
резервную копию на случай повреждения исходного файла (например, во вре­
мя запуска или закрытия приложения).
   Контрольные точки можно создавать вручную. К примеру, в определенный
момент приложение начало работать стабильно, хотя его разработка еще не за­
вершена. Создав контрольную точку, вы получаете возможность впоследствии
вернуться к этому состоянию, если вдруг приложение будет повреждено.
  Контрольные точки могут пригодиться и в других ситуациях. Например, вы
собираетесь добавить в приложение потенциально опасную функцию и хотите
защитить его на случай, если что-то пойдет не так. Контрольные точки позво­
ляют вернуться к определенному этапу разработки приложения. Это своего
рода страховка, которая дополняет функцию автоматического сохранения.

             Notebook    позволяет видеть только одну контрольную точку, но при
             желании их можно создать несколько. Просто переименуйте имею­
             щуюся контрольную точку, а затем создайте новую. Например, если
  СОВЕТ
             имеется контрольная точка   BPPD_ 04 _ Comments-checkpoint. ipynb,
             то перед новым сохранением переименуйте ее в BPPD_ 04_Comments-
             checkpointl. ipynb. Чтобы вернуться к исходной контрольной точ­
             ке, верните ее прежнее название, *checkpoint. ipynb.



Сохранение контрольных точек
  Для сохранения контрольной точки выберите команду               File<::> Save and
Checkpoint   (Файл<::>Сохранить файл и контрольную точку).   Notebook автомати­
чески сохранит копию имеющегося блокнота в папке        . ipynb_ checkpoints    под
существующим именем, к которому добавляется суффикс          -checkpoint. Если
не переименовать имеющуюся контрольную точку, то в результате ручного или

автоматического сохранения существующий файл будет перезаписан. Следова­
тельно, во всех случаях используется один и тот же файл контрольной точки,
если, конечно, не переименовывать файлы в ручном режиме.


Восстановление контрольной точки
  Для восстановления контрольной точки выберите команду             File<::>Revert to
Checkpoint   (Файл<::>Вернуться к контрольной точке). Может показаться, будто
команда позволяет иметь несколько контрольных точек, но в действительности
всегда отображается только одна запись, включающая дату и время создания
контрольной точки.




104       ЧАСТЬ   1   Знакомство со средой   Python
Работа с ячейками
  Именно ячейки отличают          Notebook от других IDE.     Благодаря ячейкам мож­
но выполнять различные операции с приложениями, которые были бы слиш­
ком трудоемкими или чреватыми ошибками в других               IDE.   Например, можно
перемещать связанный код не построчно, а целыми фрагментами. В главе                   4
было описано несколько приемов, которые удобно применять при работе с
ячейками. В следующих разделах рассматриваются дополнительные способы
работы с ячейками.


Добавление различных типов ячеек
  В   Notebook    можно использовать ячейки нескольких типов. В главе            4   рас­
сматривались два типа ячеек. Ниже кратко перечислены все типы, поддержи­
ваемые в   Notebook.
            ))    Code (Код). Содержит интерпретируемый       код Pythoп, который под­
                  держивает области ввода и вывода.

            )) Markdown (Разметка). Отображает текст документации          с использо­
                  ванием разметки   GitHub, описание   которой можно найти по следу­
                  ющему адресу:

                  https://help.github.com/categories/writing-on-githuЬ/

                  В примерах книги ячейки типа     Markdown   в основном применяются
                  для заголовков, но они могут включать любую информацию.
             ))   Raw NBConvert     (Исходное содержимое       NBConvert).   Позволяет
                  включать в блокнот неинтерпретируемое содержимое, которое ока­
                  зывает влияние на определенные виды выводимой информации,
                  например при работе с   LaTeX.   В книге не используются ячейки по­
                  добного типа, поскольку формируемый ими вывод довольно специ­
                  фичен. Дополнительную информацию по этой теме можно найти по
                  следующему адресу:

                  https://ipython.org/ipython-doc/3/notebook/
                  nbconvert.html#nbconvert
             )) Heading   (3агоnовок), устаревший тип. Это старый способ выделе­
                  ния заголовков, который в настоящее время не используется.


   Всякий раз при выполнении содержимого ячейки с помощью команды
CellqRun Cells    (ЯчейкаqВыполнить ячейки) или        CellqRun Cells and Select Below
(ЯчейкаqВыполнить ячейки и выбрать ниже), когда курсор находится в по­
следней ячейке,     Notebook   автоматически добавляет новую ячейку. Но это не
единственный способ добавления новых ячеек. Например, можно вставить



                                               ГЛАВА 5     Работа с   Anaconda       105
новую ячейку посередине блокнота. Для этого выполните команду                lnsertqlnsert
Cell Above   (ВставкаqВставить ячейку выше) или         lnsertqlnsert Cell Below (Встав­
каqВставить ячейку ниже), в зависимости от того, вставляется ли новая ячейка
выше или ниже текущей ячейки.


Разделение и объединение ячеек
   В   Notebook    ячейки обрабатываются как отдельные объекты. Любые дей­
ствия, связанные с содержимым ячейки, оказывают влияние на приложение в
целом. Причем обращаться к содержимому отдельной ячейки можно, не изме­
няя содержимого других ячеек. Более того, можно выполнять ячейки в любом
порядке, обращаясь к одним ячейкам чаще, чем к другим. Поэтому следует
продумывать структуру ячеек: необходимо определить, является ли ячейка до­
статочно независимой и в то же время функциональной для решения требуе­
мой задачи. С учетом этого приходится разделять или, наоборот, объединять
ячейки.
   Разделение ячейки означает создание двух ячеек на основе имеющейся од­
ной. Разделение произойдет внутри ячейки в месте текущего расположения
курсора. Для разделения выполните команду           EditqSplit Cell   (ПравкаqРазделить
ячейку).
   Объединение ячеек означает формирование одной ячейки на основе двух.
Ячейки объединяются в том же порядке, в каком отображаются в блокноте,
поэтому еще до объединения следует убедиться, что порядок их расположения
правильный. Для объединения ячеек выполните команду             EditqMerge Cell Above
(ПравкаqОбъединить с ячейкой выше) или               EditqMerge Cell Below (Правкаq
Объединить с ячейкой ниже).


Перемещение ячеек
   Порядок расположения ячеек можно изменять. Чтобы переместить ячейку,
проще всего выделить ее и воспользоваться командой           EditqMove Cell Up (Прав­
каqПереместить ячейку вверх) или          EditqMove Cell Down (ПравкаqПереместить
ячейку вниз). Но иногда требуется выполнить и другие действия с ячейками.
   Как и большинство редакторов,         Notebook   располагает полным набором ко­
манд редактирования. Все они доступны в меню           Edit (Правка). Ниже описаны
команды редактирования, поддерживаемые в             Notebook в дополнение к стан­
дартным командам по перемещению ячеек.


              ))   Cut Cells (Вырезать ячейки). Удаляет выделенную ячейку,      помещая
                   ее в буфер обмена для дальнейшего использования.

              ))   Сору   Cells   (Копировать ячейки). Помещает копию выделенной
                   ячейки в буфер обмена, не удаляя ее.


106     ЧАСТЬ 1 Знакомство со средой Python
          ))   Paste Cells Above      (Вставить ячейки выwе). Вставляет копию ячей­
               ки из буфера обмена выше выделенной ячейки.

          ))   Paste Cells Below (Вставить      ячейки ниже). Вставляет копию ячей­
               ки из буфера обмена ниже выделенной ячейки.

          ))   Delete Cells (Удаnить ячейки). Удаляет выделенную ячейку без     соз­
               дания копии.

          ))   Undo Delete Cells (Отменить удаnение ячеек).      Возвращает удален­
               ную ячейку в блокнот (имеется лишь один уровень отмены удале­
               ния, поэтому данную команду следует вызвать сразу же после уда­

               ления).


Выполнение содержимого ячеек
  Чтобы увидеть результат интерпретации ячейки, даже если это ячейка
разметки, необходимо выполнить ее содержимое. Самый простой способ               -
щелкнуть на кнопке       Run Cell   (Выполнить ячейку), находящейся на панели ин­
струментов (помечена направленной вправо стрелкой). Если же вы не хотите
выполнять содержимое ячейки стандартным способом, то выберите один из
пунктов в меню   Cell   (Ячейка).

          ))   Run Cells       (Выпоnнить ячейки). Выполнение выделенной ячейки
               без изменения текущего выделения.

          ))   Run Cells and Select Below (Выпоnнить ячейки и выбрать ниже),
               вариант по умоnчанию. Выполнение выделенной ячейки с по­
               следующим выделением следующей ячейки. Если же выделенная
               ячейка является последней, то      Notebook создает новую ячейку для
               выделения.

          ))   Run Cells and lnsert Below (Выпоnнить ячейки       и вставить ниже).
               Выполнение выделенной ячейки с последующей вставкой новой
               ячейки ниже текущей. Данная команда позволяет добавлять новые
               ячейки в середину блокнота, поскольку новая ячейка создается,
               даже если выделенная ячейка не является последней.

          ))   Run All (Выпоnнить все). Выполнение всех ячеек в блокноте свер­
               ху вниз. Когда Notebook доходит до конца, выделяется последняя
               ячейка, но не вставляется новая.

          ))   Run All Above        (Выпоnнить все выwе). Выполнение начинается
               с текущей ячейки и продолжается в обратном порядке для всех яче­
               ек, расположенных выше. Данная команда отсутствует в большин­
               стве     IDE.
          ))   Run All Below (Выпоnнить все       ниже). Выполнение начинается с те­
               кущей ячейки и продолжается до конца блокнота. Когда        Notebook


                                                ГЛАВА 5   Работа с   Anaconda   107
                     обработает все ячейки, выделяется последняя ячейка, но не встав­
                     ляется новая.




                В правом верхнем углу окна Notebook можно заметить небольшой
   ВНИМАНИЕ!
           квадратик со словами Not Trusted (Не доверено). Чаще всего работа с
  Python не зависит от уровня доверия к Notebook. Однако при использовании
  некоторых локальных или защищенных ресурсов на сайте может потребовать­
  ся установить определенный уровень доверия для         Notebook.
  Самый быстрый и простой способ настройки уровня доверия            -   щелкнуть на
  кнопке       Not Trusted. Появится диалоговое окно, в котором можно включить ре­
  жим доверия к        Notebook. К сожалению, это может вызвать проблемы с безо­
  пасностью, поэтому поступайте так, только если уверены, что можете доверять
  исходному коду.

  В   Anaconda имеются другие способы обеспечения безопасного доступа к за­
  щищенным ресурсам. Впрочем, эта тема выходит за рамки книги . Дополни­
  тельные сведения доступны по следующему адресу :


  https : //jupyt er- noteboo k. readthedocs . io/en/latest/security . html
  Для выполнения примеров книги режим доверия не требуется, поэтому кноп ­
  ку   Not Trusted можно игнорировать.

Отключение вывода
  Чаще всего нужно видеть результаты выполнения ячейки, но иногда это
просто мешает. Кроме того, бывают ситуации, когда нужно начать с чистого
вывода, поэтому старую информацию необходимо стереть. В меню               CellqCurrent
Outputs (ЯчейкаqТекущие         выводимые данные) находятся команды, относящие­
ся лишь к выделенной ячейке, тогда как меню          CellqAll Output (ЯчейкаqВсе   вы­
водимые данные) содержит команды, управляющие выводом данных из всех
ячеек блокнота. Ниже перечислены команды, контролирующие вывод инфор­
мации.


                )) Toggle (Переключение).    Включение или отключение вывода на ос­
                     нове предыдущего состояния. При этом информация выводится
                     в полном объеме.

                ))   Toggle Scrolling (Прокрутка). Сокращение вывода до принятого      по
                     умолчанию числа строк. Вы увидите достаточно, чтобы понять, как
                     отработала ячейка, но детали останутся скрытыми.




108      ЧАСТЬ 1       Знакомство со средой Pythoп
            ))   Clear (Очистить). Удаление текущих выводимых данных. После вы­
                 зова этой команды нужно повторно выполнить ячейку, чтобы сгене­
                 рировать новые результаты.




Изменение внешнего вида                             Jupyter Notebook
  Внешний вид        Notebook можно   изменить. Конечно, по сравнению с другими
IDE   возможности здесь ограничены, но предлагаемых настроек вполне доста­
точно. Все они доступны в меню        View (Вид).
            ))   Toggle Header (Заголовок). Заголовок в верхней части рабочей
                 области содержит название блокнота. (О том, как поменять назва­
                 ние блокнота, рассказывалось в главе 4.) Кроме того, если щелкнуть
                 на находящейся в левом верхнем углу ссылке      Jupyter, можно будет
                 получить доступ к панели управления блокнота. Также в заголов­
                 ке отображается текущий статус сохранения и содержится кнопка
                 Logout   (Выход), предназначенная для выхода из   Notebook.
            ))   Toggle Toolbar (Панель инструментов). Панель инструментов со­
                 держит ряд кнопок для быстрого выполнения команд. Эти кнопки
                 описаны ниже в порядке расположения слева направо.

                 •   Save and Checkpoint (Сохранить файл и создать контрольную
                     точку). Сохраняет текущий блокнот и создает для него контроль­
                     ную точку.

                 •   lnsert Cell Below (Вставить ячейку ниже). Добавляет новую
                     ячейку ниже выделенной ячейки.

                 •   Cut Selected Cells (Вырезать выделенные ячейки). Удаляет
                     текущую ячейку, занося ее в буфер обмена.

                 •   Сору   Selected Cells (Копировать выделенные ячейки). Созда­
                     ет копию текущей ячейки в буфере обмена, не удаляя ее.

                 •   Paste Cells Below (Вставить ячейки ниже). Вставляет ячейку из
                     буфера обмена ниже текущей ячейки.

                 •   Move Selected Cells Up (Переместить выбранные ячейки
                     вверх). Перемещает выделенные ячейки на одну позицию вверх.

                 •   Move Selected Cells Down (Переместить выделенные ячейки
                     вниз). Перемещает выделенные ячейки на одну позицию вниз.

                 •   Run Cell (Выполнить ячейку). Выполняет содержимое теку­
                      щей ячейки и выбирает следующую ячейку. Если это последняя
                     ячейка,
                           Notebook создает под ней новую ячейку. Ячейки типа
                     Raw NBConvert не интерпретируются; в их случае ничего не
                      произойдет.


                                               ГЛАВА 5   Работа с   Anaconda     109
                 •    lnterrupt Kernel    (Прервать ядро). Прекращение выполнения ин­
                      струкций ядром в текущей ячейке.

                 •    Restart the Kernel    (Перезапуск ядра). Останов и повторный за­
                      пуск ядра. В результате будут потеряны значения всех перемен­
                      ных.


                 •    Cell   Туре   Selection   (Выбор типа ячейки). Это раскрывающийся
                      список, в котором можно выбрать тип ячейки (см. раздел "Добав­
                     ление различных типов ячеек").

                 •    Ореп    the Command Palette (Открыть палитру команд). Ото­
                      бражает диалоговое окно   Command Palette (Палитра команд), в
                      котором можно искать команды. Это окно более подробно рас­
                      сматривается в следующем разделе.


           ))    Toggle Line Numbers            (Номера строк). Добавляет или удаляет ну­
                 мерацию строк в листингах кодов. Данная настройка не оказывает
                 влияния на другие типы ячеек. Она будет более подробно рассмо­
                 трена в разделе"Отображение номеров строк".

           ))    Cell Toolbar (Панель инструментов ячейки).          Позволяет добавлять
                 команды на панель инструментов ячейки. Эти команды помогают
                 определенным образом взаимодействовать с ячейками. Данная
                 функция более подробно рассматривается в разделе "Панель ин­
                 струментов ячейки".



Поиск команд в окне                 Command Palette
  Диалоговое окно        Command Palette позволяет получить доступ к списку ко­
манд, поддерживаемых в       Notebook. Щелкните на значке Open the Command
Palette (Открыть палитру команд), находящемся на панели инструментов, что­
бы открыть список (рис. 5.2).
  Для поиска нужной команды начните вводить фразу, которая, по вашему
мнению, характеризует команду. Например, чтобы отобразить все связанные с
ячейкой команды, введите слово            cell.     После обнаружения нужной команды
щелкните на ней, чтобы выполнить ее.


Отображение номеров строк
  С длинными листингами бывает неудобно работать, и возможность нумеро­
вать строки оказывается весьма кстати. Для вывода номеров строк выполните
команду  ViewqToggle Line Numbers (ВидqНомера строк). В результате все стро­
ки кода, введенные в ячейки, будут пронумерованы, как показано на рис. 5.3.
Заметьте, что строки вывода не нумеруются.




110    ЧАСТЬ 1       Знакомство со средой          Python
                                                          rh8rw,J&teltol'IМd!f1Q2
                               !       •·•
                                                          ChanQ9 (01 lo hedd1!19 3

                                                          che~     t•l lo h68d11q •

                                                          ctшnge   cel    1о heдdnq       5
                 Эаrоnоеок
                                                          change   ц1l 1о heвda"lg        13
                                                                                                                                                          "'"'
                                                          chanoв   cel to 1ru11kdowl1

                                                          change ceR      1о   rew

                                                          clf>iv iiM culls outpul
          n t         t   ,~   f"
                                                          cloltf cen 011tpu!

                                                          clo:so the рщ;01'

                                                   С conlirm reste1 I kенюl                                                                      ,;,   11'.


                                                          coor1rm rQO;la1I k8fool and cle9r output

                                                   ~ coпfi1m       resttlft ketnel and run &11 tells

                                                   С conlтnп       sh\11.down kernel




          Рис.    5.2.                 Воспользуйтесь диалоговым окном Соттапd                                                                                   Palette для поиска
                                                      необходимых команд


          JUpyter BPPD_04_Comments '"'""""""'"' 22ов20tа toutosa""'


   l!;l    +    ЭCt'f1 "1++H Run 8 C~                                                                       ..:J=

                                              (~llf.
                                                      '          .    '
                                                                '%' l'yr.t,~         ")   '

                      nриеет            от     Python 1



           '"                                                                  ру




                                                                                                                               ..
                      ' \n npкnos:eюie:                   Ccia:inents.py\n.Aaтop:               Аnе..:с\nнаsна"екие:   .uewoнc:тp&w.tя nриwенеюtя ко-нтариев\n'



                                   1     '

                                   1r1ntt"        т



                      ' \nprint              ("Этот 11:0.а н~        еыnС11>1яетс:я            кикоr.1Jа.   ") \ n •




               Рис.       5.3.           Номера строк значительно облегчают совместную работу
                                                          над проектом


Панель инструментов ячейки
  У каждой ячейки есть определенные функциональные возможности. Что­
бы получить к ним доступ, нужно добавить кнопку на панель инструментов
ячейки с помощью команд меню                                                                                   ViewqCell Toolbar (Видq Панель                            инструментов




                                                                                                                               ГЛАВА         5         Работа с        Anaconda       Ut
ячейки). На рис.                               5.4                показана ячейка с кнопкой                                      Edit Metadata           (Изменить мета­
данные).


      ~· jupyter BPPD_04_Comments '""с""',._.                                     21002018         '""'"""'"">
                    \/f




       r n 11 ·                                                                                                                                                Edt~ddt!•

                          •   ft.J1_'Ч> _;·   ~....... "~-    "    ~
                      pгint {" 111:1+1~                      ~ Pvthcn ") t 1      .1 ,,,   ·1<11   f'    ~       " '·" 1

                  Привет от           Pythoп         !


        tn PI




                  ' \nприп02еиме :                coвiment.s .py\nAВ'l"op:     Аr.ехс\nИазначеиие:           Де)ЮКС'f"р<~ция примекеюu~ ~н'l"арие11\n'



       f11   (




                  ' \nprint.( "ЭТvт код не                        ВЫJ1о.nкяется микоrм."J\n'



       In [ 1




      Рис. 5.4. Кнопки, находящиеся на панели инструментов ячейки, позволяют
                               менять содержимое ячейки


  Метаданные оказывают влияние на функционирование ячейки. Заданные по
умолчанию настройки управляют как уровнем доверия ячейки, так и прокрут­
кой длинного содержимого. Некоторые настройки оказывают влияние лишь
на ячейки определенных типов. Например, настройка                                                                                     Raw Cell Format            (Формат
исходной ячейки) влияет только на ячейки типа                                                                                   Raw NBConvert.
  На панели инструментов ячейки может одновременно отображаться только
одна кнопка. Соответственно, нельзя сконфигурировать ячейку для слайд-шоу,
если к ней добавлены теги. Придется выбрать что-то одно. Команда                                                                                               ViewqCell
ToolbarqNone                   (ВидqПанель инструментов ячейкиqНет) очищает панель ин­
струментов ячейки. Доступные кнопки перечислены ниже.

                     ))              Edit Metadata                               (Изменить метаданные). Позволяет настраивать
                                     функциональные свойства ячеек, используя как стандартные, так
                                     и пользовательские метаданные.

                     ))              Raw Cell Format                                       (Исходный тип ячейки). Позволяет выбрать
                                     тип данных, хранящихся в ячейках типа                                        Raw NTConvert. Среди до­
                                     ступных вариантов                                         - None, LaTeX, reST, HTML, Markdown, Python
                                     и        Custom.




112          ЧАСТЬ              1             Знакомство со средой                                               Python
                   »     Slideshow (Слайд-шоу). Позволяет задать содержащийся в ячейке
                         тип слайда. Доступны следующие варианты:      Slide (Слайд), Sub-slide
                         (Подслайд), Fragment (Фрагмент), Skip (Пропустить) и Notes (Заметки).

                   ))    Attachments          (Вложения). Отображает список вложений текущей
                         ячейки. Например, в ячейки типа          Markdown можно добавлять изоб­
                         ражения или картинки.

                   ))    Tags     (Теги). Позволяет управлять тегами, связанными с каждой
                         ячейкой. Тег     -    это информационная метка, которая проясняет осо­
                         бенности ячейки и помогает ее классифицировать. Теги предназна-
  совет                  чены для пользователя; для         Notebook они ничего не означают. Их
                         нужно использовать согласованно, чтобы от них была польза.




Взаимодействие с ядром
  Ядро -            это сервер, который позволяет выполнять содержимое ячеек в
Notebook.        Обычно команды ядра отображаются в отдельном окне терминала,
как показано на рис.               5.5.

       - - - - - - - - - - - -:'l:ifl
    ::; JtJpyter Notelюok
                               ---
    [I 18 : 10:37 . 259 NotebookApp] 0 active kernels
    [I 18 : 10:37 . 259 NotebookApp] The Jupyter Notebook is running at :
    [I 18 : 10 :37 . 259 NotebookApp] http ://localhost :8888/?token=0c0e39afe3c8d1e23b9d1b
                                                                                                         J
   b9bcf50311e8cbdЧabe70Ч7f33
    [I 18 : 10 :37 . 259 NotebookApp] Use Control-C to stop this server and shut down all
     kernels (twice to skip confirмation) .
    [С 18 : 10:37 . 269 NotebookApp]


           Copy/paste this URL into your browser when you connect for the first time ,
           to login with а token :
                 http : //localhost : 8888/?token=0c0e39afe3c8d1e23b9d1bb9bcf50311e8cbdЧabe70
   Ч7f33dtoken=0c0e39afe3c8d1e23b9d1bb9bcf50311e8cbdЧabe70Ч7f33
   [I 18 : 10 : 38 . Ч80 NotebookApp] Accepting one-time-token-authenticated connection f
   rom : : 1
   [I 18 : 10 :52 . 951 NotebookApp] Kernel started : 22е85205-5аd0-Ч1dс-976с-Ч6dЬ63ЧЬс21
   d
    [I    18 : 10 : 5Ч . 298   NotebookApp] Adapting to protocol v5 . 1 for kernel 22e85205-5ade-
   Ч1dc-976c-Ч6db63Чbc21d
    [I 18 : 17 :21 . 359 NotebookApp] Starting buffering for        22e85205-5ad0 - Ч1dc - 976c - Ч6db
   63ЧЬс21d : е5Ч28695fЧ1еЧ80са2ас9аdЧ0181986с
    [I 18 : 17 :25 . 751 NotebookApp] Kernel s tarted :      Ь7а29Ыd-d3сс-Ч0а6-а2аа-555е1ЬЬ615с
   с

    [I 18 : 17 :27 . 105 NotebookApp] Adapting to protocol vS. 1 for kernel          Ь7а29Ыd - d3сс ­
   Ч0а6-а2аа-555е1ЬЬ615сс




                    Рис.   5.5. Команды ядра в отдельном окне Jupyter Notebook

  Каждая запись содержит следующие сведения: время выполнения задачи
ядром, название приложения, которое вызвало данную команду, выполняемая

задача и использованные ресурсы. В большинстве случаев с этим окном не


                                                             ГЛАВА 5     Работа с     Anaconda               113
выполняют никаких действий, но оно может оказаться полезным при возник­
новении ошибок, поскольку отображаемые в нем сообщения помогают иден­
тифицировать проблему.
  Управлять ядром можно по-разному. Например, при сохранении файла по­
сылается команда ядру, которое выполняет соответствующую операцию. Ниже
перечислены связанные с ядром команды, находящиеся в меню           Kernel   (Ядро).

          ))   lnterrupt (Прервать). Ядро прекращает выполнение текущей зада­
               чи, но само продолжает выполняться. Данную команду удобно ис­
               пользовать, если нужно приостановить обработку большого набора
               данных.

          ))   Restart (Перезапустить). Выполняется останов и перезапуск ядра.
               В результате будут потеряны значения всех переменных. Иногда это
               именно то, что нужно.

          ))   Restart & Clear Output (Перезапустить и очистить вывод). Выпол­
               няется останов и перезапуск ядра, а также очистка всех выходных

               данных ячеек.

          ))   Restart & Run All (Перезапустить и выполнить все). Выполняется
               останов и перезапуск ядра, после чего выполняются все ячейки от
                первой до последней. Как только   Notebook достигнет конца, будет
                выбрана последняя ячейка, но не произойдет вставка новой ячейки.

          ))   Reconnect (Подключиться повторно). Восстанавливает подключе­
                ние к ядру. Иногда по тем или иным причинам подключение про­
                падает, и данная команда позволяет восстановить подключение без
                потери значений переменных.

          ))    Shutdown (Закрыть). Закрытие ядра. Эту команду удобно приме­
                нять при подготовке к использованию другого ядра.

          ))   Change Kernel (Сменить ядро). Выбор другого ядра из списка
               установленных ядер. Например, можно тестировать приложение,
                используя различные версии Pythoп, что позволит убедиться в кор­
                ректности его функционирования на разных платформах.




Получение справки

  Справочная система в    Notebook     обеспечивает определенный уровень инте­
рактивности. Например, при выборе команды         HelpqUser lnterface Tour   (Справ­
каqQбзор интерфейса пользователя) мастер пройдет по различным элементам
текущего блокнота и сообщит об их функциональных возможностях. Это по­
зволит понять назначение каждого элемента.




1Ц.   ЧАСТЬ    1 Знакомство со средой Python
  Команда    HelpqKeyboard Shortcuts (СправкаqКомбинации                                                                   клавиш) отобража­
ет перечень комбинаций клавиш. Для перехода в командный режим нажми­
те клавишу   <Esc>       и введите необходимые для выполнения команды данные.
Например, комбинация клавиш                                      EscqF     отображает диалоговое окно
                                                                    Find and
Replace (Найти и заменить). Если выбрать команду HelpqEdit Keyboard Shortcuts
(Справкаq Изменить комбинации клавиш), появится диалоговое окно Edit
Command Mode Shortcuts (Изменить комбинации клавиш командного режима),
показанное на рис. 5.6. Оно служит для изменения способа работы Notebook
в командном режиме.




                        №ro уоц can mo<lfy lhe ~ shontlJts 1vв1161:11t ln command mode Your Chвt'lges Will Ье stored tor
                        tatef !ое5!51ОМ See more <ktaUs ofd&nnlng ke')'Ьoitrd 'thortc~t& Ье1оw




                     conlnn rest8l1 ktmel and run 111 cell:S
                     restal'f ~ 8nd tlelt outpul
                     conl'lrm r8Stttft kemel and c'8ar outj)LC




                     run С811 and lnИft Ь8IDw
                     nma!lcells




            Рис. 5.6. Изменение комбинаций клавиш в командном режиме


  Меню     Help   включает еще две команды. Команда                                                   Notebook Help            позволяет по­
лучить справку в Интернете по следующему адресу:

http://nbviewer.jupyter.org/githuЬ/ipython/ipython/ЫoЬ/3.x/
examples/Notebook/Index.ipynb

  Данный сайт включает учебные пособия и другие сведения о том, как эф­
фективно применять             Notebook.
  Команда    Markdown           переадресует вас на следующий сайт:

https://help.github.com/articles/
getting-started-with-writing-and-formatting-on-githuЬ/


  На этом сайте находится информация о форматировании содержимого ячеек
типа   Markdown.


                                                                                  ГЛАВА 5                Работа с            Anaconda    115
            В нижней части меню              Help    отображается традиционная команда
            About.    После ее выбора появляется диалоговое окно со сведениями
            о текущей установке. Самые важные сведения                  -    это используемые
  СОВЕТ
            версии     Python и Anaconda.          Данная информация может понадобиться
            для получения помощи от других пользователей                    Anaconda.
  Остальные пункты меню               Help   зависят от того, какие модули установлены
в данный момент. Они связаны с конкретными элементами     Python (начиная с
версии самого языка   Python). Также отображаются все популярные библиоте­
ки, такие   как NumPy и SciPy. Эти пункты справки помогают получать помощь
в процессе создания кода.




   НЕМНОГО ОБ АЛЬТЕРНАТИВЕ                    IPYTHON

  В главах      1-3   рассказывалось о применении командной строки               Python.   Ко­
  мандная оболочка         IPython   имеет такой же вид, но характеризуется рядом ин­
  тересных дополнений. Наиболее заметной особенностью является использо­
  вание цветового кодирования для вводимого кода (тем самым уменьшается
  вероятность ошибок). Например, команды отображаются зеленым цветом,
  а текст   -   желтым. Также выделяются цветом совпадающие скобки и другие
  блочные элементы, что позволяет видеть, какой именно блок закрывается в
  данный момент.

  Справочная система представляет собой еще одно различие между команд­
  ной строкой     Python и IPython. Вы получаете дополнительный доступ к справке,
  и сама справка более подробная. Одной из интересных особенностей является
  использование вопросительного знака после имени любого объекта    Python.
  Например, если ввести print?, то можно получить краткий обзор возмож­
  ностей команды print ().Если ввести?, то вы получите справку по IPython.

   В отличие от командной строки       Python, IPython поддерживает многие допол­
   нительные возможности         Notebook, например магические функции, которые
   рассматриваются далее. Эти специальные функции позволяют, в частности,
   изменять вид выводимых в          IPython   и   Notebook данных.   Короче говоря, если у
  вас часто возникает необходимость в использовании командной строки, ра­
  ботайте с     IPython.



Применение магических функций
  Notebook       и его аналог   IPython      располагают специальными функциями, ко­
торые называются магическими. Конечно, магия тут ни при чем, просто эти



116       ЧАСТЬ   1   Знакомство со средой           Python
функции действительно творят чудеса с выходными данными. Например, гра­
фический вывод, как по мановению волшебной палочки, можно отобразить не
в отдельном окне, а в ячейке (обычно ячейки содержат только текст). Или же
можно быстро проверить производительность приложения без написания до­
полнительного кода, который обычно требуется в подобной ситуации.
      Магическая функция предваряется знаком % либо %%• Функции со знаком
% действуют в масштабах рабочей среды, а функции со знаком %% применя­
ются на уровне ячейки. Для получения списка магических функций введите
%lsmaqic           в
              IPython или Notebook. В результате отобразится список, показан­
ный на рис. 5.7. (Заметьте, что в IPython применяются те же подсказки для
ввода, In, и вывода, Out, что и в Notebook.)



      IPython    6 . Ц.0   -- An enhanced Interactive Python .   Туре   '?'   for help.
     In [ 1 ] : 7.lsmagic
       ut[ 1] :                                                                                   J
     AvailaЫe line magics:
      .alias 7.alias_magic 7.autocall 7.autoindent 7.automagic 7.bookmark 7.cd 7.cls
       colors %config %сору %cpaste %ddir %debug %dhist %dirs 7.doctest_mode %
     echo %ed %edit 7.env 7.gui 7.hist 7.history 7.killbgscripts 7.ldir %load 7.lo
     ad_ext 7.loadpy %logoff 7.logon 7.logstart 7.logstate %logstop %ls %lsmagic
       7.macro 7.magic %matplotlib 7.mkdir %notebook 7.page 7.paste 7.pastebin 7.pdb
       7.pdef %pdoc Xpfile Xpinfo %pinfo2 %popd 7.pprint %precision %profile %р
     run %psearch Xpsource %pushd Y.pwd %pycat %pylab Y.quickref 7.recall 7.reha
     shx %reload_ext 7.ren 7.rep 7.rerun %reset %reset_selective %rmdir 7.run %в
       ve %sc %set_env 7.store %sx %system %tb %time 7.timeit Y.unalias %unload
     _ext %who %who_ls %whos %xdel %xmode
      vailaЫe cell magics :
     .%! 7.%HTHL 7..7.SUG %%bash %%capture %%cmd 7.%debug %7.file 7.7.html %7.javascr
     ipt 7.%js %7.latex %%•arkdown %%perl %%prun %%руру %%python %%python2 %%р
      thonЗ %%ruby %7.script    %%sh %%svg 7.7.sx %%system %%time %7.timeit %7.write
     file
       utomagic is ON, % prefix IS NOT needed for line magics .
      In [ 2]:

           Рис.    5.7.    Функция %lsmagicomoбpaжaem список магических функций



                  В    IPython работают не     все магические функции. К примеру, функция
                  %autosave       неактивна в среде     IPython,    поскольку здесь отсутствует
                  возможность автоматического сохранения.
    ЗАПОМНИ!



      В табл.      5.1     описаны наиболее распространенные магические функции.
Для получения полного перечня введите                     %quickref            при работе в   Notebook
и    IPython     или же обратитесь за по следующему адресу:

https://damontallen.github.io/IPython-quick-ref-sheets/


                                                           ГЛАВА    5     Работа с    Anaconda     117
Таблица   5.1. Распространенные маrические функции в Notebook и IPython




 %alias            Да         Назначает или отображает псевдоним для системной
                              команды


 %autocall         Да         Позволяет вызывать функции без ввода скобок. Име-
                              ет следующие настройки: Off, Srnart {по умолчанию)
                              и Full. В случае указания параметра Srnart скобки
                              нужны только при наличии аргумента


 %autornagic       Да         Позволяет вызывать магические функции без вво-
                              да знака процента {%). Имеет следующие настройки:
                              False (по умолчанию) и True

 %autosave         Да         Отображает или изменяет значение интервала между
                              автоматическими сохранениями блокнота. По умолча-
                              нию сохранение происходит каждые 120 секунд

 %cd               Да         Меняет текущий каталог. С помощью этой команды
                              можно перемещаться по истории каталогов или пе-
                              реходить к закладке


 %cls              Нет        Выполняет очистку экрана

 %colors           Нет        Задает цветовую схему для отображения текста, кота-
                              рый ассоциируется с подсказками, информационной
                              системой и обработчиками исключений. Доступные
                              варианты: NoColor (черно-белая схема), Linux (по
                              умолчанию) и LightBG

 %config           Да         Позволяет конфигурировать   IPython

 %dhist            Да         Выводит список каталогов, к которым выполнялось
                              обращение в ходе текущего сеанса

 %file             Нет        Выводит имя файла, содержащего исходный код дан-
                              ного объекта

 %hist             Да         Отображает список магических функций, которые вы-
                              зывались во время текущего сеанса


 %install          Нет       Устанавливает заданный модуль расширения
 ext

 %load             Нет        Загружает код приложения из другого источника, на-
                              пример из Интернета




U8       ЧАСТЬ 1    Знакомство со средой Python
                                                       Окончание табл.       5.1




%load ext     Нет   Загружает расширение    Python   с указанным именем
                    модуля


%lsmagic      Да    Отображает список доступных в настоящий момент
                    магических функций

%magic        Да    Отображает экран справки, содержащий информа-
                    цию о магических функциях

%matplotlib Да      Устанавливает модуль построения диаграмм, по-
                    зволяя отображать графики внутри ячеек блокно-
                    та. Возможные значения:     'gtk', 'gtkЗ ', 'inline ',
                    'nbagg ', 'osx ', 'qt ', 'qt4 ', 'qt5 ', 'tk' и 'wx'
%paste        Нет   Вставляет содержимое буфера обмена в командную
                    строку IPython

%pdef         Нет   Показывает, каким образом вызывается данный объ-
                    ект (при условии, что объект является вызываемым)

%pdoc         Нет   Отображает строку документации объекта

%pinfo        Нет   Выводит подробную информацию об объекте (часто
                    более подробную, чем предлагает справочная система)

%pinfo2       Нет   Выводит дополнительную информацию об объекте
                    (если она доступна)

%reload ext Нет     Повторно загружает предварительно установленный
                    модуль расширения


%source       Нет   Отображает исходный код объекта (при условии, что
                    он доступен)

%timeit       Нет   Вычисляет наилучшую производительность инструкции

%%timeit      Нет   Вычисляет наилучшую производительность для всех
                    инструкций ячейки, кроме той, которая находится в
                    одной строке с магической функцией (т.е. является
                    инструкцией инициализации)

%unalias      Нет   Удаляет из списка ранее созданный псевдоним

%unload ext   Нет   Выгружает указанный модуль расширения

%%writefile Нет     Записывает содержимое ячейки в указанный файл




                                    ГЛАВА   5 Работа с Anaconda          119
Обзор ВЫПОЛНЯЮЩИХСЯ процессов
   На главной странице                               Notebook,      где выбираются открываемые блокноты,
есть три вкладки. Обычно работают с вкладкой                                      Files (Файлы).   Вкладка      Clusters
(Кластеры) больше не используется, поэтому ее мы не рассматриваем. А вот
вкладка              Running                 (Выполняются) содержит полезную информацию о термина­
лах и открытых блокнотах (рис.                               5.8).
      JUpyter                                                                                            а...    ,,...

                 RlllVlШQ'        ," •• ,.


 Currentty runn1no Jupyter processes



  l'here   1.-. no termlntlt runnln;.



   li! fH'f'f)   ().4 r"нrm   '' tp~ Ь



 Рис. 5.8. Просмотр списка терминалов, подключенных к системе, и открытых
                                 блокнотов


   Терминалы появляются, только если сконфигурировать сервер в многополь­
зовательском режиме. В книге данный режим не рассматривается. Информа­
цию о работе с терминалами можно получить по следующей ссылке:

http://jupyter-notebook.readthedocs.io/en/latest/examples/
Notebook/Connecting%20with%20the%20Qt%20Console.html

   Самый важный элемент вкладки                                      Running -    список   Notebooks   (Блокноты).
Всякий раз при запуске нового блокнота его запись добавляется в список.
В данном случае работают два блокнота, оба на ядре                                     Python 3.

                              Здесь же имеется кнопка                Shutdown    (Остановить), предназначенная
                             для закрытия блокнота. Обычно блокнот закрывают с помощью ко­
                              манды           FileqClose and Halt   (ФайлqЗакрыть и остановить), чтобы из­
ВНИМАНИЕ!
                              бежать потери данных. Кнопка               Shutdown будет полезна, если блокнот
                              по какой-то причине перестал реагировать на действия пользователя.




120              ЧАСТЬ               1       Знакомство со средой       Python
Осн    вь1
п~    rрам­
     рования
на    у   on
В ЭТОЙ ЧАСТИ ...


))   Хранение данных и управление ими в памяти


))   Использование функций

))   Выбор среди нескольких вариантов


))   Многократное выполнение задач


))   Обнаружение и перехват ошибок приложения
Глава           6

Хранение и изменение
информации


 ))   Понятие о хранилище данных

 ))   Типы хранилищ данных

 )) Работа со значениями даты и времени




в "Create"
        главе   3 вы   познакомились с аббревиаrурой   CRUD, образованной от слов
                    (Создание),   "Read" (Чтение), "Update" (Обновление) и "Delete"
        (Удаление).     CRUD -      это акроним для запоминания основных опера­
ций, выполняемых компьютерными программами при работе с данными (или
информацией, что одно и то же).

           Чтобы информация была полезной, ее следует каким-то образом
           хранить, иначе при каждом выключении компьютера она будет ис­
           чезать. Более того,      Python   должен обеспечивать определенные пра­
3АЛОМНИI
           вила изменения информации, чтобы предотвратить некорректное
           выполнение приложений. В этой главе рассматриваются вопросы
           управления информацией, а именно способы ее постоянного сохра­
           нения и обработки пользовательскими приложениями. Исходный
           код примеров данной главы находится в файле           BPPD _о 6_ Storing_
           And_Modifying_ Information. ipynb         (см. введение).
Хранение данных

   Любое приложение должно иметь возможность получать быстрый доступ к
информации, иначе выполнение задач будет отнимать много времени. Прило­
жения хранят данные в памяти, однако оперативная память          -   это временное

хранилище, и перед выключением компьютера данные следует переносить на

постоянный носитель, например на жесткий диск, USВ-флешку, SD-карту или
в облачное хранилище в Интернете, такое как       Anaconda Cloud.    При этом нуж­
но учитывать тип данных        -   текстовый или числовой. В следующих разделах
подробно рассматриваются вопросы хранения данных.


Использование переменных
   Приложения хранят информацию в переменных, которые можно рассматри­
вать как ящики. Для изменения информации следует получить доступ к соот­
ветствующей переменной и сохранить в ней новое значение.

               В компьютерах все организовано очень компактно. Каждая перемен­
               ная хранит один элемент информации, благодаря чему найти необ­
              ходимые данные не составляет особого труда. В предыдущих главах
 ЗАПОМНИ!
              переменные не использовались, однако на практике большинство
               приложений работает с данными через переменные.



Правильный выбор переменных
   Люди далеко не всегда хранят свои вещи оптимальным образом. Например,
туфли порой можно найти в шкафу для одежды, а набор ручек             -   в коробке
из-под обуви.     Python   во всем любит порядок и аккуратность, поэтому числа
хранятся в одних переменных, а текстовые данные        -     в других. Несмотря на
то что в обоих случаях используются переменные, каждый тип переменной
предназначен для хранения определенного вида информации. Поэтому просто
запомните, что каждый тип данных хранится в специально предназначенной
для него переменной.

               Python   использует различные типы переменных для удобства про­
               граммирования. Сами по себе компьютеры ничего не знают о ти­
               пах данных. Все их знания сводятся к единицам и нулям, т.е. к на­
rоническиЕ
nодРО6Ности    личию или отсутствию сигнала в соответствующей ячейке памяти.
               На более высоком уровне компьютеры работают с числами, но это
               предел их возможностей. Вся информация касательно чисел, букв,




Щ           ЧАСТЬ 2   Основы программирования на    Python
                  дат, времени и всего остального в компьютерной системе сводится
                     к единицам и нулям. Например, буква А хранится в виде двоичного
                  числа          01000001     или десятичного числа                              65.


Основные типы данных
     Любой язык программирования, включая                                              Python,            определяет переменные
для хранения различных видов информации. Конкретная разновидность пере­
менной называется типом данных. Тип данных переменной определяет харак­
тер содержащейся в ней информации. Чтобы сохранить информацию опреде­
ленного вида, нужна переменная соответствующего типа. Например,                                                                       Python
не сохраняет текстовую информацию в переменной, предназначенной для хра­
нения чисел. Распространенные типы данных в                                                  Python -              числа, строки и бу­
левы значения. В следующих разделах будут рассмотрены стандартные типы
данных        Python.

Добавление информации в переменные
     Чтобы присвоить значение любой переменной, следует воспользоваться
оператором присваивания                         (=).   Основные операторы                                  Python       будут подробно
рассмотрены в главе                    7,   но с данным оператором нужно познакомиться уже
сейчас. Например, чтобы присвоить число                                          5    переменной myVar, в строке вво­
да   Python необходимо набрать myVar = 5                                         и подтвердить действие нажатием
клавиши    <Enter>. Внешне Python никак не                                       отреагирует на это, но можно про­
верить значение, содержащееся в переменной, как показано на рис.                                                               6.1.

      <   Jllpyter   BPPD_ 06_Storlng_And_Moditylng_lnformatlon ,",   °""""""" 2 ""'''" ...,.,, 1....,"....1
                                                                                                                                  1~'1o)I\   о
             ''

                  Добавление информации в переменные

                  myYar •
     1n    171    1 in (myV•rl




     Рис. 6.1. Использование оператора присваивания для занесения информации
                                                           в переменную




Знакомство с числовыми типами данных
     Люди мыслят общими категориями чисел. Для нас                                                             1   и   1,0 -   это одно и
то же число с той лишь разницей, что во втором случае используется деся­
тичная запятая. Тем не менее данные числа абсолютно одинаковы, а потому



                                            ГЛАВА      6    Хранение и изменение информации                                                  125
взаимозаменяемы. Но для                    Python         это разные типы чисел, и каждое из них об­
рабатывается по-разному. В следующих разделах рассматриваются следующие
числовые типы, поддерживаемые в                            Python:    целые, с плавающей точкой (здесь
используется десятичная точка, а не запятая) и комплексные.

Целые числа
   Любое целое число относится к целочисленному типу. Например, зна­
чение    1-     это целое число, а значит, целочисленный тип. С другой сторо­
ны,   1,0 -    не целое число, поскольку имеет дробную часть. Целочисленные
типы представлены типом данных                            int.

               Как и ящики, целочисленные типы имеют ограниченную ем­
               кость. При попытке записать слишком большое число в целочис­
               ленную переменную возникнет ошибка. На большинстве плат­
 ЗАПОМНИ!
               форм допускается хранение чисел типа                                   int в диапазоне между
              -9 223 372 036 854 775 808                      и   9 223 372 036 854 775 807      (максималь­
               ное значение, помещаемое в 64-разрядную переменную). Даже са­
               мое большое число не может быть бесконечным.

   Типу данных                int    присущ целый ряд интересных особенностей. Одна из
них   -     поддержка различных систем счисления.


                ))    Основание           2.   В качестве чисел используются только О и           1.
                ))    Основание           8.   Используются числа от О до             7.
                ))    Основание           10. Обычные числа.
                ))    Основание           16. Используются числа от О до 9 и буквы от А до F.

   Чтобы сообщить                   Python     об использовании недесятичной системы счисле­
ния, необходимо добавить к числу ведущий О и буквенный префикс. Например,
ОЫОО -        это двоичное            100 (десятичное 4).            Вот соответствующие префиксы:

                ))    Ь   -    основание        2;
                ))    о   -    основание        8;
                ))    х   -    основание        16.

   Числовые значения могут быть преобразованы в другие системы счисления
с помощью команд Ьin                  ( ) , oct ()    и   hex () . На   рис.   6.2   показаны варианты таких
преобразований. Попробуйте выполнить пример с другими числами, чтобы
понять, как он работает. Переход в другие системы счисления часто бывает
полезен, и в книге вам встретятся соответствующие примеры. А пока доста­
точно запомнить, что целочисленные переменные могут быть представлены
в различных системах счисления.




126         ЧАСТЬ 2       Основы программирования на Python
                Целые

    1n 1211 :   Te=it •          r1 1;p. uo
                prJnt (" 1•)('1          д&о;.{Чwо..:        ",    тest)




                ~r     n•       ("            .::~r:.1тнчн~        " , Te:!ltJ

                тest        •    ,м1

                r im 1"'                       :-т11о11д '"~"!iЧН':.1!:. ",      тe"tJ


                r r ~r.~ (t1r. (Te:!lt))
                ~       • (          · ITe.st) 1
                t"1    n· ( '        "- (Tes t )I

                1~ 0    даоичное:                 ~
                100     восьмеричное:                   64
                100     де СЯ't'И1'Ное:               100
                100     wвс11надцii1'rеричное:                    256
                оы оооооооо
                Оо 4 00
                Ox lOO




  Рис.    6.2. Целочисленные переменные имеют множество интересных свойств,
             включая возможность использования различных систем счисления




Числа с плавающей точкой

   Любое число, содержащее дробную часть, является значением с плавающей
точкой, например 1. О.                                              Python               хранит значения с плавающей точкой в типе дан­
ных    float.
                       Преимущество чисел с плавающей точкой над целыми числами за­
                        ключается в том, что они позволяют хранить как чрезвычайно боль­
                        шие, так и невероятно малые значения. При этом их емкость также
 ЗАЛОМ НИ!
                       ограничена. Максимальное (по модулю) значение, которое можно
                       записать в переменную типа                                                float,-±1,7976931348623157 х 10308 ,
                       а минимальное                                              -      ±2,2250738585072014 х 1о- 308 на большинстве
                        платформ.

   Существует несколько способов представления значений с плавающей точ­
кой. Самые популярные варианты                                                                -     непосредственное предоставление числа
и использование экспоненциальной записи. Во втором случае число отделяется
от экспоненты буквой е. На рис.                                                               6.3   показано несколько примеров. Обратите
внимание на то, что при использовании отрицательной экспоненты получается
дробное значение.

Комплексные числа
   Надеюсь, вы еще помните из школьного курса математики, что такое комплекс­
ные числа. Комn7ексное число состоит из вещественной и мнимой части. Осве­
жить в памяти сведения о комплексных числах можно по следующей ссылке:

https://ru.wikipedia.org/wiki/Koмплeкcнoe_чиcлo




                                                                         ГЛАВА            6   Хранение и изменение информации         U7
  ЗАЧЕМ НУЖНО СТОЛЬКО ЧИСЛОВЫХ ТИПОВ


  Многие молодые разработчики (да и некоторые ветераны тоже) не всегда по­
  нимают, зачем нужно несколько числовых типов и почему нельзя обойтись
  одним-единственным типом. Чтобы понять необходимость применения чис­
  ловых типов, попробуем разобраться, каким образом компьютер работает
  с числами.


  Целое число хранится в виде цепочки битов, которые непосредственно счи­
  тываются компьютером. Значение        0100   в двоичной системе равно   4   в деся­
  тичном эквиваленте. Числа с десятичным разделителем хранятся совершенно
  по-другому. Вспомните школьные уроки, на которых изучались экспоненты.
  Надеюсь, вы их не проспали, так как сейчас эти знания вам точно пригодятся.
  Число с плавающей точкой хранится как комбинация знакового разряда (плюс
  или минус), мантиссы (значащей части числа) и порядка, или экспоненты (пока­
  зателя степени   2). Для   получения значения с плавающей точкой используется
  следующее выражение:

  значение= мантисса* 2лпорядок

  Раньше в разных системах использовались разные форматы представления
  чисел с плавающей точкой, но сейчас применяется единый стандарт         IEEE-754.
  Детальное рассмотрение структуры чисел с плавающей точкой выходит за
  рамки данной книги. Тем, кому это интересно, рекомендуем обратиться по
  следующей ссылке:

  http://www.cprogramming.com/tutorial/floating_point/
  understanding_floating_point_representation.html
  Имеет также смысл самостоятельно поиграть с числами. Удобный конвертер
  чисел доступен по следующему адресу:

  http://www.h-schmidt.net/FloatConverter/IEEE754.htm l
  Щелкайте на флажках отдельных разрядов, чтобы понять, как установка соот­
  ветствующего разряда влияет на величину числа.


  В силу своей сложности числа с плавающей точкой обычно занимают больше
  места в памяти, чем целые числа. Кроме того, они обрабатываются медлен­
  нее. Наконец, целые числа имеют точное представление, тогда как числа с
  плавающей точкой иногда можно выразить лишь приближенно. Тем не менее
  ключевое преимущество чисел с плавающей точкой        -   возможность хранения
  огромных значений. В реальном мире никуда не деться от десятичных дробей,
  поэтому мы и используем числа с плавающей точкой. Целые числа использу­
  ются там, где необходимо уменьшить объем потребляемой памяти и ускорить
  работу приложения. В любом случае компромиссы просто неизбежны.




128   ЧАСТЬ 2      Основы программирования на Python
                          Значения с плавающей точкой

            In [1]:       Test =   255.О
                          рrint ( "Непосредственное       присваивание:         " , Test)

                          Test =   2.55е2
                          рrint ( "Экспоненциальная       запись:     " , Test)

                          Test =   2.55е-2
                          рrint ( "Отрицательная экспонента :            " , Test)

                          Непосредственное      присваивание :        255 . О
                          экспоненциальная      запись:     255 . О
                          Отрицательная      экспонента:     0 . 0 255

            Рис.     6.3. Существует несколько способов присваивания чисел
                                      с плавающей точкой

  Комплексные числа используются в следующих сферах:

                ))    электротехника;

                ))    гидроаэродинамика;

                ))    квантовая механика;

                ))    компьютерная графика;
                ))   динамические системы.


  Python -       один из немногих языков программирования, предлагающих встро­
енный тип данных для работы с комплексными числами. Наличие подобных воз­
можностей обеспечило          Python   популярность в качестве языка научных расчетов.
  Мнимая часть комплексного числа всегда содержит суффикс j. Если, на­
пример, нужно создать комплексное число, в котором                          3   будет вещественной
частью, а   4 - мнимой, то         это будет выглядеть следующим образом:

myComplex   =    3 + 4i
  Чтобы просмотреть вещественную часть переменной, просто введите
myComplex. real            в командной строке. Таким же образом для отображения
мнимой части переменной введите                myComplex. imaq.

  ОПРЕДЕЛЕНИЕ ТИПА ПЕРЕМЕННОЙ


  Иногда тип переменной невозможно определить на основе анализа исходно­
  го кода или же исходный код недоступен. В таком случае, чтобы определить
  тип переменной, воспользуйтесь методом                  type   ().Например, если записать
  значение      5    в переменную   myint     с помощью выражения            myint = 5,     а затем
  ввести    type (myint),      то мы получим      <class 'int '>,         т.е. переменная содер­
  жит значение типа         Int.


                                ГЛАВА      6 Хранение и изменение информации                      129
Булевы значения
  Компьютеры устроены так, что всегда дают прямые ответы на заданные
вопросы. Компьютер никогда не ответит "может быть". Любой ответ компью­
тера   -    это "верно" или "неверно". Существует раздел математической логики,
названный булевой алгеброй в честь английского математика Джорджа Буля.
Именно эта алгебра помогает компьютерам принимать решения. Впрочем,
сама булева алгебра появилась еще в          1854   году, задолго до изобретения ком­
пьютеров.

  В    Python     булевы значения представляются типом данных            bool. Перемен­
ная этого типа может содержать только два значения:          True и     False. Присвоить
значение можно с помощью ключевых слов              True и False либо путем создания
логического выражения, которое будет истинным или ложным. Например, в
результате выполнения выражения           myBool    =   1 > 2   переменная   myBool   станет
равна      False, поскольку 1 меньше, чем 2. Если концепция булевых переменных
пока не до конца вам понятна, не переживайте: в последующих главах мы
будем активно применять переменные типа             bool.

Строки
  Среди всех типов данных строковые значения лучше всего воспринимаются
человеком, притом что они совершенно непонятны компьютеру. Строка- это
группа символов, заключенных в кавычки. Например, выражение

myString     =   "Python -   великий язык программирования."


присваивает строку символов переменной             myString.
  Компьютер не понимает букв вообще. Каждая используемая буква пред­
ставлена в памяти определенным числом. Например, буква 'А' хранит­
ся в виде числа
             65. Чтобы увидеть это, в командной строке Python введите
print(ord("A")). В результате отобразится число 65. С помощью команды
ord () можно преобразовать любую букву в ее числовой эквивалент.
   Иногда требуется преобразовать строку в число. Для этого используются
команды   int () и float ().Например, если ввести myint = int ( "123"), будет
создана переменная myint типа int, содержащая число 123. На рис. 6.4 показа­
но, как проверить содержимое и тип переменной myint.
   В свою очередь, число можно преобразовать в строку с помощью команды
str ().Например,        если ввести   myStr = str (1234. 56),        будет создана стро­
ковая переменная        myStr,   содержащая значение      "1234. 56".   На рис.   6.5   пока­
зано, как выполнить такое преобразование и проверить тип переменной. Как
видите, можно достаточно легко переключаться между строками и числами.




130        ЧАСТЬ   2   Основы программирования на         Python
В последующих главах вы узнаете, как с помощью таких преобразований ре­
шать весьма нетривиальные задачи.


               Строки




               myi nt • " ("          ~ ~" )
               i·rint inyint

               print   (~   р.>   tay int) 1

               65
               123
               <cla~s       'int' >



                                                 Рис. 6.4. Преобразование строки в число



  l
  t
      1n ' ?1: :aystr -      o:•r(l .14
                   l rf- (111yscrl
                p;-_r:i" 1" vve (aaystrl 1


                ;;~:~:~ ·'tr'>
                                           ~f)




                              Рис. 6.5. Можно также преобразовать число в строку




Дата и время

      Все в нашей жизни основано на датах и времени. Мы планируем события и
назначаем встречи на определенные дату и время. Практически весь наш день
расписан по минутам. В связи с этим полезно узнать, как                                      Python   работает с
подобными величинами. Напомним, что компьютеры понимают только числа,
поэтому такого понятия, как дата и время, для них не существует.



                     Для работы со значениями даты и времени в                           Python   нужно подклю­
                     чить специальные средства. В частности, необходимо выполнить ко­
                     манду              import datetime.         Технически это называется Шvtnopmoм паке­
 ЗАПОМНИ!
                     та, о чем будет говориться в главе                   11.   А пока не беспокойтесь о том,
                     что такое пакеты. Просто используйте эту команду всякий раз, когда
                     возникает необходимость выполнить те или иные действия с датой
                     или временем.



      В каждом компьютере есть встроенные часы. От них зависит корректная
работа некоторых приложений, но все-таки они больше нужны пользователю,
а не компьютеру. Чтобы узнать текущее время, просто введите                                         datetime.
datetime. now ().Вы                                 получите полную информацию о дате и времени в том
виде, в каком они представляются в системе (рис.                                 6.6).




                                                     ГЛАВА   6   Хранение и изменение информации             131
              Дата и время

              1J!ll,Юrt   datetime
  1'" "       '1 n~ (d.ttet!irf. .dateti..rtм!. now t 1)

              2018-11 ·01 21: 54: 23.     2б4867




Рис.   6.6.   Получение текущих значений даты и времени с помощью команды                                    now ()

  Предположим, вам нужна только дата. Для этого введите                                            str (datetime.
datetime.now() .date())                                           (рис.   6.7).

 l •n 1141    pri'1

              2018-11-07
                          tr (dat.etime.datetime.now.().date()) 1




                                                 Рис.      6.7.   Извлечение текущей даты


  В    Python также есть                           команда          time (),с помощью которой можно определить
текущее время. При этом можно получить отдельные значения для каждого
компонента с помощью аргументов                                             day, month, year, hour, minute, second   и

microsecond. В последующих главах вы узнаете, как применять эти функции
для информирования пользователей о текущей дате и текущем времени.




132          ЧАСТЬ 2              Основы программирования на                           Python
Глава         7

Управление данными


 >) Просмотр данных в Python

 )>    Использование операторов для присвоения, изменения
       и сравнения данных


 >> Структурирование кода с помощью функций

 >)    Взаимодействие с пользователем




п
         ри работе с данными нам нужно иметь возможность присваивать значе­
         ния переменным, определенным образом модифицировать содержимое
         этих переменных и сравнивать получаемые результаты с тем, что мы

хотим получить. В этой главе будут рассмотрены все три аспекта управления
данными в приложениях.

  Также необходимо позаботиться о понятности кода. Да, можно написать
приложение в виде одной длинной процедуры, однако понять такую процедуру
будет крайне сложно, к тому же она будет содержать множество повторяющих­
ся фрагментов, поскольку некоторые этапы должны выполняться более одного
раза. Функции позволяют разбить код на компактные фрагменты, которые лег­
че понимать и повторно использовать.

      Еще одна важная задача   -   взаимодействие с пользователем. Конечно, су­
ществуют полезные приложения, совершенно не взаимодействующие с поль­
зователем, но это исключение из правила. Чаще всего приложению требуется
узнать, как пользователь хочет управлять данными. В этой главе мы поговорим
об организации такого взаимодействия, а в последующих главах будем неодно­
кратно возвращаться к данной теме.
Представление данных в                             Python
   Как объяснялось в главе       6,   компьютер хранит все данные в виде нулей и
единиц. Он не понимает, что такое буквы, булевы значения, дата, время и дру­
гие виды информации, кроме чисел. К тому же обработка чисел в компьютере
носит прямолинейный и упрощенный характер. При обработке строк                Python
преобразует их в форму, понятную компьютеру. Благодаря контейнерам дан­
ных, создаваемым в виде переменных,          Python   понимает, как обращаться с ну­
лями и единицами, которые хранятся в памяти компьютера. Важно понимать,
что   Python   рассматривает данные не так, как человек или компьютер.        Python
выступает в качестве посредника, который обеспечивает работу приложений.

              Для управления данными приложение должно контролировать спо­
              соб их представления в     Python.   Для этого используются операто­
              ры и функции, а также процедуры пользовательского ввода. И все
 3АЛОМНИI
              они основаны на выполнении сравнений. Чтобы определить, какое
              действие должно быть выполнено следующим, программа должна
              проверить текущее состояние переменной и сравнить его с тесто­
              вым значением. Если в данный момент переменная содержит имя
              "Джон", но вы хотите, чтобы это было имя "Мария", то сначала не­
              обходимо убедиться, что переменная действительно содержит имя
              "Джон". Только после этого можно принять решение о замене содер­
              жимого переменной именем "Мария".



Выполнение сравнений
   Основной способ выполнения сравнений в             Python   реализуется с помощью
операторов. Операторы также играют важную роль в управлении данными.
Ниже будет рассмотрено, как работают операторы и каким образом с их помо­
щью можно управлять данными. В следующих главах вы узнаете о том, как с
помощью операторов создавать приложения, которые могут принимать реше­

ния, выполнять повторяющиеся действия и взаимодействовать с пользователем
самыми разными способами. Ну а пока мы сконцентрируемся на применении
операторов для выполнения разного рода сравнений.
   В некоторых случаях сравнения выполняются довольно нестандартными
способами. Например, можно сравнивать результаты работы двух функций
(о чем рассказывается в разделе "Сравнение результатов выполнения функ­
ций"). В     Python   можно выполнять операции сравнения на нескольких уровнях,
что позволяет сосредоточиться на самой сути сравнения и определить реакцию




134         ЧАСТЬ   2 Основы программирования на Python
приложения на результат операции, а не погружаться в детали . Выбор способа
сравнения определяет способ просмотра данных в                Python   и возможные вари­
анты управления данными после получения результатов сравнения. На первый
взгляд, все это кажется сложным и непонятным, но не стоит заранее панико­

вать. Важно лишь знать, что сравнения необходимы приложениям для коррект­
ной обработки данных.


Как компьютеры выполняют операции сравнения
   Компьютеры не понимают структуризацию кода с помощью функций и
других структур , создаваемых в          Python.   Все это нужно исключительно для
удобства пользователя. Зато компьютеры напрямую поддерживают концепцию
операторов . Большинство операторов         Python     непосредственно связано с коман­
дами , которые обрабатывает компьютер. Например, если попросить компью­
тер сравнить два числа, то он с помощью оператора напрямую выполнит это

сравнение.



            Не все операции сравнения выполняются напрямую. Это связано
            с тем, что компьютеры работают только с числами. Поэтому, если
            попросить      Python   сравнить две строки, он фактически сравнит чис­
 ЗАПОМНИ!
            ловые значения каждого символа в строке. Например, буква А в
            действительности хранится как число             65 .   Строчная буква а имеет
            другое числовое значение:        97.   Поэтому, даже если кажется, будто
            выражение АВС эквивалентно авс, для компьютера это разные объ­
            екты, поскольку числовые значения отдельных букв различаются.




Работа с операторами
   Операторы служат основой для управления данными в приложениях. С по­
мощью операторов можно сравнивать между собой переменные и модифици­
ровать значения отдельных переменных. Операторы нужны для выполнения
математических задач и присвоения значений переменным.

            Оператору необходимо передать либо переменную, либо выражение.
            Как вы уже знаете, переменная          -   это, по сути, хранилище данных.
            Выражение       -   это уравнение или формула. Чаще всего результа­
 ЗАПОМНИ!
            том оценки выражения является булево значение (тrue или               False).
            В следующих разделах будут подробно описаны основные операто­
            ры   Python.



                                              ГЛАВА 7      Управление данными         135
Виды операторов
     Оператор получает на вход один или несколько элементов данных в виде
переменных или выражений, выполняет требуемое действие (к примеру,
сравнение или сложение) и выдает полученный результат. Операторы клас­
сифицируются как по типу операций, так и по числу получаемых элементов
данных. Например, унарный оператор работает с одной переменной или выра­
жением; бинарный оператор                -      с двумя.

              Элементы, подаваемые на вход оператора, называются операндами.
              Ниже представлены основные категории операторов, используемых
               в   Python:
 ЗАПОМНИ!

                   ))   унарные;

                   ))   арифметические;
                   ))   сравнения;

                   ))   логические;

                   ))   побитовые;

                   ))   присваивания;

                   ))   членство;

                   ))   тождественность.




Унарные операторы

     Унарные операторы в качестве операнда получают единственную перемен­
ную или выражение (табл.              7 .1 ).

Таблица 7.1. Унарные операторы Python

 Оператор          Описание                                       Пример


                   Инвертирует биты числа, в результате чего все Результат выражения
                   биты О превращаются в биты 1 и наоборот       -4 будет равен -5

                    Выполняет операцию отрицания для исходно­     Результат выражения
                    го значения, в результат чего положительные   - (-4) будет равен 4,
                   значения становятся отрицательными и нао­      а выражения   -4 - -4
                   борот

 +                 Поддерживается исключительно ради полно­       Результат выражения
                   ты. Возвращает значение операнда               +4 будет равен 4




136         ЧАСТЬ 2      Основы программирования на Pythoп
  ТЕРНАРНЫЙ ОПЕРАТОР В PYTHON


  Для тернарного оператора требуются три операнда. В Python поддерживается
  лишь один такой оператор, который служит для проверки истинности выраже­
  ния. Этот оператор имеет следующий синтаксис {вообще говоря, у него отсут­
  ствует определенное название, но, в принципе, его можно назвать оператором

  i f ... else):
  ЗначениеИстина         if   Выражение   else   ЗначениеЛожь

  Если результат проверки Выражения равен                True,   оператор вернет Значе­
  ниеИстина. Если же результат проверки Выражение будет                    False,   оператор
  вернет Значениеложь. Например, если ввести

  "Привет"   if True else       "Пока"

  то оператор вернет результат 'Привет'. Если же ввести

  "Привет"   if False else       "Пока"


  то оператор вернет      ' Пока'. Такой оператор удобен в тех случаях, когда нужно
  быстро принять решение, но нет желания писать длинный код.

  Одним из преимуществ Pythoп является наличие нескольких способов ре­
  шения одних и тех же задач. Альтернативная форма тернарного оператора
  в Pythoп имеет еще более короткий синтаксис:

   (ЗначениеЛожь,       ЗначениеИстина) [Выражение]


  Как и раньше, если Выражение равно             True,   оператор возвращает Значение
  Истина, в противном случае возвращается Зна чениеложь. Обратите вни­
  мание на то, что в этом случае операнды ЗначениеИстина и ЗначениеЛожь
  меняются местами. Пример такого синтаксиса выглядит следующим образом:

   ("Привет",      "Пока") [Истина]


  В данном случае оператор возвращает значение "Пока", поскольку оно соот­
  ветствует ЗначениюИстина. Из двух форм синтаксиса тернарного оператора
  первая более четкая и понятная, вторая          -   более краткая.



Арифметические операции

  Компьютеры применяются для выполнения сложных математических вы­
числений. Но любые сложные расчеты всегда основаны на более простых ма­
тематических операциях, таких как сложение.                   Python   обеспечивает доступ к
библиотекам, предназначенным для решения сложных математических задач,
но при желании можно создавать собственные библиотеки математических
функций с помощью простых операторов, перечисленных в табл.                         7.2.


                                                 ГЛАВА    7    Управление данными          137
Таблица 7 .2. Арифметические операторы Python

 Оператор           Описание                                                  Пример


 +                  Сложение двух операндов                                   5+2=7

                    Вычитание правого операнда из левого                      5-2=3

 *                  Умножение правого операнда на левый                       5 * 2 = 10

 /                  Деление левого операнда на правый                         5/2=2.5

 %                  Остаток от деления левого операнда на правый              5 %2 = 1

 **                 Возведение левого операнда в степень, задаваемую          5**2=25
                    правым операндом


 11                 Целочисленное деление левого операнда на правый           5//2=2
                    (с округлением вниз)



Операторы сравнения

     Операторы этой группы сравнивают два значения между собой и сообщают,
является ли проверяемое отношение истинным (табл.             7.3).   Например,   1 мень­
ше    2,   но   1 никогда не будет больше 2.   Операторы сравнения часто используют­
ся для принятия решений в приложениях.


Таблица 7 .3. Операторы сравнения в Python

 Оператор          Описание                                             Пример


                   Проверяет, будут ли два значения равны. Обрати-      1==2 дает False
                   те внимание на удвоение знака равенства. Ошибка
                   многих новичков заключается в использовании од-
                   ного знака равенства, что приводит к присваива-
                   нию одного значения другому


 !=                Проверяет, будут ли два значения не равны. В неко-   1 ! = 2 дает True
                   торых устаревших версиях Pythoп вместо операто-
                   ра ! =допускается использовать оператор<>. В со-
                   временных версиях Python это приведет к ошибке

 >                 Проверяет, будет ли значение левого операнда         1 > 2 дает False
                   больше значения правого операнда

 <                 Проверяет, будет ли значение левого операнда         1 < 2 дает True
                   меньше значения правого операнда




138         ЧАСТЬ    2   Основы программирования на Python
                                                              Окончание табл.    7.3

 Оператор      Описание                                         Пример


 >=           Проверяет, будет ли значение левого операнда      1 >= 2 дает False
              больше или равно значению правого операнда

 <=            Проверяет, будет ли значение левого операнда     1 <= 2 дает True
               меньше или равно значению правого операнда




Логические операции

  Логические операторы комбинируют булевы значения переменных или вы­
ражений, возвращая булево значение. Используя логические операторы, мож­
но создавать булевы выражения, которые помогают определить, нужно ли
выполнять те или иные действия в программе. Логические операторы описа­
ны в табл.   7.4.

Таблица 7 .4. Лоrические операторы Python

 Оператор     Описание                               Пример


 and          Проверяет, являются ли оба операнда    True and True равно True
              истинными (True)                       True and False равно False
                                                     False and True равно False
                                                     False and False равно False

 or           Проверяет, является ли один из опе­    True or True равно True
              рандов истинным (True)                 True or False равно True
                                                     False or True равно True
                                                     False or False равно False

 not           Инвертирует булево значение опе­      not True равно False
               ранда: истинное значение становится   not False равно True
              ложным, а ложное   -   истинным




побитовые операции
   Побитовые операторы работают с отдельными битами числа (табл.         7.5).   На­
пример, число 6 в двоичном (битовом) представлении выглядит так: ОЬ0110.
   Побитовый оператор определенным образом воздействует на каждый бит
числа. В битовой логике значение О рассматривается как ложное, а         1-      как
истинное.




                                           ГЛАВА 7   Управление данными          139
Таблица 7 .5. Побитовые операторы Pythoп

 Оператор     Описание                                        Пример


 & (И)        Выполняет поразрядное сравнение двух            ОЫlОО & ОЬ0110           =
              операндов, устанавливая бит результата в   1,   ОЬ0100
              если оба исходных бита равны 1

 1   (ИЛИ)    Выполняет поразрядное сравнение двух            ОЫlОО    1   ОЬ0110      =
              операндов, устанавливая бит результата в   1,   ОЫ110
              если один из исходных битов равен 1

 "(исклю-     Выполняет поразрядное сравнение двух            ОЫlОО "ОЬ0110 =
 чающее       операндов, устанавливая бит результата          ОЫОlО
 ИЛИ)         в 1, если ровно один из исходных битов ра-
              вен 1. Если же оба бита истинны или оба
              бита ложны, результирующий бит устанав-
              ливается равным О

 - (НЕ)       Инвертирует все разряды операнда                -ОЫlОО       =   -0Ы101
                                                              -ОЬ0110 =        -ObOlll

 «(сдвиг      Сдвигает биты левого операнда влево на          ОЬ00110011        « 2=
 влево)       число позиций, задаваемых правым опе-           ОЫ1001100
              рандом. Все новые биты устанавливаются
              равными О, а все отсекаемые биты теряются

 »(сдвиг      Сдвигает биты левого операнда вправо на         ОЬ00110011»2             =
 вправо)      число позиций, задаваемых правым опе-           ОЬ00001100
              рандом. Все новые биты устанавливаются
              равными О, а все отсекаемые биты теряются



Операторы присваивания

     Операторы присваивания заносят данные в переменную. Простой опе­
ратор присваивания рассматривался в предыдущих главах, но в                      Python    до­
ступен ряд других интересных операторов, которые могут параллельно вы­

полнять математические вычисления, благодаря чему можно комбинировать
присваивание с арифметическими операциями. Операторы присваивания
описаны в табл.       7.6.   В этой таблице начальное значение переменной MyVar в
столбце "Пример" равно          5.

Таблица 7.6. Операторы присваивания в Python

 Оператор     Описание                                             Пример


              Присваивает левому операнду значение правого         MyVar = 5
              операнда                                             Переменная          MyVar
                                                                   содержит        5


ЦО        ЧАСТЬ   2   Основы программирования на      Python
                                                              Окончание табл.      7.6

 Оператор   Описание                                          Пример


 +=         Добавляет значение правого операнда к значе-      MyVar   += 2
            нию левого операнда и присваивает результат ле- Переменная MyVar
            вому операнду                                     содержит     7
            Вычитает значение правого операнда из значе-      MyVar -= 2
            ния левого операнда и присваивает результат ле-   Переменная MyVar
            вому операнду                                     содержит     3
 *=         Умножает значение правого операнда на значе­      MyVar *= 2
            ние левого операнда и присваивает результат ле­   Переменная MyVar
            вому операнду                                     содержит     10
 /=         Делит значение левого операнда на значение        MyVar /= 2
            правого операнда и присваивает результат лево­    Переменная MyVar
            му операнду                                       содержит     2. 5
 %=         Делит значение левого операнда на значение        MyVar %= 2
            правого операнда и присваивает остаток от деле-   Переменная        MyVar
            ния левому операнду                               содержит     1
 **=        Возводит значение левого операнда в степень,      MyVar **= 2
            заданную правым операндом, и присваивает ре­      Переменная MyVar
            зультат левому операнду                           содержит     25
 1/=        Делит значение левого операнда на значение        MyVar / /= 2
            правого операнда и присваивает целочисленный      Переменная MyVar
            результат левому операнду                         содержит     2


проверка членства
  Операторы членства проверяют наличие значения в списке и возвращают
булево значение, соответствующее результату проверки. Это напоминает по­
иск в базе данных. Вы вводите значение, которое, по вашему мнению, должно
находиться в базе данных, а оператор сообщает о том, есть ли оно там. Опера­
торы членства описаны в табл.   7.7.

Таблица   7.7. Операторы членства

 Оператор Описание                                         Пример


 in         Проверяет, содержится ли значение левого       "Привет"   in   "Привет
            операнда в последовательности, заданной        Пока" равно     True
            правым операндом


 not in     Проверяет, отсутствует ли значение левого      "Привет"   not in
            операнда в последовательности, заданной        "Привет Пока" равно
            правым операндом                               False


                                        ГЛАВА 7   Управление данными              Ц.1
Проверка тождественности
  Операторы тождественности проверяют, относится ли значение или выра­
жение к определенному классу или типу. С их помощью вы сможете убедиться
в том, что действительно работаете с нужной информацией. Это позволит из­
бежать ошибок, вызванных несовместимостью типов, либо выбрать нужный
вид обработки для проверяемого значения. Операторы тождественности опи­
саны в табл.   7.8.

Таблица    7 .8. Операторы тождественности в Python

 Оператор      Описание                                                  Пример


 is            Возвращает True, если тип значения или выра-              type (2) is int
               жения правого операнда соответствует типу зна-            равно True
               чения или выражения левого операнда


 is not        Возвращает   True,    если тип значения или выра­         type(2) isnotint
               жения правого операнда не соответствует типу              равно False
               значения или выражения левого операнда




Приоритет операторов
      При создании простых инструкций, содержащих один оператор, определить
результат не составляет труда. Но при наличии нескольких операторов нужно
понимать очередность их выполнения. Например, чему равен результат вычис­
ления выражения  1 + 2 * З: 7 (операция умножения выполняется первой) или
9 (сначала выполняется сложение)? На основе приоритета операторов мож­
но сказать, что результат равен         7,   и изменить его можно только с помощью

скобок. Выражение        (1 + 2) *   З будет равно 9, поскольку скобки имеют более
высокий приоритет, чем операция умножения. В табл.                 7.9   операторы   Python
перечислены в порядке уменьшения приоритета.



Таблица    7 .9. Приоритет операторов Python

 Оператор                 Описание


 ()                       С помощью скобок можно группировать выражения
                          и переопределять заданный по умолчанию приоритет.
                          В результате операция с более низким приоритетом (такая,
                          как сложение) получает преимущество перед операцией
                          с более высоким приоритетом (например, умножением)

 **                       Возведение левого операнда в степень, задаваемую пра­
                          вым операндом




142      ЧАСТЬ   2    Основы программирования на        Python
                                                             Окончание табл.   7. 9

Оператор                Описание


 - +-                   Унарные операторы применяются к одной переменной
                        или одному выражению


 * / %11                Умножение, деление, остаток от деления (деление по
                        модулю) и целочисленное деление

+-                      Сложение и вычитание

 >> <<                  Побитовый сдвиг вправо и влево

 &                      Побитовое И

 л   1                  Побитовое исключающее ИЛИ и простое ИЛИ

 <= < > >=              Операторы сравнения

 == ! =                 Операторы равенства

 = %= /= 11= -= += *=   Операторы присваивания
 **=

 is is not              Операторы тождественности

 in not in              Операторы членства

 not or and             Логические операторы




Создание и использование функций
     Каждая строка создаваемого кода решает определенную задачу, и мы долж­
ны научиться правильно комбинировать эти строки для достижения требуе­
мых результатов. Иногда нужно повторять одни и те же инструкции с другими
входными данными, а в некоторых случаях код становится настолько длинным,

что отслеживать его работу становится слишком сложно. Функции позволяют
упорядочивать код, делая его аккуратным и понятным. К тому же они обеспе­
чивают возможность повторного использования ранее созданных инструкций
с другими данными. В этом разделе вы найдете все, что нужно знать о функ­
циях. И что еще более важно, здесь вы начнете создавать первое серьезное
приложение, используя те же приемы, что и профессиональные разработчики.




                                         ГЛАВА 7   Управление данными          143
Функции как средство упаковки кода
   Представьте себе, что в один прекрасный день вы подходите к шкафу, от­
крываете его дверцу, и на вас обрушивается гора вещей. Вам очень повезло,
что вы остались целы и невредимы. Еще немного, и шар для боулинга, кото­
рый лежал на верхней полке, нанес бы вам серьезные травмы! Тогда вы вспо­
минаете, что у вас есть выдвижные ящики, по которым можно разложить все

вещи. Обувь будет находиться в одном ящике, игрушки           -   в другом, а старые
открытки и письма         -   в третьем. Наведя порядок, вы сможете найти в шкафу
все, что вам нужно, не боясь получить травму. То же самое можно сказать и о
функциях: они наводят порядок в коде, позволяя легко видеть, что у вас есть, и
понимать, как это работает.

              Интернет изобилует комментариями о том, что такое функции и
              для чего они нужны, но если отбросить словесную шелуху, то все
              сводится к одной идее: функции являются средством упаковки кода,
 ЗАПОМНИ!
              позволяющим быстро находить нужный код. Это как полки в шкафу.
              Если вы аккуратно раскладываете вещи по полкам, то легко можете
              найти то, что вам нужно.


Повторное использование кода
   Представьте себе, что вы подходите к шкафу, достаете новые брюки и ру­
башку, срываете с них этикетки и одеваетесь. В конце дня вы снимаете все это
с себя и выбрасываете. Странно, да? В реальности мы поступаем по-другому:
мы снимаем с себя одежду, стираем ее, а затем вешаем в шкаф для повторного
использования. Функции тоже предназначены для повторного использования.
Никому не хочется постоянно писать один и тот же код, поскольку это скуч­
но. Создавая функцию, вы получаете блок кода, который можно использовать
множество раз для решения одной и той же задачи. Вы просто указываете ком­
пьютеру, какую функцию нужно выполнить. Компьютер послушно выполнит
каждую инструкцию в функции всякий раз, когда вы его об этом попросите.

              Код, который обращается к функции, называется вызывающи.«. Он
              должен предоставить функции определенную информацию, а функ-
              ция, в свою очередь, должна вернуть результат вызывающему коду.
 ЗАПОМНИ!



   В былые времена компьютерные программы не поддерживали концепцию
повторного использования кода, и программистам приходилось писать один и

тот же код снова и снова. Но потом нашелся кто-то, которому в голову пришла
идея функций. Эта концепция развивалась на протяжении многих лет, пока




144         ЧАСТЬ   2   Основы программирования на   Python
функции не стали достаточно гибкими, чтобы решать практически любые за­
дачи. Повторное использование кода позволяет:

                    ))   сократить время разработки;

                    ))   уменьшить количество программных ошибок;

                    ))   повысить надежность и эффективность приложений;

                    ))   предоставить программистам возможность использовать результа­

                         ты работы друг друга;

                    ))   упростить код.


  Работая с примерами книги, вы увидите, насколько повторное использова­
ние кода упрощает жизнь программисту. Без этой технологии нам пришлось
бы постоянно набирать огромные фрагменты кода вручную.


Определение функции
  Создать функцию не так уж и сложно. Благодаря                              Python   это не потребует от
вас много времени и сил. Порядок действий таков.

 1.        Создайте новый бnокнот в Notebook.
           Исходный код примеров этой главы находится в файле                     BPPD_ 07 _ Managing
           Information. ipynb                (см. введение).

 2.        Введите def Hello () : •
           Мы сообщаем            Python о том, что создается функция Hello. Скобки важны, по­
           скольку они определяют способ использования функции. (В данном случае ей
           не передаются никакие аргументы.) Двоеточие завершает объявление функ­
           ции (рис.     7.1 ).   Обратите внимание на то, что указатель вставки теперь имеет
           отступ. Это служит напоминанием о том, что нужно ввести код функции.


       Ju pyte r         ВРРО _ 07_Managing_lnformation Last Checkpoint 2 часа назад (autosaved)

   f~1le      СtИ        View      l11sert     Cell   Кепшl     W1dyвl~   Help




                     Создание и использование функций

                     Определение функции

       In [1]:       def Hello():




                                        Рис.   7. 7. Указание имени функции


                                                               ГЛАВА 7    Управление данными         145
 3.     Введите print ("Первая фун1еция            Python ! ").
        Указатель вставки по-прежнему имеет отступ (рис.             7.2), поскольку Notebook
        ожидает, что ввод тела функции еще не закончен.




                 Создание и использование функций

                 Определение функции

      In [ ] :   de~    Hello() :
                       print (" Пepвaя   функция   Python! ")



                   Рис. 7.2. Notebook ожидает следующей инструкции

 4.     Щелкните на кнопке Run Cell (Выполнить ячейку).

        На этом создание функции завершено.

  Несмотря на простоту эта функция демонстрирует шаблон, по которому
создается любая функция             Python.    Необходимо определить имя функции, ука­
зать ее аргументы (в данном случае отсутствуют) и ввести ее код. Определение
функции завершится, когда курсор ввода будет находиться слева или произой­
дет переход к следующей ячейке.


Получение доступа к функциям
  После создания функции вам захочется проверить ее в работе. Для начала
нужно понять, как получить доступ к функции. В предыдущем разделе была
создана новая функция Hello (). Чтобы вызвать ее, введите                       Hello ()   и щел­
кните на кнопке Ruп          Cell   (Выполнить ячейку). На рис.          7.3   показан результат
выполнения этой функции.


                                    Доступ к функциям

                         In [2]:    Hello ()

                                    Первая функция    Python!

                       Рис. 7.3. После ввода имени функции отобразится
                                    результат ее выполнения



  Другие функции применяются аналогичным образом. Нужно ввести имя
функции, открывающую скобку, требуемые аргументы и закрывающую скобку,



Ц.6      ЧАСТЬ 2        Основы программирования на              Python
после чего нажать клавишу   <Enter>. В данном случае аргументы отсутствуют,
поэтому достаточно ввести   Hello () . В последующих разделах будут рассмо­
трены другие примеры, для которых требуется ввод аргументов.


Передача информации функциям
  Пример функции     Hello (), рассмотренный в предыдущем разделе, хорош
тем, что вам не придется вводить длинную строку каждый раз, когда нужно
11росто сказать Hello (). В то же время возможности этой функции сильно
ограничены, т.к. она способна выводить лишь одну строку. В идеале функции
должны быть достаточно гибкими и допускать возможность настройки,
иначе придется создавать множество функций, которые будут различаться
в зависимости от получаемых данных, а не выполняемых операций. Благода­
ря аргументам можно создавать гибкие функции, работающие с различными
данными.



Аргументы функции
  Аргуrо,~еитом называется элемент информации, представляемой функции. По
сути, это входные данные, с которыми работает функция. Благодаря аргумен­
там функция становится более гибкой.
  Функцию    Hello () трудно назвать гибкой, поскольку она выводит на экран
ровно одну строку. Чтобы придать этой функции необходимую степень гибкос­
ти, нужно добавить к ней аргумент. Это позволит передавать функции различ­
ные строки, задаваемые пользователем.

  Чтобы увидеть, как работают аргументы, создайте в блокноте новую функ­
цию Hello2 (). Она представляет собой модифицированную версию функции
Hello (), которая требует наличия аргумента.
def Hello2( Greeting):
    print(Greeting)

  Заметьте, что на этот раз скобки не пусты. В них содержится слово
Greeting, которое является аргументом функции Hello2 (). Аргумент Greeting
фактически является переменной, которую можно передать функции print (),
чтобы вывести содержимое аргумента на экран.

передача требуемых аргументов
  Итак, у нас появилась новая функция      Hello2 (), для вызова которой тре­
буется задать аргумент. Но что если обойтись без него? Введите      Hello2 ()   и
щелкните на кнопке   Run Cell   (Выполнить ячейку). Это приведет к появлению
сообщения об ошибке, показанного на рис.    7.4,   в котором говорится о том, что
функция   Hello2 () требует наличия аргумента.


                                         ГЛАВА 7    Управление данными       147
  In [ 4]:   Hello2 ()


             T~rror                                                  Traceback (most recent call last)
             <ipython-input-4-62Ь0700617ba.>             in          ()
             ---->     1 Hello2 ()

             TypeError: Hello2() mi55ing 1 required po5itional argument: 'Greeting'


         Рис.   7.4.   Если не задать аргументы, появится сообщение об ошибке


  Как видите,          Python   сообщает не только о том, что аргумент отсутствует, но
и о том, как он называется. Определение созданной нами функции требует обя­
зательного указания аргумента. Введите                        Hello2       ( 11 ЛlобоПЫ'l'н&J1 фуиJСЦИЯ. ")
и щелкните на кнопке             Run Cell       (Выполнить ячейку). На этот раз результат бу­
дет таким, как нам нужно. Но мы еще не знаем, будет ли функция                                   Hello2 (}
достаточно гибкой, чтобы выводить на экран разные сообщения. Введите
Hello2 ( "Друrое             сообщение            ... ")      и снова щелкните на кнопке          Run Cell.
Результат показан на рис.             7.5.      Как видите, функция             Hello2 (} является улуч­
шенной версией функции               Hello (}.


                            In [27] :         Hello2    (" Любопытная      функция .")


                                          Любопытная          фунЮJ,Ия.



                            I n [28 J :       Hel 102   (" Другое   сообщение    . .. ")

                                          Другое        сообщение    ...


                            Рис. 7.5. Использование функции Hello2 ( }
                              для вывода произвольного сообщения

  Исходя из приведенных примеров можно предположить, что аргумент
Greeting может быть лишь строкой. Но если ввести Hello2 (1234) и щел­
кнуть на кнопке Run Cell, то функция выдаст 1234. А если ввести Hello2 (5 +
+ 5), то функция вернет результат вычисления выражения, т.е. 10.
Передача аргументов по ключевому слову
  По мере того как ваши функции будут становиться все более сложными, а
способы их использования                  -     более изощренными, вы захотите точнее кон­
тролировать, как вызываются функции и как им передаются аргументы. До
сих пор мы        использовали позиционные аргументы, значения которых пре­

доставлялись в порядке их появления в списке аргументов функции. Наряду
с этим   Python        поддерживает передачу аргументов по ключевому слову, или



Ц.8      ЧАСТЬ 2         Основы программирования на Python
именованных аргументов. В данном случае указывается имя аргумента, за ко­
торым следуют знак равенства(=) и значение аргумента. Чтобы увидеть, как
все это работает, введите в блокноте код следующей функции.

def Addlt(Valuel, Value2):
    print(Valuel, "+ ", Value2, "= ",           (Valuel + Value2))

      Обратите внимание на то, что функция         print ()   включает список выводи­
мых на экран элементов, разделенных запятыми. К тому же эти аргументы раз­
ных типов. В     Python   можно легко сочетать аргументы подобным образом.
   А теперь протестируем функцию Addit ().Сначала попробуем выполнить
функцию с позиционными аргументами, поэтому введите                Addit (2, 3)    и щел­
кните на кнопке     Run Cell.    В результате появится ожидаемый вывод 2          + з = 5.
Теперь введите    Addit (Value2       =З, Valuel =2)         и снова щелкните на кнопке
Run Cell.   Вы опять получите результат      2+з   = 5,   несмотря на то что аргументы
поменялись местами.


Присваивание аргументам функции значений по умолчанию
      Независимо от того, с какими аргументами мы имели дело (позиционны­
ми или именованными), функции требовали указывать значения аргументов.
Но иногда функция вполне может использовать значения, заданные по умол­
чанию. Это позволяет упростить вызов функций и уменьшить число ошибок,
связанных с отсутствием требуемых данных. Значение, используемое по умол­
чанию, указывается после имени аргумента. Чтобы увидеть, как это работает,
введите в блокнот следующую функцию.

def    HelloЗ (Greeting   =   "Значение отсутствует"):
       print(Greeting)

      Это еще одна версия функции Hello (), только на этот раз функция автома­
тически компенсирует ошибки пользователей, которые не указывают значение
аргумента. Если кто-то попытается вызвать функцию HelloЗ () без аргумента,
то это не приведет к возникновению ошибки. Введите HelloЗ () и убедитесь
сами. Далее введите HelloЗ ( "C'l'poxa"), чтобы получить обычный отклик.
Если полагаете, что функция способна работать только со строками, то введите
HelloЗ      (5) и убедитесь в обратном. Затем введите HelloЗ (2         + 7).   Результат
выполнения всех этих тестов показан на рис.          7.6.
Соэдание функций с переменным числом аргументов
      В большинстве случаев количество аргументов функции точно известно.
С такими функциями проще работать, и их легче отлаживать. Но иногда ко­
личество аргументов невозможно определить заранее. Например, при созда­
нии утилиты командной строки мы предполагаем, что пользователь может не



                                              ГЛАВА 7       Управление данными        149
указать ни одного аргумента, задать максимальное •шсло аргументов (при
условии, что их больше одного) или произвольное число аргументов.


      I11 [25]:   det      Rell oЗ (Greeting "'   "~нач<"шtе отсутстаует" ):
                           print( Greeting


      In [26]:    HelloЗ     ()
                  RelloЗ ( "Стрrка" )
                  HelloЗ     (5)
                  HelloЗ     (2 + 1 )

                  значение        отсутствует
                  Строка

                  5
                  9


       Рис.   7.6.    Старайтесь предоставлять аргументам функции значения по
                            умолчанию всегда, когда это возможно


   К счастью,           Python          позволяет передавать функции переменное число аргу­
ментов. Для этого достаточно поставить звездочку          ( *) перед именем аргумен­
та, например           *VarArgs. В таких случаях обычно имеется второй аргумент, за­
дающий общее количество переданных аргументов. Ниже приведен пример
функции, которая может выводить на экран переменное число элементов. (Не
переживайте, если не можете полностью разобраться в работе функции; пони­
мание наступит позже.)

def Hello4 (ArgCount, *VarArgs):
    print ("Передано аргументов: ", ArgCount)
    for Arg in VarArgs:
       print (Arg)

   В этом примере мы используем цикл                            for,   который будет подробно рассмот­
рен в главе       9.   Пока что вам достаточно знать, что аргументы берутся из списка
VarArgs по одному, значения отдельных аргументов помещаются в переменную
Arg, а затем значение переменной Arg выводится с помощью функции print ().
Нас больше всего интересует, как обрабатывается переменное число аргументов.
   После того как функция будет добавлена в блокнот, введите                              Hello4 ( 1 ,
"Тес'l'овая С'l'ро:ка.                  ") и щелкните на кнопке Run Cell (Выполнить ячейку).
Функция должна сообщить о том, сколько аргументов ей передано, и вывес­
ти тестовую строку                  -     ничего необычного. А теперь введите             Hello4   (З,
"Один", "Два", "Три") и убедитесь в том, что функция корректно обраба­
тывает переменное число аргументов (рис.                            7.7).

Возврат информации из функций
  Функции могут выводить данные на экран или же возвращать их вызыва­
ющему коду, который будет выполнять дальнейшую обработку. Обычно имеет


150       ЧАСТЬ        2     Основы программирования на                     Python
место и то и другое. Способ работы функции зависит от задачи, которую она
должна решать. Например, математическая функция с большей вероятностью
вернет данные вызывающему коду.



                Создание функций с переменным числом арrументов

   In [ 5]:     def Hello 4(ArgCount, *VarArgs):
                       print ( "Пepeдaнo      аргументов:       " , ArgCount)
                       for Arg in VarArgs:
                          prinr: (Arg)

   In   [6]:    Hello4 (1 ,      "Тестовая    строка.")


                Передано       аргументов:      1
                Тестовая       строка.



   In [7]:      Hello4 ( 3 ,     "Один" ,   "Два" ,   "Три ")


                Передано       аргументов:       3
                один
                Два

                Три



    Рис. 7.7. Функции с переменным числом аргументов позволяют сделать
                           приложения более гибкими


  Чтобы вернуть результат, функция должна включить инструкцию                             return,
в которой указываются возвращаемые данные. Не существует ограничений
на тип возвращаемого результата. Функция может возвращать следующие
результаты.


               >>   Значение. Это может быть любое значение: число, например    1 или
                    2. 5, строка вида "Привет всем" или же булево значение, такое как
                    True   или   False.
               »    Переменная. Содержимое любой переменной действует так же, как
                    и непосредственно указанное значение. Вызывающий код получит
                    данные, хранящиеся в переменной.

               »    Выражение. Многие программисты используют выражения для
                    сокращения кода. Например, можно напрямую вернуть результат
                    выражения А+ в, вместо того чтобы вычислять его в отдельной ин­
                    струкции, присваивать результат переменной, а затем возвращать
                    эту переменную вызывающему коду. Выражение                  -   более короткий
                    путь решения той же задачи.

               »    Результат, возвращаемый другой функцией. Функция может воз­
                    вращать результаты других функций, вызываемых в ее коде.




                                                      ГЛАВА 7    Управление данными            151
   Пора узнать, как возвращать значения из функций. В блокноте введите сле­
дующий код.

def DoAdd(Valuel, Value2):
    return Valuel + Value2

   Функция DoAdd получает два значения в качестве входных данных и возвра­
щает сумму этих значений. Понятно, что такую простую задачу можно решить
и без помощи функции, но у нас другие цели. Чтобы протестировать функцию,
введите       print ("Сумма значений З + 4 равиа ", DoAdd(З, 4)) и щелкните
на кнопке Run      Cell (Выполнить ячейку). Результат выполнения кода показан на
рис.   7.8.

                               Возврат информации из функций

               In [12]:        def DoAdd(Valuel , Value2):
                                   return Valuel + Value2

               In [18):        print     ( "Сумма   значений 3     + 4    равна    "   DoAdd( З , 4 ))


                               Сумма      значений    3 + 4    равна      7

                 Рис.   7.8.   Функции становятся еще более полезными, когда
                                            возвращают значения



Сравнение результатов выполнения функций
   Функции, возвращающие значения, могут применяться по-разному. Напри­
мер, в предыдущем примере результат функции становился аргументом другой
функции. Функции можно также применять для выполнения сравнений, созда­
вая логические выражения.

   Чтобы понять, как это работает на практике, воспользуемся функцией
DoAdd () из предыдущего раздела. Введите print ( "З + 4 равио 2 + 5 бу­
де'l'", (DoAdd (З, 4)               ==
                        DoAdd(2, 5))) и щелкните на кнопке Run Cell (Вы­
полнить ячейку). Как показано на рис. 7.9, 3 + 4 действительно равно 2 + 5.
Цель этого примера              -    показать, что функции являются достаточно универ­
сальными инструментами, которые можно использовать самыми разными спо­

собами. Благодаря функциям код приложения становится гибким и удобным.


                   Сравнение результатов выполнения функций

       In [15]:    print ( "З       + 4    равно    2 + 5   будет" ,     (DoAdd( 3 , 4 ) = DoAdd( 2 , 5 )))

                   3 + 4       равно      2 + 5   будет     True

       Рис.   7.9. С помощью функций можно решать самые разнообразные задачи

152       ЧАСТЬ 2        Основы программирования на                       Python
Получение пользовательского ввода

   Лишь немногие приложения существуют в изолированном компьютерном
мире. Большинство приложений активно взаимодействует с пользователями ,
поскольку именно для этого и нужны компьютеры. Чтобы организовать взаи­
модействие с пользователем, приложению нужно каким-то образом получать
от него данные. К счастью, это достаточно легко реализовать с помощью функ­
ции   input ().

                Функция        input ( )   всегда возвращает строку. Даже если пользователь
                вводит число, функция  input () преобразует его в строку. Это оз­
                начает, что для получения числа результат функции input ( ) нужно
 ЗАПОМНИ!
                преобразовать обратно из строки в число. Также функция input ()
                позволяет отобразить подсказку ввода. Назначение этой подсказ­
                ки   -    сообщить пользователю о том, какая информация от него ожи­
                дается. В следующем примере показано, как применять функцию
                input ().
                Name     =   input   ("Укажите свое имя:            ")
                рrint("Привет,          ", Name )

   В данном случае функция                     input ()     запрашивает имя пользователя. После
того как пользователь укажет свое имя и нажмет клавишу                                    <Enter>, программа
сформирует для него персональное приветствие.                                  На рис. 7 .1 О показаны резуль­
тат работы программы.



                  Получение пользовательского ввода

    In   [8]:     Name -      inрut (" Укажите      свое     имя:        " )
                  print ( "Пpиeeт,         ", Name)

                  Укажите      с в ое   имя:   Алекс андр
                  Привет,       Александр



         Рис.   7. 1О.   Укажите имя пользователя, чтобы получить персональное
                                                 приветствие



   Функцию           input ()    можно использовать для ввода других типов данных, но
в таком случае нужно позаботиться о соответствующем преобразовании. Ниже
показан соответствующий пример.

ANumЬer =       float ( input ("Введите          чи сл о:    " ))
print ( "Bы ввели:       ", ANumЬer)




                                                            ГЛАВА 7            Управление данными         153
  После запуска этого примера приложение попросит вас ввести число, но
фактически функция input () принимает строковые данные. С помощью функ­
ции    float ()      введенные данные преобразуются в число. После выполнения
преобразования функция                      print () выводит результат. Если попробовать ввести
число, например 5. 5, все будет работать корректно.

                 Преобразование данных сопряжено с определенным риском. Если
                 вы попытаетесь ввести что-то кроме числа, то получите сообщение
               об ошибке, как показано на рис.                             7 .11.   В главе    1О   будет показано,
ВНИМАНИЕ!
                 как обнаружить и исправить ошибки до того, как они вызовут сбой
                 приложения.




      In [17):    ANumЬer а float ( input ( "Bвeдитe число:" ))
                  print ( "Et11   вве;гл:   ",   ANumЬer)


                  введите     число:    Привет




                  ValueError                                                  Traceback (most recent call last)
                  <:i.python-input-17-Зb5a480!85e4>               in           ()
                  ---->   1   ANumЬer   =    fl oat ( input (" Вaeди're   'IИano : " )
                              print (''&I    •в41!.mr :   "   АNшпЬеr


                  ValueError: could not convert string to float :                   'Привет'



      Рис.   7. 11. Некорректное преобразование данных может привести к ошибке




154          ЧАСТЬ   2 Основы программирования на Python
Глава         8

Принятие решений


 >> Принятие простых решений с помощью инструкции i f

 >> Принятие сложных решений с помощью блока i f ... el s e

 »   Вложенные инструкции




в
         любом деле важно уметь принять верное решение или выбрать правиль­
         ный путь решения задачи. С помощью математических вычислений
         компьютер получает полезную информацию, но для ее обработки нуж­
но принимать различные решения, поэтому в любом языке программирования
закладывается возможность принятия решений, реализуемая тем или иным
способом. В этой главе рассматриваются способы принятия решений в            Python.
Исходный код примеров данной главы находится в файле           BPPD_О 8_ Ма king_
Decisions. ipynb (см. введение).
             Процесс принятия решений должен быть хорошо продуманным. По­
             лучая фактическое значение той или иной переменной, пользователь
             сравнивает его с тестовым значением и затем выполняет соответ­
 ЗАПОМНИ !
             ствующие действия. В реальной жизни, видя красный свет светофо-
             ра, вы понимаете, что это не зеленый свет, а потому останавливае­
             тесь и ждете, пока не загорится зеленый свет. Большинство людей
             даже не задумываются о подобного рода вещах, поскольку они дав­
             но превратились в рутину. Для человека принятие решений стано­
             вится привычкой, компьютеры же выполняют следующий алгоритм.

             1.   Получение фактического значения того или иного элемента.
             2.   Сравнение фактического значения с проверочным.

             3.   Выполнение действия в соответствии с результатом сравнения.
Принятие простых решений
с помощью инструкции                                 if
      Инструкция            if является самым простым инструментом принятия решений
в Python. Ее суть            сводится к тому, что если проверяемое выражение истинно,
то Python должен             выполнить дальнейшие действия. В следующих разделах по­
казано, как применять инструкцию                if. Вы удивитесь тому, насколько велики
ее возможности.



Знакомство с инструкцией                    if
      Мы незаметно для самих себя постоянно применяем инструкцию if в по­
вседневной жизни. К примеру, вы говорите себе: "Если сегодня среда, то на
обед я съем салат с тунцом". В            Python   инструкции if не столь многословны,
хотя и строятся по такому же образцу. К примеру, мы создаем переменную
TestMe и присваиваем ей значение 6:
TestMe = 6

      Теперь попросим компьютер проверить, содержит ли переменная TestMe
значение         6.
i f TestMe        == 6:
      рrint("Значение переменной         TestMe   равно   6!")

      Видя ключевое слово if,          Python   понимает, что от него требуется принять
определенное решение. После слова                 if стоит условие, которое конкретизиру­
ет, какого рода сравнение должен выполнить                 Python.    В нашем примере   Python
должен определить, содержит ли переменная                  TestMe     значение   6.

                  Еще раз обратите внимание на использование оператора равенства
                  ==,   а не оператора присваивания       =.   Довольно часто программисты
                  путают их. Список операторов сравнения приводился в главе             7.
    ЗАПОМНИ!


      Условие всегда заканчивается двоеточием             (: ).   Если не поставить двоеточие,
Python         не поймет, что это конец условия, и будет продолжать искать дополни­
тельные условия, требуемые для принятия решения. После двоеточия следует
перечень инструкций, которые должен выполнить                       Python.   В данном примере
Python сообщает,             что значение переменной TestMe равно 6.


Использование инструкции                     if
      В   Python      инструкция if может использоваться по-разному. Ниже представ­
лены три наиболее распространенных способа.


156            ЧАСТЬ    2    Основы программирования на           Python
               ))    Проверка единственного условия и выполнение одной инструкции,
                     если условие истинно.


               ))    Проверка единственного условия и выполнение нескольких ин­
                     струкций, если условие истинно.

               ))    Проверка нескольких условий и выполнение одной или нескольких
                     инструкций, если комбинированное условие истинно.

     В следующих разделах будут рассмотрены все три варианта. Примеры ис­
пользования инструкции          if будут неоднократно встречаться на протяжении
всей книги, поскольку это ключевой инструмент принятия решений.

Работа с операторами сравнения
     Оператор сравнения проверяет, как значение левого операнда соотносит­
ся со значением правого операнда. После выполнения сравнения он выдает
результат     True или False. Например, выражение 6 == 6 истинно, а выражение
5   == 6 ложно.  Чтобы создать инструкцию if, выполните следующие действия.

    1.   Откройте новый блокнот.

         Можете также воспользоваться файлом исходного кода                    BPPD_ 08 _ Making_
         Decisions. ipynb    (см. введение).

    2.   Введите выражение Testмe          =б.
         Переменной     TestMe будет присвоено значение 6. Заметьте,             что вместо опера­
         тора равенства здесь используется оператор присваивания.

    З.   Введите if Testмe     == б:.
         Будет создана инструкция       if,   которая проверяет значение переменной
         Testмe с помощью оператора равенства. Отметим две особенности блокнота
         в данный момент:

         •   слово   i f выделено другим   цветом;

         •   следующая строка автоматически выравнивается с помощью отступа.

    4.   Введите prin t ( 11 Значение переменной Тез tме равно б 11 )              •


         Заметьте, что Pythoп пока не выполняет инструкцию               if.   Вместо этого он вы­
         равнивает следующую строку отступом. Слово              print   выделяется другим цве­
         том, поскольку это название функции. Текст в кавычках тоже выделяется дру­
         гим цветом текст, указывающим на то, что это строковое значение. Цветовая
         кодировка упрощает работу в среде Python.
    5,   Щелкните на кнопке      Run Cell (Выполнить ячейку).
         Notebook выполнит инструкцию if (рис. 8.1). Поскольку переменная TestMe
         содержит значение6, результат будет вполне ожидаемым.




                                                     ГЛАВА   8    Принятие решений            157
               Принятие простых решений с помощью инструкции                                         if
               Знакомство с инструкцией                     lf
     In [1]:   Testмe   =6
               1;f теstме ==- ~ :
                   print (" Значение переменной TestMe р<:~вно б" )

               9начение   переменной   TestMe   равно   6

     Рис. 8.   7. Благодаря простым      инструкциям ifприложение знает, что нужно
                                   делать в тех или иных условиях


Выполнение нескольких задач
     Иногда после принятия решения может возникнуть необходимость выпол­
нить несколько инструкций. Чтобы понять, где заканчивается блок инструк­
ций,   Python     ориентируется на отступы в коде инструкции                          if. До тех пор пока
следующая строка смещена вправо, она является частью блока if. Как только
очередная строка смещается влево, она становится первой строкой кода за пре­
делами блока if. Блок кода включает команды, относящиеся к одной и то же
основной инструкции. В рассматриваемом примере мы работаем с инструкци­
ей   if, которая формирует блок кода. Ниже показано, как выполнить несколько
операций внутри инструкции     if.

         1.     Введите следующий код в блокноте.

                TestMe = 6
                if TestMe == 6:
                    рrint("Значение             переменной        TestMe   равно   6!")
                    рrint("Завершено!")


                Заметьте, что по мере ввода кода автоматически создаются отступы для
                строк. Каждая вводимая строка является частью блока кода текущей ин­
                струкции     if.
                В Notebook блок кода создается путем ввода строк одна за другой. Если
                дважды подряд нажать клавишу                      <Enter>, не вводя текст, то блок кода за­
                вершится.
 ЗАПОМНИ!


         2.     Щелкните на кнопке              Run Cell         (Выполнить ячейку).

                Python выполнит весь блок кода. Результат представлен на рис. 8.2.


Выполнение нескольких сравнений с помощью логических операторов
     До сих пор во всех примерах демонстрировалось выполнение единственно­
го сравнения. На практике чаще возникает необходимость во множественных
сравнениях для удовлетворения сразу нескольких требований.


158         ЧАСТЬ 2       Основы программирования на Python
                              Выполнение нескольких задач

               In [3] :       TestMe = 6
                              if Testмe =    6:
                                 рrint (" 9начение    переменной Testмe равно        6! ")
                                 print ( "9aвepшeнo!" )


                              Значение   переменной      TestMe   равно    6!
                              завершено!




            Рис.   8.2.   Блок кода может содержать множество строк -               по одной
                                   для каждой выполняемой задачи


               Чтобы выполнить несколько сравнений одновременно, необходимо
               создать набор условий с помощью операторов сравнения и логи­
               ческих операторов (см. главу               7).   Логический оператор определяет
 ЗАПОМНИ!
               способы комбинирования условий. Например, х                       == 6 and у== 7 мож­
               но рассматривать как два условия, объединяемых в одну проверку.
               Ключевое слово            and является логическим оператором, требующим,
               что оба условия были истинными.

   Чаще всего множественные сравнения применяют, чтобы установить при­
надлежность значения переменной определенному диапазону. Выполните сле­
дующие действия.

  1.   Введите следующий код в блокноте.
       Value = int(input("Bвeдитe число от 1                      до   10: "))
       if (Value > 0) and (Value <= 10):
          print("Bы ввели: ", Value)


       Пример начинается с получения значения от пользователя. Мы не знаем,
       что именно ввел пользователь, за исключением того, что это какое-то число.

       Функция            int () требует ввода целого числа (без дробной части). В противном
       случае приложение сгенерирует исключение (указание на ошибку; исключе­
       ния будут рассмотрены в главе              1О).
       Инструкция i f содержит два условия. Согласно первому из них значение
       переменной   Value должно быть больше О. Это условие можно также пред­
       ставить в виде Value >= 1. Согласно второму условию значение переменной
       Value должно быть меньше или равно 10. Только при соблюдении обоих ус­
       ловий блок инструкции i f успешно отобразит значение, которое ввел поль­
       зователь.


  2.   Щелкните на кнопке Run Cell (Выполнить ячейку).
       Приложение предложит пользователю ввести число в диапазоне от                         1 до 1О.


                                                           ГЛАВА       8   Принятие решений       159
          3.         Введите          5 и нажмите кnавиwу <Enter>.
                     Приложение определит, что число находится в нужном диапазоне, и вы­
                     ведет сообщение (рис.                     8.3).

               Выполнение нескольких сравнений с помощью логических операторов

  Iп   (4]:    Value • int ( input ( "Bвeдитe число от 1               до   10: ") )
               if (Val ue > 0 ) i1nd (Value <~ lG ) :
                     print ( "ВЫ ввели :        ~,    Value)
               введите        число   от   1   до    1о : 5
               вы ввели:          5


    Рис.      8.3.   Приложение подтверждает, что значение находится в требуемом
                                 диапазоне, и выдает сообщение

          4.         Выберите ячейку еще раз. Повторите пп.                               2 и 3, но вместо 5 введи­
                     те   22.
                     Приложение не отображает ожидаемое сообщение, поскольку число
                     находится за пределами корректного диапазона. Всякий раз при вводе
                     значения, выходящего за рамки установленного диапазона, инструкции,

                     которые являются частью блока                          if,   не выполняются.

                     Заметьте, что номер ячейки увеличивается на единицу. Всякий раз при
                     выполнении ячейки ее номер будет изменяться. Допустим, номер ячейки
                     был равен         4. Тогда после повторного выполнения ячейки на полях блок­
 ЗАЛОМНИ I           нота отобразится          In [ 5] : .
          5.         Выберите ячейку еще раз. Повторите пп.                               2 и 3, но вместо 5 введи­
                     те   5. 5.
                     Python выдаст сообщение об ошибке (рис. 8.4). Несмотря на то что 5. 5
                     и 5 - числа, для Python первое число - это значение с плавающей точ­
                     кой, а второе - целое.

          б.         Повторите пп.              2 и 3, но вместо 5 введите Hello.
                     Python снова отобразит сообщение об ошибке, поскольку для него не
                     важно, к какому типу принадлежат некорректные данные. Он знает толь­
                     ко то, что тип введенных данных некорректен и потому не может быть
                     принят.



                     В профессиональных приложениях используются различные виды
                     проверок диапазонов, обеспечивающие предсказуемость работы
                     приложения. Чем более предсказуемо ведет себя приложение, тем
  СОВЕТ
                     проще пользователю сконцентрироваться на выполнении полезной
                     работы.




160          ЧАСТЬ        2     Основы программирования на                             Python
               Вь1полнение нескольких сравнений с помощью логических операторов

   In [1] :    value а int ( input ( "Bвeдитe число от       1до10:      " ))
               if (Value > О ) a.nd (Value <• 10 ) :
                  print ( "ВЫ ввели : 11 , Value}

               Введите число от       1   до   10 : 5
               вы ввели:     5

   In [1]:     Value • int ( input (" Bвeдитe число от 1       до   10: " ))
               if (Value > 0 ) and (Value <• 10 ) :
                  print ( 11 ВЫ ввели: " , Value)

               Введите число     от   1   до   10 : 5.5


              Va1ueError                                            Traceback (most recent call last)
              <1python-input-l-B73105e7777B> in                  ()
               - --->   1 Value = int ( input ( "Ба•дит• .хо.по от 1      до    10 : ")}
                        2 if (Value > 0) a.nd (Value <• 10)·
                        З    print (" Вu аае.тс : " Value )

              Va lueError: invalid literal for int() with base 10 : '5.5'


Рис.   8.4.   При вводе некорректной информации появляется сообщение об ошибке




Выбор альтернативных вариантов
с помощью инструкции                                                if ... else
  Многие решения основаны на выборе одного из двух вариантов на осно­
вании условия. Например, в зависимости от сигнала светофора следует либо
нажать на тормоз и остановиться, либо нажать на газ и продолжить движение.
Все зависит от конкретных условий. Зеленый свет означает, что можно про­
должать движение, а красный                         -     что нужно остановиться. В следующих раз­
делах рассматривается, каким образом                           Python       совершает выбор между двумя
возможными вариантами.



Знакомство с инструкцией                                  if ... else
  В Python выбор одного из двух вариантов осуществляется с помощью пред­
ложения else инструкции if. Предложение - это дополнительная часть ин­
струкции, изменяющая способ ее работы. Инструкции, содержащие предложе­
ния, называются составными. В данном случае предложение                                       else      позволяет
выполнить другую ветвь блока                            if. Многие программисты рассматривают ин­
струкцию     if, включающую предложение else, как самостоятельную инструк­
цию    if ... else. Многоточие в данном случае означает, что между if и else
выполняются другие инструкции.




                                                                    ГЛАВА 8          Принятие решений        161
              Программисты иногда сталкиваются с проблемами при работе с ин­
              струкцией if ... else, поскольку забывают, что ветвь else выпол­
              няется всегда, когда условие if оказывается ложным. Последствия
ВНИМАНИВ
              могут оказаться самыми неожиданными.




Использование инструкции                  if ... else
   Пример из предыдущего раздела был бы более полезен, если бы программа
реагировала на ввод значения за пределами диапазона. Ведь даже при вводе
некорректных данных пользователь получает сообщение об ошибке, тогда как
ввод корректных данных, но лежащих за пределами диапазона, ни к чему не

приводит. В следующем примере показано, как это исправить с помощью пред­
ложения else, которое позволяет выбрать альтернативный вариант в случае
ложного условия           if.

        1.    Введите следующий код в блокноте.

              Value = int(input("Bвeдитe число от 1       до   10: "))
              if (Value > 0) and (Value <= 10):
                 print ("Вы ввели: ", Value)
              else:
                 рrint("Введенное     значение   некорректно!")


              Как и в предыдущем примере, введенные пользователем данные прове­
              ряются на соответствие требуемому диапазону. Но на этот раз, если поль­
              зователь вводит данные, выходящие за пределы диапазона, выполняется

              ветвь   else, где выводится другое сообщение.
              Заметьте, что предложение     else заканчивается двоеточием, как и усло­
              вие   if.   Это характерно для большинства предложений в  Python. Двое­
              точия нужны, чтобы     Python мог определить, где заканчивается предло-
 здnомни1     жение. Если вы вдруг получаете сообщение о синтаксической ошибке,
              убедитесь в наличии двоеточий.

        2.    Щелкните на кнопке Run Cell (Выполнить ячейку).
              Приложение предложит ввести число в диапазоне между           1 и 1О.
        3.    Введите 5 и нажмите клавишу <Enter>.
              Приложение определит, что число находится в корректном диапазоне,
              и отобразит соответствующее сообщение (см. рис.       8.3).
        4.    Повторите пп. 2 и 3, но вместо 5 введите     22.
              На этот раз приложение выдаст сообщение о том, что введенное значе­
              ние некорректно (рис.    8.5). Теперь пользователь понимает, что совершил
              ошибку и нужно попробовать ввести данные еще раз.




162         ЧАСТЬ 2 Основы программирования на Python
              Выбор между вариантами с помощью инструкции                                                                   if.•. else
              Использование инструкции                                                if...else
  Ir.. (6]:   Value •      tnt   ( inpцt ( "Введит~                    чv.сло о       1   до    10: "))
              :l.f (Value    >       С')    a.nd (Value             <•      1 l!) :
                  PL"int   ( "ВЫ ввели·              " , Value)
              •1.••:
                  p.rint ( "Вnеде1шое                з11ачс•ше              11екорректно       ! ")

              Введите      число           от   1   до   10: 5
              вы. ввели:         5


  rn t7J ·    Valu e '<;. ;nt{inp ·t: ( "8f'W""""l.Иre ч.v.:лп ,-:-~,                     д"    11). " ))
              1t {Value > Lr ) &nd (Value <.о 1 t ) :
                  print (" ЕЫ         n~ли:          " , value)
              else:
                  print ( "В8еденнсе                 ·:n-1.а 1 -1.Р-Н:ИЕ:   некорректно.!" )


              Введите      ЧИСЛО           от   1   ДО   10: 22
              Введенное      значение               некорректно!




                   Рис.     8.5.           Реакция приложения на ввод некорректных данных


Использование инструкции                                                              if ... elif
  Предположим, вы пришли в ресторан и просматриваете меню, в котором
на завтрак предлагаются яичница, блинчики с творогом и овсянка. Вы делае­
те выбор, и официант приносит выбранное блюдо. Для создания такого меню
требуется нечто большее, чем простая инструкция if ... else. В                                                               Python      име­
ется предложение elif, позволяющее создать другой набор условий. По сути
это комбинация предложения else и отдельного блока if. Ниже показано, как
запрограммировать множественный выбор с помощью инструкции if ... elif.

 1.     Введите следующий код в блокноте.
        print("l.             Красный")
        print ( "2.           Оранжевый")
        print("З.             Желтый")
        print ("4. Зеленый")
        print("S. Синий")
        print ("6. Пурпурный")
        Choice = int(input("Bыбepитe                                                      ваш любимый цвет:        "))
        if (Choice == 1):
               print("Bы выбрали                                     красный цветl")
        elif (Choice                        - - 2) :
               print("Bы выбрали                                     оранжевый цвет                     1   ")

        elif (Choice                        --      3) :
               print("Bы выбрали желтый                                               цвет'")
        elif (Choice --                             4) :
               print("Bы выбрали                                     зеленый цвет!")
        elif (Choice                        - - 5) :
               print("Bы выбрали                                     синий цвет                 1 ")

        elif (Choice                        --      6) :



                                                                                                       ГЛАВА 8   Принятие решений        163
         print("Bы выбрали пурпурный цвет!")
      else:
         print("Bы сделали неверный выбор!")

      После запуска приложения отображается меню. Пользователь видит пере­
      чень доступных вариантов и делает выбор, который заносится в переменную
      Choice. Благодаря функции int ( ) пользователь может ввести только число.
      Далее приложение ищет введенное значение в списке возможных значений.
      В каждом случае значение переменной                   Choice       сравнивается с конкретным
      значением в рамках условия выбора. Если ввести                       1, приложение отобразит
      сообщение "Вы выбрали красный цвет!". Если ни один из вариантов выбо­
      ра не является корректным, выполняется последнее предложение                          else,   где
      пользователю сообщается о том, что введенное им значение неверное.

 2.   Щелкните на кнопке Run Cell {Выполнить ячейку).
      Приложение отобразит меню и попросит вас выбрать любимый цвет.

 3.   Введите 1 и нажмите клавишу <Enter>.
      Появится соответствующее сообщение (рис.                   8.6).

       In [7]:        print ("l.     Красный" )
                      print (" 2.    Оранжевый ")
                      print ( "З .   Желтый" )
                      print (" 4.    Зеленый ")
                      print (" 5.    Синий ")
                      print ( "б .   Пурпурный ")
                      Choice • i11t (input       (" выберите    ваш любимый цвет:    " ))
                      if (Choice == 1 ) :
                           print (" ВЫ выбрали красный цвет! ")
                      elif (Choice      ==   2) :
                           print (" ВЫ выбрали оранжевый цвет!" )
                      elif (Choice      ==   3 ):
                           print ( " Bы выбрали желтый цвет!" )
                      elif (Choice      =-
                                        4) :
                         print ( "Вы выбрали        зеленый цвет! ")
                      elif (Choice -= 5 ) :
                           print (" ВЫ выбрали      синий   цвет!" )
                      elif (Choice      ==   6) :
                           print (" Bы выбрали пурпурный цвет!" )
                      e1se:
                         print     (" Вы сделали неверный выбор!" )


                      1.   Красный
                      2.   Оранжевый
                      3.   Желтый
                      4.   Зеленый
                      5.   Синий
                      6.   Пурпурный
                      ВЫберите ваш любимый цвет:            1
                      Вы выбрали красный цвет!


        Рис.   8.6.   Программа предлагает выбрать один вариант из списка


164    ЧАСТЬ 2 Основы программирования на Python
4.   Повторите п.                 3, но вместо 1введите5.
     Приложение выдаст другое сообщение, соответствующее запрашиваемому
     цвету.

5.   Повторите п.                 3,   но вместо               1 введите 8.
     Приложение сообщит о некорректном выборе.

6.   Повторите п.                 3,   но вместо               1 введите Red.
     Приложение выдаст сообщение об ошибке (рис.                                                       8.7). Любое приложение
     должно уметь обнаруживать ошибки ввода данных. В главе                                                    1О будет показано,
     как обрабатывать такие ошибки.


 In [8]:    print ("l.           Красный" )
            print ("2.           Оран:zевый" )
            print (" З.          ЖеЛ'l'ЬIЙ" )
            print ( "4. зеленый" )
            p1int ( "S. Синий" )
            print ( "б. ПурпурllЪIЙ ")
            Choice - int ( :i.nput ( "ВЪlбepитe                  ваш .ru<>!\И><НЙ цвет:       " ))
            i f (Choice      1 ):
                   print ( "ВЫ выбрали красный цвет!" )
            elif (Choice               ~   2) :
               pr:int ( "Вы            выбрали ораюrевый цве'l'!              ")
            elif (Choice               ~   3) :
               print ( "ВЫ             выбрали хе .'!ТЬIЙ цвет        1" )
            elif (Choice               ~   4) :
                   pr:int ( "Bы выбрали sе.леный цвет!" )
            e lH (Choice -      5) :
                 print (" Вы выбрали                 синий цвеrr 1"       )
            e ll.t (Choice -    6) :
                   print (" ВЫ JЭJ,!брали nypnypныi< цsетl" )
            elso :
                   pr int   ( "Вы сделали неверный выбор 1 " )

            1 . Красный
            2.     Ораюrевыi<
            З.     Желтый
            4.     Зеленый
            5.     Синий
            б.     Пурпурный
            Вk'берите        ваш ЛDбимый цвет:                 Red


            Va 1ueError                                                              Traceback (most recent call last)
            < ipython -i np>J t- B - 4d4 caea62Зe5>                  in               ()
                      S print ("S.              С:и.ний' 1 )
                      о print ( "б .            Пурпурный")
              -     > 7 Choice              int (input ( "DыберW!'е            eaiu любию.~й цве":       "))
                            if    (Choice              1)
                                  print ("ВW         вwбра.~tи ираоный Ц>IB••I       ")

            Va J ueError : invalid literal for int() with                              Ьазе    10 :   'Red '


     Рис.   8.7.   Каждое приложение должно уметь распознавать некорректно
                                   введенные данные




                                                                                   ГЛАВА 8           Принятие решений        165
  А ГДЕ ЖЕ ИНСТРУКЦИЯ              SWITCH

  Если вы работали с другими языками программирования, то, должно быть,
  удивились тому, что в        Python   отсутствует инструкция             swi tch,   которую часто
  применяют для создания меню выбора. В                       Python   для этих целей служит
  инструкция    if ... elif.      Она отличается от инструкции                swi tch     тем, что не
  использует одну переменную для выполнения сравнения. В связи с этим для
  замены инструкции           swi tch некоторые разработчики используют средства
  работы со словарями           Python. Подробнее работа со словарями будет рас­
  смотрена в главе      14.



Использование вложенных
                    v                                                  v
инструкции принятия решении

  Зачастую процесс принятия решений происходит на разных уровнях. На­
пример, выбирая в ресторане на завтрак яичницу, вы принимаете решение пер­
вого уровня. Затем официант предлагает выбрать бутерброд к яичнице. Если
бы вы выбрали блинчики с творогом, то официант не предложил бы вам бутер­
брод. В данном случае выбор бутерброда является решением второго уровня.
Предположим, вы выбираете бутерброд с рыбой. Тогда официант предлагает
вам на выбор несколько вариантов рыбы. Это решение третьего уровня. Если
бы вы выбрали бутерброд не с рыбой, то вам не пришлось бы принимать ре­
шение третьего уровня. Такой процесс многоуровневого принятия решений, в
котором каждый уровень основан на решении предыдущего уровня, называет­
ся вложением. Вложенные инструкции часто применяются при создании при­
ложений, которые могут принимать сложные решения на основе различных
входных данных. В следующих разделах рассказывается о некоторых видах
вложений, используемых в          Python для    принятия сложных решений.


Использование нескольких инструкций                               if или if ... else
  Самая распространенная методика множественного выбора                               -   это комбина­
ция инструкций    if и i f ... else, называемая дерево;w выбора из-за сходства с
ветвями дерева. В этом случае для достижения требуемого результата следует
пройти определенный путь. Ниже описан процесс создания дерева выбора.

 1.   Введите следующий код в блокноте.
      One   int(input("Bвeдитe          число от     1   до   10: "))
      Two = int ( input ("Введите       число   от   1   до   10: ") )


166    ЧАСТЬ   2 Основы программирования на Python
       i f (One >= 1) and (One <= 1 О) :
           if (Two >= 1) and (Two <= 10):
              print ("Ваш секретный номер: "                                                                  One * Two)
           else:
                     print("Bтopoe                             значение                      некорректно!")
       else:
              print("Пepвoe                             значение                некорректно!")


       Это расширение примера, который рассматривался в разделе"Использование
       инструкции  i f ... else': Обратите внимание на специфику отступов. Вторая
       инструкция if ... else выравнивается внутри первой инструкции if ... else.
       Таким образом, Python понимает, что это инструкция второго уровня.

 2.    Щелкните на кнопке                                      Run Cell (Выполнить ячейку).
       Программа предложит ввести число в диапазоне от                                                                     1 до 1О.
 3.    Введите               5и        нажмите клавишу                                       <Enter>.
       Появится запрос на ввод другого числа, находящегося в диапазоне от                                                                    1 до 1О.
 4.    Введите               2и        нажмите клавишу                                       <Enter>.
       Программа сообщит результат умножения двух чисел (рис.                                                                     8.8).

             Использование вложенных инструкций принятия решений

             Использование нескольких инструкций                                                               if или if".else
  lr. (1 .   One • ln           ( .iл1-щ\ ( "Виеди·rе         '-nн·лr     о·г   L      д11   1.1: "))
             тwо    ==   i:i.t ( input (" Bв1дитe чи(·ло                    т   1      до ~J·        "))
             .if (One >- 1 ) and. (One <• lC ):
                 if (ТW'о >• 1 ) and (ТWо <• 10 ):
                         i11:1пt. (" 8 .:t ш    ;~1ч::~·г 1iЫЙ Н <-~ р ;        11 ,    Оле    *     Two)
                   els•:
                         рг i   n t. (" H'l'(•{'o(' .... н ач·~!Пff'   ' l ~l<OP P • KT IH    J ")




             Введите        число от           1   до   10 : 5
             введите        ЧИСЛО от           1   ДО   10:     2
             Баш секретный нохер:                       10


      Рис.   8.8.    Использование нескольких уровней принятия решений позволяет
                                                          решать более сложные задачи


                В этом примере программа тоже контролирует, чтобы вводимые
                значения попадали в нужный диапазон. При попытке ввести некор­
                ректное значение программа выдает предупреждение. Причем поль­
ЗАПОМНИ!
                зователь будет точно знать, какое именно значение                                                                     -   первое или
                второе                -        оказалось неправильным.




Комбинирование различных инструкций принятия решений
  Для получения нужного результата можно использовать любую комбина­
цию инструкций                          if, i f ... else                            и    if ... elif,            создавая проверки условий на


                                                                                                            ГЛАВА 8   Принятие решений          167
любых уровнях вложенности. Например, в листинге               8.1   показано, как соста­
вить меню на завтрак.



Листинг   8.1.   Составление меню на завтрак

print("l. Яичница")
print("2. Блинчики с творогом")
print("3. Бельгийские вафли")
print("4. Овсяная каша")
MainChoice = int ( input ("Выберите блюдо на завтрак: ") )
if (MainChoice == 2):
   Meal = "блинчики с творогом"
elif (MainChoice == 3):
   Meal = "бельгийские вафли"
if (MainChoice == 1):
   print("l. Бутерброд с ветчиной")
   print("2. Бутерброд с сыром")
   print ( "3. Бутерброд с рыбой")
   print("4. Бутерброд с салом")
   Bread = int(input("Bыбepитe бутерброд: "))
   if (Bread == 1):
      print("Bы выбрали   яичницу   и   бутерброд   с ветчиной.")
   elif (Bread == 2) :
      print("Bы выбрали   яичницу   и   бутерброд   с   сыром.")
   elif (Bread == 3) :
      print("Bы выбрали   яичницу   и   бутерброд с рыбой.")
   elif (Bread == 4) :
      print("Bы выбрали   яичницу   и   бутерброд   с   салом.")
   else:
      print("Y нас есть яичница, но нет такого бутерброда.")
elif (MainChoice == 2) or (MainChoice == 3):
   print("l. Сироп")
   print ( "2. Клубника")
   print("3. Сахарная пудра")
   Topping = int(input("Bыбepитe десерт: "))
   if 1Topping == 1) :
      print ("Вы выбрали    + Meal +
                           11
                                       с сиропом. ")
                                          11


   elif (Topping - - 2):
      print ("Вы выбрали    + Meal + " с клубникой. ")
                           11


   elif (Topping -- 3):
      print ("Вы выбрали " + Meal + " с сахарной пудрой.")
   else:
      print ("У нас есть " + Meal + ", но нет такого десерта.")
elif (MainChoice == 4):
   print ("Вы выбрали овсяную кашу.")
else:
   print("Y нас нет этого блюда на завтрак!")



168    ЧАСТЬ 2   Основы программирования на Python
  Этот код имеет ряд интересных особенностей. Программисты порой счита­
ют, что в инструкции i f ... eli f всегда должно быть предложение              else. В дан­
ном примере демонстрируется тот случай, когда оно не нужно. В первой ин­
струкции   i f ... elif   в переменную   Meal   заносится значение   2   или   3,   при этом
остальные варианты нас не интересуют.

  Методика выбора здесь такая же, как и в предыдущих примерах. Пользо­
ватель вводит число, которое должно находиться в определенном диапазоне.

В трех случаях требуется дополнительный выбор, поэтому отображается рас­
ширенное меню, подходящее для конкретного варианта. Например, при заказе
яичницы десерт не предлагается, тогда как при выборе блинчиков с творогом
или бельгийских вафель он нужен.
  В приложении есть фрагмент, где особым образом комбинируются перемен­
ные и текст. Поскольку десерт может предлагаться как для блинчиков с творо­
гом, так и для бельгийских вафель, необходимо сообщить, какое именно блюдо
будет подаваться на стол. Для этого используется переменная               Meal,      которая
задается в самом начале.

  Чтобы лучше понять пример, запустите его на выполнение. Попробуйте
разные варианты меню и посмотрите, как работает приложение.




                                                 ГЛАВА 8   Принятие решений             169
Глава          9

Вь1полнение
повторяющихся
           v                   v
деиствии


 В ЭТОЙ ГЛАВЕ."

 ))    Циклы с заданным числом итераций

 ))    Циклы с условием завершения

 ))    Вложенные циклы




в
         о всех приведенных выше примерах демонстрировалось однократное

         выполнение определенных действий. На практике часто требуется со­
         всем иное. Многие задачи, с которыми мы сталкиваемся, имеют повто­
ряющийся характер. Например, доктор может порекомендовать вам увеличить
физическую нагрузку, отжимаясь по сто раз в день. Если вы не будете следо­
вать рекомендации врача и делать по одному отжиманию в день, то никакой
пользы от этого не будет. В   Python    можно выполнять подобные повторяющие­
ся действия с помощью цикла      for.
      К сожалению, мы не всегда знаем, сколько именно раз нужно выполнить
требуемое действие. Например, есть стопка монет, которые нужно проверить
на предмет их раритетности. Если взять только верхнюю монету из стопки, то
не факт, что именно она окажется раритетной. Придется проверять каждую
монету, и только после того, как будет найдена нужная, мы сможем сказать,
что задача выполнена. Не зная точного количества монет в стопке, невозможно
предсказать количество проверок. Подобные повторяющиеся действия выпол­
няются в      Python     с помощью цикла   while.

               В программировании повторяющиеся действия называются циклом.
               Программа выполняет один и тот же код до тех пор, пока цикл не
              закончится.
 ЗАПОМНИ!


   Иногда возникает необходимость в создании одного цикла внутри друго­
го. Так, например, создается таблица умножения. Внутренний цикл вычисляет
значения столбцов, а внешний цикл перемещается между строками. Не беспо­
койтесь, если это пока что звучит непонятно. Соответствующий пример будет
приведен в конце главы. Исходный код примеров данной главы находится
в файле      BPPD_ 09 _Performing_ Repetiti ve _ Tasks. ipynb (см. введение).


Обработка данных с помощью цикла f                                               or
   Первый цикл, с которым сталкиваются программисты,               -    это цикл   for.   Сей­
час уже трудно представить язык программирования без такой инструкции.
В данном случае цикл выполняется фиксированное число раз, и это число из­
вестно заранее, еще до запуска цикла.




Знакомство с циклом                 for
   Цикл      for    начинается с инструкции цикла, определяющей, сколько раз он
будет выполняться. Циклически просматриваемая последовательность мо­
жет быть как набором букв в строке, так и коллекцией элементов. С помощью
функции       range () можно даже указать конкретный ряд значений. Вот простой
пример инструкции цикла:


for Letter in        "Привет":


   Цикл начинается ключевым словом              for.   Следующий элемент     -     перемен­
ная цикла, которая на каждой итерации будет содержать очередной элемент по­
следовательности. В данном случае переменная называется                 Letter.   Ключевое
слово   in   указывает на то, что далее идет последовательность. Здесь последо­
вательностью является строка "Привет". Инструкция              for     всегда завершается
двоеточием, точно так же, как и инструкции принятия решений, рассмотрен­
ные в главе     8.
   Под инструкцией          for   с отступом вправо расположены инструкции, выпол­
няемые в цикле. В          Python   каждая смещенная вправо инструкция является ча­
стью блока кода, образующего цикл            for.



172         ЧАСТЬ    2   Основы программирования на       Python
Создание базового цикла                     f or
  Давайте создадим цикл for, чтобы понять, как он работает. В данном при­
мере просматриваемой последовательностью будет строка. Цикл for по очере­
ди обрабатывает каждый символ в строке до тех пор, пока они не закончатся.

 1.   Откройте новый блокнот.
      Можете использовать файл исходного кода                           BPPD 09 Performing
      Repeti ti ve _ Tasks. ipynb (см.          введение).

 2.   Введите следующий код в блокноте.
      LetterNum = 1
      for Letter in        "Привет":
         print("Бyквa         ", LetterNum,        "будет",        Letter)
         LetterNum+=l
      Пример начинается с создания переменной LetterNumдля отслеживания ко­
      личества обработанных букв. В конце каждой итерации цикла значение пере­
      менной     Let terNum увеличивается           на   1.
      Цикл    for     последовательно проходит все буквы в строке "Привет". Каждая
      буква по очереди присваивается переменнойLetter. Функция print () ото­
      бражает текущее значение переменной LetterNum и соответствующий ей
      символ, находящийся в переменной Letter.

 3.   Щелкните на кнопке           Run Cell (Выполнить ячейку).
      Приложение отобразит последовательность букв вместе с их номерами
      (рис.   9.1).


              Создание базового цикла                    for
   In [1]:    LetterNurn а 1
              for Letter .in "Привет" :
                 print ( "Буква " , LetterNum, "     будет     " , Letter}
                 LetterNum+=l

              Буква    1   будет   п
              Буква    2   будет   р

              Буква    3   будет   и

              Буква    4   будет   в

              Буква    5   будет   е

              Буква    6   будет   т




      Рис.    9.1. Использование цикла fоrдля последовательной обработки
                                           символов в строке




                             ГЛАВА     9    Выполнение повторяющихся действий           173
Управление выполнением цикла
с помощью инструкции              break
   Из каждого правила бывают исключения. Возьмем, к примеру, конвейер для
сборки часов. Допустим, в какой-то момент на сборочной линии заканчивается
та или иная деталь. В отсутствие необходимого компонента конвейер останав­
ливается в середине цикла сборки. Несмотря на то что сборка не завершена,
линия все равно должна быть остановлена, пока не будет пополнен запас нуж­
ных деталей.
   Подобные сбои случаются и в работе компьютеров. Например, во время
загрузки данных из Интернета происходит сбой в сети, и соединение обры­
вается. Поток данных временно прекращается, в результате чего приложение
завершает работу, хотя файл так и не был загружен.

              С помощью инструкции      break   можно прекратить выполнение цик­
              ла. Она не просто включается в код, а вкладывается в инструкцию
              if,   которая определяет условие прерывания цикла.
 3АПОМНИI



   В следующем примере цикл досрочно завершается, когда при обработке
строки значение счетчика цикла становится равным определенной величине.
Это немного искусственный пример, цель которого            -    продемонстрировать,
что может произойти, когда элемент данных обрабатывается слишком долго
(возможно, вследствие ошибки).

  1.   Введите следующий код в блокноте.

       Value = inрut("Введите менее 6 символов: ")
       LetterNum = 1
       for Letter in Value:
          print ("Буква ", LetterNum, " будет ", Letter)
          LetterNum+=l
           if LetterNum > 6:
               print ("Строка слишком длинная!")
               break
       За основу взят пример из предыдущего раздела, только теперь пользователь
       может ввести строку переменной длины. Если строка содержит более шести
       символов, приложение прекращает ее обработку.

       Инструкция  if содержит условие прерывания цикла. Если значение перемен­
       ной LetterNum больше 6, значит, строка слишком длинная. Обратите внима­
       ние на второй уровень отступа в инструкции if. При выполнении этого блока
       кода выводится сообщение, указывающее на слишком длинную строку. Далее
       выполняется инструкция     break, которая   завершает выполнение цикла.




174         ЧАСТЬ   2   Основы программирования на     Python
2.   Щелкните на кнопке                        Run Cell (Выполнить ячейку).
     Программа отображает приглашение на ввод данных.

3.   Введите слово Лаипа и нажмите клавиwу <Enter>.
     Программа перечисляет каждый символ в строке (рис.                                                      9.2).


     In [1]:    Value   = iлрut ( "Введите                 менее       6       символов:      ")
                LetterNшn       - 1
                for Letter 1n Value:
                   print ( "Byквa         ",       LetterNшn,              "    будет      " , Letter)
                   LetterNшn+=l
                   1f LetterNum           >       6:
                        print    ( "Строка слип::кuм длинная !                      11 }


                        bre&k

                Введите       менее   6   сиьш оло в:           лампа
                Буква     1     будет         л
                Буква     2     будет         а
                Буква     З     будет         м
                Буква     4     будет         п
                Буква     5     будет         а



        Рис.   9.2. Короткая строка успешно обрабатывается приложением

4.    Выполните пп. 2 и 3 еще раз, но вместо слова Лампа введите фразу Слиш­
      ком      дпиннаJ11        строка.


      Программа выдаст сообщение об ошибке и прекратит обрабатывать строку
      на символе        6 (рис. 9.3).



          In [3] : Value = input (" Введите менее 6 символов: ")
                   LetterNum = 1
                   for Letter in Value:
                      print (" Буква " , LetterNum, " будет " , Letter)
                      LetterNum+=l
                      if LetterNum > 6 :
                                      print (" Cтpoкa                          слишком длинная! ")
                                      brea.k

                          Введите             менее         6    символов:                  Слишком      длинная     строка

                          Буква           1        будет           с
                          Буква           2        будет           л

                          Буква           3        будет           и

                          Буква           4        будет           ш

                          Буква           5        будет           к

                          Буква           6        будет           о

                          Строка          слишком длинная!


               Рис. 9.3. Длинные строки обрезаются, чтобы не превышать
                                   определенный размер




                                  ГЛАВА                9    Выполнение повторяющихся действий                                 175
              Это пример проверки предельной длины строки. В главе                    8   рассмат­
              ривались способы проверки диапазонов, позволявшие контроли­
              ровать вводимые значения. Благодаря такого рода проверкам мож­
  СОВЕТ
              но быть уверенным в том, что данные, особенно строки, не будут
              превышать размер выделенного для них пространства. Кроме того,
              ограничения на размер вводимых данных затрудняют определенные

              виды хакерских атак, что делает приложение более защищенным.



Управление выполнением цикла
с помощью инструкции                 continue
   Иногда нужно проверить каждый элемент последовательности, зная, что
некоторые элементы не требуют обработки. Например, ваша задача                            -   обра­
ботать информацию по каждому автомобилю в базе данных, кроме автомоби­
лей коричневого цвета. Возможно, вам просто не нужна информация об этих
автомобилях. В данной ситуации инструкцию                   break использовать нельзя, по­
скольку оно просто завершит цикл, и вы не увидите оставшиеся элементы

последовательности.



              Альтернативным вариантом для                  break является инструкция
              continue.    Она тоже вкладывается в инструкцию           if,   которая содер­
              жит условие для перехода к очередной итерации цикла.
 3АЛОМНИI



   В следующем примере демонстрируются отличия инструкции                        continue        от
инструкции       break. В данном случае программа отказывается обрабатывать
букву и, но продолжит обрабатывать все остальные буквы.

  1.      Введите сnедующий код в бnокноте.

          LetterNum = 1
          for Letter in "Привет":
             if Letter =="и":
                 continue
                print("Haйдeнo и,      не   обработано.")
             print("Бyквa      ", LetterNum, "   будет   ", Letter)
             LetterNum+=l
          За основу взят пример из раздела "Создание базового цикла           for';   к которому
          добавлен блок   if   с инструкцией   continue. Обратите     внимание на функцию
          print (),которая является частью блока if. Эта функция       никогда не будет вы­
          полнена, потому что текущая итерация цикла заканчивается сразу же.

  2.      Щеnкните на кнопке      Run Cell   (Выпоnнить ячейку).




176         ЧАСТЬ   2   Основы программирования на           Python
        Программа отобразит последовательность букв вместе с их номерами
        (рис.    9.4).   Несложно заметить влияния инструкции                                continue -   буква и не об­
        рабатывается.



       In [2]:    LetterNшn е        1
                  tor Letter in 11 Привет 11          :
                     if Letter ="и ":
                            cont.inu.j
                            print ( "Haйдeнo и,           не    обработано .")
                         print   (" Буква   ",   LetterNшn,        "   будет   " , Letter}
                         LetterNшn+•l


                  Буква      1    будет      п
                  Буква      2    будет      р

                  Буква      3    будет      в

                  Буква      4    будет      е

                  Буква      5    будет      т




   Рис.   9.4. Используйте инструкцию соп tin ue, чтобы пропустить обработку
                                                 определенных элементов



Управление выполнением цикла с помощью инструкции                                                              pass
   В   Python есть одна особенность,                              которая отличает его от других языков: вто­
рая разновидность инструкции   continue - инструкция pass. От инструкции
continue ее отличает то, что она позволяет завершить выполнение блока if, в
котором находится. Приводимый далее пример аналогичен примеру из преды­
дущего раздела, с той лишь разницей, что здесь используется инструкция                                            pass.

  1.   Введите следующий код в блокноте.

       LetterNum = 1
       for Letter iп "Привет":
          if Letter == "и":
              pass
                  рriпt("Найдено и,                       не    обработано.")
            рriпt("Буква                 ", LetterNum,                 "будет",       Letter)
            LetterNum+=l
 2.     Щелкните на кнопке Run Cell (Выполнить ячейку).
        Приложение отобразит последовательность букв с их номерами (рис.                                           9.5).
        Буква и здесь тоже не обрабатывается, зато выводится строка, которая не ото­
       бражалась в примере с инструкцией                                  continue.

                 Инструкция continue позволяет пропустить определенные эле­
                 менты последовательности и не выполнять для них дополнитель­

                 ный код. Инструкция                           pass используется, когда необходимо выпол­
 ЗАПОМНИ!
                 нить дополнительную обработку при обнаружении того или иного



                                     ГЛАВА        9        Выполнение повторяющихся действий                        177
                элемента. Это может быть, например, регистрация элемента в жур­
                нале ошибок, вывод сообщения об ошибке и т.п. Таким образом, ин­
                струкции          continue         и   pass      делают примерно одно и то же, но приме­

                няются в разных ситуациях.




       Ir1   (3):    LetterNum = 1
                     f or Letter in      "Привет" :
                        i f Letter      =-"и" :
                            pass
                             pri.nt ( "Haйдeнo         и,   не   обработано." )
                        prj nt    ( " Буква   " , LetterNum , "       будет   " , Letter)
                        LetterNum+='

                     Буква    1     будет     п
                     Буква    2     будет     р
                     найдено и ,     не обработано.
                     Буква    З     будет     и
                     Буква    4     будет      в
                     Буква    5     будет     е
                     Буква    б     будет      т



      Рис.   9.5.   Инструкция pass позволяет выполнить определенную обработку
                       в случае появления нежелательных входных данных



Управление выполнением цикла
с помощью предложения                                   else
  В    Python        есть еще один элемент цикла, которого нет в других языках про­
граммирования: это предложение else. Оно позволяет выполнять код, даже
когда в заданной последовательности нет ни одного элемента для обработки.

 1.     Введите следующий код в блокноте.

        Value = iпрut("Введите менее 6 символов: "1
        LetterNurn = 1
        for Letter in Value:
           print ("Буква ", LetterNurn, " будет ", Letter)
            LetterNum+=l
        else:
              print("Cтpoкa            пуста.")


        За основу взят пример из раздела "Создание базового цикла                                 for". Если, запу­
        стив программу, пользователь просто нажмет клавишу                                  <Enter>, будет выпол­
        нена ветвь предложения                     else.
 2.     Щелкните на кнопке                    Run Cell       (Выполнить ячейку).

        Приложение выдаст запрос на ввод данных.

 З.     Введите слово Лампа и нажмите клавишу <Eпter>.



178          ЧАСТЬ     2     Основы программирования на                           Python
         Приложение перечислит каждый символ в строке (см. рис.           9.2).   Как ни стран­
         но, сообщение о том, что строка пустая, тоже будет выведено. Дело в том, что
         при нормальном завершении цикла             for (т.е. без вызова инструкции break)
         ветвь   else   всегда выполняется. С другой стороны, если переменная цикла не
         была инициализирована (цикл не выполнился ни разу), ветвь            else тоже вы­
         полняется. Благодаря этой особенности она может использоваться в качестве
         блока финальных инструкций для любого цикла            for. Подробнее об этом мож­
         но прочитать в статье, доступной по следующему адресу:

         http://python-notes.curiousefficiency.org/en/latest/
         python_concepts/break_else.11tml
 4.      Повторите пп. 2 и 3, но на этот раз просто нажмите кnавиwу <Enter>, не
         вводя никакого текста.

         Теперь появится лишь сообщение о том, что строка пуста (рис.         9.6).


      In [1]: Value = inрut ( nвведите менее 6 символов: " )
              LetterNum = 1
              ror Letter .1n Value:
                 print ( "Byквa " , LetterNum, "будет" , Letter)
                 LetterNum+=l
                  el.se:
                     print ( "Cтpoкa     пуста." )


                  введите менее     6   символов:
                  Строка   пуста.



  Рис.   9.6. Предложение el se позволяет         выполнять обработку в случае пустой
                                         последовательности


             Предложение            else часто вызывает путаницу, поскольку пустая по­
             следовательность может означать не только отсутствие входных дан­

             ных. Это может быть признаком ошибки или другой ситуации, ко­
ВНИМАНИЕ!
             торая требует иной обработки по сравнению с отсутствием входных
             данных. Постарайтесь тщательно разобраться с тем, как приложение
             работает с данными, чтобы не использовать предложение else там,
             где возникают потенциальные ошибки, которые нужно выявлять
             и устранять.




Обработка данных с помощью цикла                                              while
  Цикл while используется в ситуациях, когда вы не знаете, какой объем
данных должно обработать приложение. Вместо того чтобы задавать фиксиро­
ванное количество элементов, вы просите               Python   обрабатывать данные до тех
пор, пока они не закончатся. Такого рода циклы применяются, например, при


                             ГЛАВА       9   Выполнение повторяющихся действий             179
загрузке файлов неизвестного размера или получении стриминговых данных
от радиостанций в Интернете.


Знакомство с циклом          while
   В инструкции цикла     while задается не последовательность, а условие. Цикл
выполняется до тех пор, пока условие остается истинным. Представьте, напри­
мер, покупателей, стоящих в очереди. Продавец обслуживает покупателей до
последнего человека в очереди. Очередь может расти, если будут подходить
другие покупатели, поэтому невозможно заранее сказать, сколько людей об­
служит продавец. Он лишь знает, что торговля идет и нужно продолжать отпу­
скать товар, пока есть спрос.

   Вот как выглядит цикл    while:
while Sum < 5:
   Цикл начинается с ключевого слова  while, за которым следует условие.
В этом примере значение переменной Sum должно быть меньше 5, чтобы цикл
продолжался. О текущем значении переменной Sum здесь ничего не сказано, как
и о том, каким образом оно будет меняться. Известно лишь, что для продолже­
ния цикла значение переменной        Sum должно быть меньше 5. Условие заканчи­
вается двоеточием, после которого следует список инструкций с отступом.

            Поскольку цикл     while выполняется неопределенное число раз, воз­
            можно образование бесконечного цикла, который никогда не завер­
            шится. Допустим, перед началом цикла переменной        Sum   присвоено
ВНИМАНИЕ/
            значение о и условие цикла требует, чтобы значение sum оставалось
            меньшим 5. Если значение переменной       Sum не будет увеличивать­
            ся, то цикл будет выполняться бесконечно долго (по крайней мере,
            до момента выключения компьютера). Бесконечные циклы могут
            стать причиной множества проблем в системе, вызывая замедле­
            ние или даже "зависание" компьютера, поэтому их лучше избегать.
            При использовании цикла     while нужно продумать гарантированный
            способ его завершения (в отличие от цикла      for,   в котором конец
            последовательности означает конец цикла). Таким образом, нужно
            выполнить три действия:

             1)   подготовить проверяемую переменную (например, присвоить
                  переменной
                           Sum значение о);
            2) задать условие цикла while (например, Sum < 5);
            3)    каким-то образом обновить проверяемую переменную в цикле,
                  чтобы в конечном счете цикл гарантированно завершился
                  (например, Sum+=l).



180     ЧАСТЬ 2    Основы программирования на Python
             Как и в случае с циклом           for,   стандартное поведение цикла while
             можно менять с помощью тех же четырех команд:


 ЗАПОМНИ!     »    break -         завершает текущий цикл;

              »    continue -         немедленно завершает обработку текущего элемента;

              ))   pass - завершает обработку текущего элемента после выполнения
                   инструкций в блоке i f;

              ))   else -          предлагает альтернативный способ обработки при несо­
                   блюдении условия цикла.



Использование цикла                    while в приложении
   Рассмотрим самый простой пример, в котором программа выводит значение
счетчика Sum. Чтобы создать и протестировать пример, выполните следующие
действия.

        1.   Введите сnедующий код в бnокноте.
             Swn   =   О
             while Sum < 5:
                print(Sum)
                Sum+=l
             Здесь демонстрируется выполнение трех типичных задач. Сначала пере­
             менной        sum присваивается   значение О. Далее проверяется условие цик­
             ла. В последней инструкции цикла выполняется приращение счетчика.
             Прежде чем обновить значение переменной           Sum, программа отображает
             ее текущее значение.

             Цикл while обеспечивает гибкость, которой не может похвастаться ин­
             струкция       for.   В данном примере показан относительно простой способ
             обновления переменной           Sum, хотя она может обновляться произволь-
 ЗАnомни1    ным образом. Кроме того, условие цикла может быть сколь угодно слож­
             ным. При желании можно отслеживать текущие значения трех или четы­
             рех переменных. Понятно, что чем сложнее условия, тем выше вероят­
             ность создать бесконечный цикл. На практике пользователь сам решает,
             насколько сложным должно быть условие цикла           while.
        2.   Щеnкните на кнопке Run Cell (Выnоnнить ячейку).
             Программа выполнит цикл           while и отобразит числовую последователь­
             ность (рис.     9.7).




                              ГЛАВА 9     Выполнение повторяющихся действий          181
      In   [В]     :   Sшn -      О
                       while      Sшn     < 5:
                            p~int (Sшn)
                            Sшn       1
                       о


                       2
                       з
                       4



                           Рис.   9.7.     Простой цикл while, в котором отображается
                                                последовательность чисел




Вложенные циклы
  Иногда циклы for и while позволяют достичь одного и того же результа­
та. Несмотря на то что сами циклы работают по-разному, эффект получается
одинаковый. В данном примере мы создадим генератор таблицы умножения
путем вложения цикла while в цикл for. Чтобы конечный результат выглядел
красиво, мы применим специальное форматирование (подробности будут при­
ведены в главе                 12).

 1.        Введите следующий код в блокноте.

           х   =       1
           у   =       1
           print (' {: >41' . format (' ') , end= '           ')
           for Х in range(l, 11):
              print('{:>41'.format(X), end='                  ')
           print()
           for Х in range(l, 11):
              print('{:>41'.format(X), end='                  ')
              while У <= 10:
                  print('{:>41'.format(X *У),                  end='   ')
                  Y+=l
              print ()
              Y=l

           Программа начинается с создания двух переменных, х и У, которые содер­
           жат значения строки и столбца таблицы. х                -   это номер строки, а У -   номер
           столбца.

           Чтобы таблица получилась наглядной, необходимо создать одну строку свер­
           ху и один столбец слева. Значение, стоящее на пересечении строки и столбца,
           представляет собой произведение их номеров.




182            ЧАСТЬ 2                Основы программирования на Python
     Первая инструкция       print () добавляет пустое пространство в левом верхнем
     углу таблицы (рис. 9.8). Суть правила форматирования заключается в создании
     столбца шириной     4 символа и заполнении его пробелами. Выражение {: >4)
     задает размер столбца. Функция    format (' ') определяет символ-заполни­
     тель. Атрибут   end функции print () заменяет конечный символ возврата ка­
     ретки обычным пробелом.

     Первый цикл     for   предназначен для отображения чисел от                 1 до 1О в заголовке
     таблицы. Функция       range ()   создает числовую последовательность. При этом
     указываются начальное (1) и конечное значения (11).

     По завершении цикла курсор находится в конце строки заголовка. Чтобы пе­
     реместить его на следующую строку, необходимо вызвать функцию                          print ()
     без аргументов.

     Следующую часть программы мы проанализируем строка за строкой. По­
     скольку в таблице умножения отображаются значения от 1*1 до 1О*1 О, нам
     нужны десять строк и десять столбцов. В цикле                  for   создает десять строк.

     Взгляните еще раз на рис.       9.8. У   каждой строки есть свой номер, который ото­
     бражается с помощью первой функции                   print () в цикле. Этот номер тоже дол­
     жен быть отформатирован. Программа формирует столбец из четырех симво­
     лов, который завершается пробелом, а не символом возврата каретки.

     Далее идет цикл       while, в котором формируется строка результатов умноже­
     ния столбец за столбцом. Значения столбцов     - это произведениях * У. Что­
     бы столбец занимал четыре символа, результат тоже следует отформатиро­
     вать. В конце значение переменной У увеличивается на единицу с помощью
     инструкции   Y+=l,    после чего цикл         while    завершается.

     Мы снова возвращаемся к циклу                 for.   Функция   print ()   завершает текущую
     строку. Переменная У должна быть установлена равной                       1,   чтобы начать сле­
     дующую строку с умножения на             1.
2.   Щелкните на кнопке Run Cell (Выполнить ячейку).
     Появится таблица умножения (рис.               9.8).




                           ГЛАВА 9     Выполнение повторяющихся действий                          183
                 Вложенные циклы

       In [9]:   х   = 1
                 у - 1
                 print (' { :>4} ' .format( ' ' ), end- ' ')
                 ror Х i n range ( l , 11 ) :
                    print (' { : >4}' . format (Х) , end'*"' ')
                 print ()
                 ror Х in range ( l , 11 ):
                    print (' {: >4) ' . format (Х), end- 1 ' )
                    while У <- 10 :
                        print (' { :>4)' . format (Х * У), end= '   ' )
                           У+-1
                      print ()
                      Y=l

                             1     2    3    4    5     6      7      8    9    10
                      1      1     2    3    4    5     6      7      8    9    10
                      2      2     4    6    8   10    12     14     16   18    20
                      3      3     6    9   12   15    18     21     24   27    30
                      4      4     8   12   16   20    24     28     32   36    40
                      5      5    10   15   20   25    30     35     40   45    50
                      6      6    12   18   24   30    36     42     48   54    60
                      7      7    14   21   28   35    42     49     56   63    70
                      8      8    16   24   32   40    48     56     64   72    80
                      9      9    18   27   36   45    54     63     72   81    90
                     10     10    20   30   40   50    60     70     80   90   100

  Рис. 9.8. Благодаря форматированию таблица умножения выглядит красиво




184   ЧАСТЬ 2    Основы программирования на                 Python
Глава          1О

Обработка ошибок

 В ЭТОЙ ГЛАВЕ .•.

 >> Причины возникновения ошибок

 » Индикаторы ошибок

 »    Создание собственных индикаторов ошибок

 »    Выполнение обработки после возникновения ошибок




в
          любом коде независимо от уровня его сложности содержатся ошибки.
          Внезапное "зависание" приложения без видимой причины является
          следствием ошибки. Непонятные сообщения в диалоговых окнах тоже
возникают из-за ошибок. К сожалению, программы не всегда уведомляют
пользователей об ошибках. Если вы предоставите неверные данные, приложе­
ние выполнит неверные расчеты и выдаст некорректный результат, а вы даже
не поймете этого, пока кто-то не подскажет вам или вы сами не проверите рас­
четы. Ошибки могут проявляться спорадически. Порой вы их замечаете, по­
рой   -   нет. Например, ошибка может возникать в плохих погодных условиях
или при перегрузке сети. Иными словами, ошибки возникают в произвольных
ситуациях и в силу непредсказуемых причин. В этой главе рассматриваются
различные типы ошибок и способы их устранения.
  Появление ошибок не должно вас удивлять. Программы пишутся людьми, а
людям, как известно, свойственно ошибаться. Многие разработчики называют
ошибки приложения исключения.ми, подразумевая исключения из правил. Ис­
ключения в приложениях следует обнаруживать и при первой же возможнос­
ти обрабатывать. Процесс обнаружения и обработки исключений называется
обработкой ошибок или обработкой исключений. Для правильного выявления
ошибок нужно понимать их источники и причины их возникновения. Обнару­
женную ошибку обрабатывают путем перехвата исключения. Это подразуме­
вает анализ исключения и выполнение определенных действий. Вторая часть
главы посвящена способам обработки исключений в приложениях.
   Иногда программа сама обнаруживает ошибочную ситуацию. В таком слу­
чае следует возбудить или сгенерировать исключение. Оба термина исполь­
зуются для обозначения ситуации, когда программа сталкивается с ошибкой,
не может с ней справиться и поэтому передает информацию о ней другому
коду для обработки (интерпретации и, если повезет, исправления). В некото­
рых случаях для передачи информации используются настраиваемые объекты
сообщений об ошибках.             Python   располагает множеством объектов обобщен­
ных сообщений, подходящих для большинства ситуаций, но порой и их оказы­
вается недостаточно. Например, вы хотите написать приложение для работы
с базой данных, а в          Python   для этого нет объектов обобщенных сообщений.
Необходимо знать, когда следует обрабатывать исключения локально, когда
отправлять их вызывающему коду, а когда создавать специальные исключения,

чтобы в каждом блоке приложения выполнялась корректная обработка исклю­
чений. Все эти вопросы тоже рассматриваются в данной главе.
   Часто требуется обеспечить корректную обработку исключений, даже если
это подразумевает прекращение работы программы. К счастью, в                Python   есть
предложение         finally,    которое выполняется всегда, даже при возникновении

исключений. В него можно добавить код, предназначенный для закрытия фай­
лов или выполнения других финальных задач. Об этом мы поговорим в кон­
це главы. Исходный код примеров данной главы находится в файле BPPD_ 1 О_
Dealing_with_ Errors. ipynb            (см. введение).




Почему              Python вас не понимает
   Очень часто разработчики сталкиваются с ситуациями, когда программы и
компьютеры становятся неуправляемыми. Проблема, разумеется, не в языках
программирования и не в компьютерах, ведь они не умеют ни думать, ни хо­

теть чего-либо. Просто они в буквальном виде воспринимают все то, что им
сообщает разработчик. В этом и кроется суть проблемы.

              Ни    Python,   ни компьютер не понимают смысла инструкций. Они вы­
              полняют любые инструкции буквально, так, как их дает пользова­
              тель. Вряд ли вы вздумаете попросить       Python,   чтобы он удалил важ­
 ЗАПОМНИ!
              ный файл, если только не возникнет какая-то аномальная ситуация.
              Но    Python    нужны четкие инструкции относительно того, как именно



186         ЧАСТЬ   2   Основы программирования на       Python
              распознать аномалию, и если вы не предоставили таких инструкций,
              то он может удалить файл помимо вашего желания. В подобных си­
              туациях обычно говорят о сбое, или ошибкеприложения. Ошибки
              в коде устраняют с помощью отладчика.



     Отладчик    -   это специальная утилита, которая позволяет остановить или
приостановить выполнение приложения, просмотреть содержимое перемен­

ных и проанализировать код в поисках причины ошибки.
     Ошибки чаще всего возникают, когда разработчик делает неверные пред­
положения. Сюда можно отнести и предположения о пользователе, который,
вероятно, даже не догадывается о том, сколько труда и заботы вкладывает раз­
работчик в свое приложение. Иногда пользователь вводит неверные данные,
а   Python   не понимает, что данные ошибочны, и продолжает их обрабатывать,
даже если вы не планировали обработку некорректных данных.         Python   не ви­
дит различий между верными и неверными данными; он просто обрабатывает
их согласно заданным правилам. А это значит, что нужно устанавливать такие
правила, которые защищали бы пользователей от них же самих.
     Python   ничего не может продумывать наперед, поскольку не обладает ана­
литическим мышлением, присущим человеку. В случае сетевой ошибки или
непредвиденных действий пользователя       Python   не сможет придумать решение
для устранения ошибки. Он просто выполняет код. Если вы сами не предо­
ставите код для решения проблемы, то приложение, скорее всего, аварийно
завершится, потеряв все несохраненные данные. В силу того что разработчик
не может предвидеть все возможные ситуации, даже в очень сложных прило­

жениях возникают ошибки по недоработке самого разработчика.

              Некоторые разработчики наивно полагают, что могут создавать су­
              пернадежный код, несмотря на абсурдность самой этой мысли. Бо­
              лее грамотные разработчики допускают, что какие-то ошибки оста­
ВНИМАНИЕ!
              нутся незамеченными в процессе отладки, что человек и природа

              будут по-прежнему вызывать непредвиденные события и что даже
              самый умный программист не способен предусмотреть все возмож­
              ные условия возникновения ошибок. Не забывайте о том, что ваше
              приложение всегда будет подвержено ошибкам, вызывающим ис­
              ключения. Рассуждая подобным образом, вы станете на путь создания
              действительно надежных приложений. Согласно закону Мерфи "все,
              что может пойти не так, пойдет не так''. (Дополнительные сведения
              о законах Мерфи можно найти на сайте    www. murphys-laws. com.)




                                           ГЛАВА 10    Обработка ошибок       187
Возможные причины появления ошибок
  Путем гадания на кофейной гуще можно было бы предсказать потенци­
альные источники появления ошибок в приложении, но вряд ли это поможет.
Ошибки обычно делятся на две четкие категории, которые до определенной
степени помогают предугадать, когда и где они произойдут. Держа в голове эти
категории, можно с большей долей вероятности обнаружить потенциальные
источники ошибок, прежде чем они навредят приложению. Основные катего­
рии ошибок таковы:

             >>   ошибки, возникающие в определенное время;

             »    ошибки, имеющие специфический тип.

  В следующих разделах эти две категории ошибок рассматриваются более
детально. Прежде чем приступать к обнаружению и устранению потенциаль­
ных ошибок, необходимо разобраться в их классификации.


Этапы появления оwибок
  Ошибки проявляются в определенное время, а именно:

             »        на этапе компиляции;

             »        на этапе выполнения.


  Независимо от времени возникновения все ошибки приводят к сбою в рабо­
те приложения. В следующих разделах эти категории ошибок рассматриваются
подробнее.

Ошибки компиляции
  Ошибка компиляции возникает, когда вы просите            Python   запустить прило­
жение. Прежде чем          Python   сможет выполнить приложение, он должен интер­
претировать код и преобразовать его в форму, понятную компьютеру. Компью­
тер ориентируется на машинный код, специфичный для данного процессора и
архитектуры. Если инструкции написаны неправильно или неполные,              Python
не сможет выполнить необходимое преобразование и сообщит об ошибке, ко­
торую следует устранить, прежде чем приложение сможет быть запущено.
  К счастью, ошибки компиляции обнаруживаются и устраняются легче все­
го. Пользователь даже не заметит их, поскольку приложение просто не запу­
стится. Ошибки этого типа устраняются в процессе написания кода.

          Ошибка компиляции должна подсказать, что в данном фрагмен­
          те кода могут быть и другие ошибки или пропуски. Рекомендует­
          ся проверять весь окружающий код на предмет наличия других



188    ЧАСТЬ      2    Основы программирования на     Python
            потенциальных проблем, которые могут быть не обнаружены в про­
            цессе компиляции.



Ошибки выполнения
   Ошибка выполнения возникает, когда     Python   скомпилировал написанный
код и компьютер начинает его выполнять. Ошибки выполнения бывают не­
скольких типов, причем одни из них обнаружить сложнее, чем другие. Ког­
да происходит ошибка выполнения, приложение внезапно завершает работу
и выводит диалоговое окно с описанием исключения. Или же пользователь
начинает жаловаться на получение неверных результатов или, крайней мере,
нестабильную работу программы.

            Не все ошибки выполнения приводят к возникновению исключе­
            ний. В результате некоторых ошибок приложение начинает рабо­
            тать нестабильно (зависает), выдавать некорректные результаты или
 ЗАПОМНИ!
            повреждать данные. Ошибки выполнения могут негативно влиять
            на другие приложения или вызывать сбои в системе, в которой за­
            пускается приложение. Другими словами, подобные ошибки могут
            доставить пользователю немало проблем.

   Многие ошибки выполнения возникают из-за ошибок в коде. Например, вы
неправильно указали имя переменной, и в итоге      Python записывает данные   не
в ту переменную. Или был пропущен необязательный, но важный аргумент
при вызове метода. Это примеры ошибок кодирования. Обнаружить их можно
с помощью отладчика или просто путем построчной вычитки кода.
   Ошибки выполнения могут быть также вызваны внешними причинами, не
связанными с кодом. Например, если пользователь введет некорректную ин­
формацию, не ожидаемую приложением, может быть сгенерировано исключе­
ние. Из-за сетевой ошибки требуемый ресурс может стать недоступным. Ино­
гда даже сбой аппаратного обеспечения компьютера вызывает неповторяющу­
юся ошибку приложения. От всех вышеперечисленных ошибок приложение
можно избавить, если в нем есть код перехвата ошибок. Существуют два типа
ошибок выполнения, которые допускаются при написании приложения: ошиб­
ки в результате нарушения правил и пропуски.



Типы ошибок
   Ошибки можно различать в зависимости от того, как они возникают. Зная,
какие бывают типы ошибок, вы будете представлять, где их искать в прило­
жении. Здесь все как в жизни. Например, зная, что электронные устройства
не работают без питания, вы всегда проверяете, подключен ли к розетке шнур
питания телевизора, если при включении он не работает.


                                         ГЛАВА 1 О   Обработка ошибок     189
              Понимание типов ошибок способствует их более быстрому обнару­
              жению, благодаря чему сокращается время отладки. Опытные разра­
              ботчики знают, что проще устранять ошибки в процессе написания
  СОВЕТ
              кода, чем во время эксплуатации приложения, когда пользователи

              начинают проявлять нетерпение и хотят немедленного исправления

              программы. Кроме того, отладка на стадии разработки всегда проще,
              чем на завершающей стадии, поскольку придется проверять меньше
              кода.



   Важно знать, где искать ошибки. В             Python   (как и в большинстве языков про­
граммирования) ошибки делятся на следующие типы:

               ))       синтаксические;

               ))       семантические;

               ))       логические.


   В следующих разделах более подробно описывается каждый из этих типов
ошибок. Мы начнем с самых легких в обнаружении синтаксических ошибок,
а закончим самыми трудными                -   логическими.



Синтаксические ошибки
   Любая допущенная вами опечатка                 -   это синтаксическая ошибка. Некото­
рые синтаксические ошибки довольно легко обнаруживаются в                      Python,   по­
скольку приложение просто не запускается. Интерпретатор может даже указать
на ошибку, выделив ошибочный код и отобразив сообщение об ошибке. Тем не
менее некоторые синтаксические ошибки довольно сложно выявить.                     Python,
например, чувствителен к регистру символов, поэтому, если в имени перемен­

ной где-то был использован неверный регистр, программа может работать не
так, как ожидается. И найти то место, где произошел случайный сбой, окажет­
ся непросто.



              Большинство синтаксических ошибок проявляется в процессе ком­
              пиляции, и интерпретатор на них указывает явно. Устранение таких
              ошибок не представляет трудности благодаря тому, что интерпрета­
 ЗАПОМНИ!
              тор достаточно точно сообщает, что именно нужно исправить. Даже
              если интерпретатор не выявил проблему, синтаксические ошибки
              приводят к некорректной работе приложения, и, как следствие, лю­
              бые ошибки, не обнаруженные интерпретатором, всплывают в ходе
              тестирования. Если приложение было адекватно протестировано, то
              навряд ли в финальном релизе останутся синтаксические ошибки.




190         ЧАСТЬ   2    Основы программирования на          Python
Семантические ошибки
   Когда вы создаете цикл, который выполняется избыточное число раз, вы,
скорее всего, не получите никаких сообщений об ошибках на этапе компиля­
ции. Приложение успешно запустится, поскольку интерпретатор считает, что
все работает корректно. Тем не менее одна лишняя итерация цикла способна
привести к целому каскаду ошибок. Такого рода ошибки в коде называется
семантически.АtИ.



            Семантические ошибки возникают из-за неверного понимания по­
            следовательности выполняемых действий. Программа выдает некор­
            ректные результаты даже несмотря на то, что, казалось бы, работает
 ЗАПОМНИ!
            в точности так, как ожидает разработчик. Такого рода ошибки труд­
            но обнаруживать, и приходится прибегать к помощи отладчика.
            (В главе   20   рассматриваются инструменты, применяемые для отлад­
            ки приложений      Python.)

Логические ошибки
   Некоторые разработчики не разделяют семантические и логические ошиб­
ки, хотя это разные вещи. Семантическая ошибка имеет место в том случае,
когда синтаксически правильный код используется некорректно (например,
цикл выполняется излишнее число раз). Логические ошибки являются резуль­
татом неверных рассуждений разработчика. Например, разработчик может пу­
тать и неверно применять логические операторы или, допустим, полагать, что

данные всегда хранятся на локальном жестком диске, и, как следствие, при по­

пытке загрузить данные с сетевого диска приложение ведет себя некорректно.

            Логические ошибки очень трудно выявлять, ведь проблема, по сути,
            не в самом коде, а в его неверном понимании. В данном случае оши­
            бочны сами рассуждения, которые привели к написанию именно
 ЗАПОМНИ!
            такого кода, а значит, разработчику, допустившему ошибку, будет
            сложно самому ее обнаружить. Опытный разработчик для выявле­
            ния логических ошибок обращается за помощью к коллеге. Поможет
            также наличие формальной спецификации приложения, поскольку
            при ее составлении формализуются все логические рассуждения.



Перехват исключений
   Вообще говоря, пользователь не должен видеть никаких сообщений
об исключении. Приложение всегда должно перехватывать исключения и



                                             ГЛАВА   1О   Обработка ошибок   191
обрабатывать их до того, как о них узнает пользователь. Конечно, в реальности
все немного не так, и пользователи время от времени сталкиваются с непред­

виденными исключениями. И тем не менее при разработке приложения ставит­
ся цель обработать каждое потенциальное исключение. В следующих разделах
описывается порядок перехвата и обработки исключений.


Базовая обработка исключений
  Чтобы обрабатывать исключения, нужно сообщить             Python   о своем намере­
нии и предоставить соответствующий код. Это можно сделать несколькими
способами. Сначала мы рассмотрим простейший способ, а затем перейдем
к более гибким решениям.


   ВСТРОЕННЫЕ ИСКЛЮЧЕНИЯ



   В   Python nоддерживается множество встроенных исключений -           намного
  больше, чем можно себе представить. Список этих исключений доступен
   на сайте   https: / /docs. python. org/3. 7 /library/exceptions. html.
   В документации список исключений разбит на категории. Ниже представлен
   краткий обзор категорий исключений Python, с которыми вы будете рабо­
  тать регулярно.


  •    Базовые кnассы. Это в основном строительные блоки для других исклю­
       чений, как, например, исключение   Exception. Тем   не менее с некоторыми
       из этих исключений, в частности,Аri thmeticError, можно столкнуться
       в приложении.


  •     Конкретные искnючения. Приложения могут сталкиваться с серьезны­
       ми ошибками, которые трудно исправить, поскольку не существует "хо­
        рошего" способа обработки таких ошибок либо они сигнализируют о со­
       бытиях, которые должны обрабатываться приложением. Например, когда
        в системе имеет место нехватка памяти,   Python генерирует исключение
       MemoryError. Устранить такую ошибку навряд ли nолучится, поскольку не
        всегда можно освободить память, занимаемую другими приложениями.
        Когда пользователь нажимает комбинацию клавиш     <Ctrl+C> или <Delete>,
       сигнализирующую о прерывании процесса,     Python генерирует исключение
       Keyboardinterrupt. Приложение должно обработать это исключение пе­
        ред выполнением любых других задач.

  •     Искnючения операционной системы. Операционная система может ге­
        нерировать ошибки, которые Python передает приложению. Например,
       если приложение пытается открыть несуществующий файл, операционная
       система генерирует исключение   FileNotFoundError.



192      ЧАСТЬ   2   Основы программирования на     Python
   •   Предупреждения.        Python пытается предупредить пользователей о не­
       предвиденных событиях или действиях, которые могут позднее приве­
       сти к ошибкам. Например, если попытаться использовать ресурс, такой
       как значок, ненадлежащим образом,            Python сгенерирует исключение
       ResourceWarning.      Следует помнить о том, что это лишь предупреждения,
       а не ошибки. Конечно, если на них не обращать внимания, то это может
       привести к проблемам в дальнейшем, но все же предупреждения можно
       игнорировать.




Обработка единственного исключения
   Программы, которые рассматривались в главе            8,   имели неприятную особен­
ность: они генерировали исключения в случае ввода пользователем непредви­

денных значений. Частично проблема решается путем проверки диапазона. Но
это не поможет, если пользователь вместо числовых значений начнет вводить
текст, например       Hello. Более целостное решение обеспечивается путем обра­
ботки исключений, как описано ниже.

        1.   Откройте новый блокнот.
             Можете также воспользоваться файлом исходного кода BPPD                      10
             Dealing_wi th_ Errors. ipynb     (см. введение).

        2.   Введите следующий код в блокноте.

             try:
                Value = int(input("Bвeдитe      число   от    1   до   10: "))
             except ValueError:
                print("Hyжнo ввести число от 1 до 10!")
             else:
                if (Value > 0) and (Value <= 10):
                   print("Bы ввели: ", Value)
                else:
                      рrint("Введенное   значение   некорректно!")


             Инструкция в блоке   try может сгенерировать           исключение, которое бу­
             дет обработано. В данном случае исключение возникает при получении
             данных от пользователя с помощью вызова          int (input     ()).Исключения,
             возникающие за пределами этого блока, не обрабатываются. У вас может
             возникнуть соблазн заключить весь исполняемый код в блок              try   и тем
             самым обрабатывать каждое исключение. Но на практике код обработки
             делают максимально компактным и конкретным, чтобы четко локализо-
             вать источник проблемы.

             В нашем примере блок   except перехватывает одно конкретное исклю­
             чение:ValueError. Оно будет сгенерировано и обработано, когда поль­
             зователь введет строку, например Hello, вместо числового значения.
 ЭАПОМНИJ




                                               ГЛАВА    1О        Обработка ошибок        193
      Другие исключения, сгенерированные каким-то иным способом, не будут
      обрабатываться в данном блоке except.

      Блок    else   содержит код, который выполняется, когда блок                try завершается
      успешно (не генерируя исключение). Этот код не должен выполняться, если
      пользователь вводит некорректные данные. Когда пользователь вводит целое
      число, программа проверяет, попадает ли число в заданный диапазон.

 З.   Щелкните на кнопке Ruп           Cell (Выполнить ячейку).
      Программа попросит ввести число от               1 до 1О.
 4.   Введите Hello и нажмите клавишу <Eпter>.
      Программа отобразит сообщение об ошибке (рис.                10.1 ).


                     Перехват исключений

                     Базовая обработка исключений

                     Обработка единственного исключения

        In (2 ) :    t:cy:
                        Value = int ( input ( "Bвeдитe        число от   1   до   10: " ))
                     except ValueError:
                        print ( "Hyжн:o ввести число от 1 до 10!" )
                     e1se:
                        if (Value > 0 ) and (Value <= 10 ) :
                           print ( "Вы ввели: " , Value)
                        e1se:
                               рrint ( "Введенное эначение некорректно!" )

                     Введите     число от   1   до   10 : Hello
                     Нужно ввести число от           1 до 10!

       Рис.   7О. 7. Ввод некорректных данных теперь приводит к появлению
                             сообщения об ошибке, а не исключению


 5.   Повторите пп.      3 и 4, но вместо Hello введите 5 . 5.
      Приложение генерирует такое же сообщение об ошибке, как на рис. 10.1 .

 6.   Повторите пп.      3 и 4, но вместо Hello введите 22.
      Теперь программа выводит сообщение об ошибке диапазона (рис. 10.2). Об­
      работка исключений не устраняет такого рода ошибки . Их все равно придется
      проверять отдельно.


 7.   Повторите пп.      3 и 4, но на зтот раз введите 7 вместо Hello.
      Приложение сообщит о том, что было введено значение                    7. Несмотря     на то что
      подобный уровень проверки потребовал большого объема работы, он все же
      необходим для обеспечения корректной работы приложения.


194    ЧАСТЬ    2 Основы программирования на Python
          In (3):     try:
                        Value = int ( input        ( "Bвeдитe число от         1   до   10: " ))
                     except ValueError:
                         print ( "Hyжнo ввести число от             1   до   10!" )
                      e1se :
                         i~ (Value > 0 ) and (Value <:: 10 ) :
                            print ( "Вы ввели: " , Value)
                         else :
                               рrint ( "Введенное       значение    некорректно!" )


                      Введите    число   от   1   до   10: 22
                      Введенное значение          некорректно!



       Рис. 10.2. Обработка исключений не гарантирует, что значение будет
                        находиться в корректном диапазоне



              Возможно, придется проверять и другие ошибки, в зависимости от
              среды, в которой выполняется тестирование. Например, если вы ра­
              ботаете вIDLE, а не Notebook, то при нажатии комбинации клавиш
ТЕХНИЧЕСКИЕ
nодРО6НОСТИ   <Ctrl+C>, <Cmd+C> или каком-то другом способе неожиданного
              прерывания будет сгенерировано исключение Keyboardinterrupt.
              Notebook обрабатывает это исключение автоматически, так что в
              этой среде вам ничего не придется делать. Но нельзя предполагать,
              что и все остальные пользователи приложения будут работать толь­
              ко в   Notebook.

Использование предложения                 except без указания исключения
    Можно создать обобщенный блок обработки исключений в                                Python,    который
будет предназначен для перехвата любых исключений. Чаще всего мы перехва­
тываем конкретные исключения, руководствуясь следующими соображениями:

               ))    чтобы не пропустить исключение, которое не было учетно при раз­
                     работке приложения;

               ))    чтобы другие пользователи точно знали, какие именно исключения
                     обрабатывает ваше приложение;

               ))    чтобы корректно обработать исключение, используя специально
                     предназначенный для него код.

    Но иногда требуется именно универсальный обработчик, например при ис­
пользовании сторонних библиотек или взаимодействии с внешними службами.
В следующей пошаговой инструкции демонстрируется использование предло­
жения    except,     в котором не указано никакого конкретного исключения.




                                                         ГЛАВА     10    Обработка ошибок             195
 1.   Введите следующий код в блокноте.

      try:
         Value =   int(input("Bвeдитe число от           1   до   10: "))
      except:
         рrint("Обобщенная     ошибка!")
      except ValueError:
         print("Hyжнo   ввести   число   от   1   до   10!")
      else:
         i f (Value > 0) and (Value <= 10):
              print("Bы ввели:   ", Value)
         else:
              рrint("Введенное   значение     некорректно!")


      Единственное отличие от предыдущего примера заключается в появлении
      предложения    except,   не связанного с исключением              ValueError.   В резуль­
      тате это предложение может перехватывать любое другое возникающее ис­
      ключение.

 2.   Щелкните на кнопке     Run Cell (Выполнить ячейку).
      Это приведет к появлению сообщения об ошибке (рис.                 10.3). Pythoп автомати­
      чески обнаруживает, что порядок расположения обработчиков исключений
      некорректен. (Эта тема будет подробно рассмотрена далее.) Поменяйте места­
      ми обработчики, чтобы код выглядел так, как показано ниже.

      try:
         Value = int(input("Bвeдитe        число от      1   до   10: "))
      except ValueError
         print("Hyжнo   ввести число     от   1   до   10!")
      except:
         рrint("Обобщенная ошибка!")
      else:
         if (Value > 0) and (Value <= 10):
            print("Bы ввели: ", Value)
         else:
              рrint("Введенное   значение     некорректно!")

 3.   Щелкните на кнопке      Run Cell (Выполнить ячейку).
      Приложение попросит ввести число, находящееся в диапазоне от                  1 до 1О.
 4.   Введите слово Hello и нажмите клавиwу                  <Enter>.
      Приложение выдаст сообщение об ошибке (см. рис.                   10.1). Если обработчики
      стоят в правильном порядке, то программа в первую очередь обработает кон­
      кретную ошибку, а менее конкретные обработчики вызываются только тогда,
      когда это необходимо.

 5.   Опять щелкните на кнопке      Run Cell.
      Приложение попросит ввести число, находящееся в диапазоне от                  1 до 1О.



196    ЧАСТЬ     2 Основы программирования на Python
     In [1]:     try :
                    Value          = int ( input ( " Bвeдитe           число от            1       до   10 : " ))
                 exoept :
                       рrint ( " Обобщенная              ошибка! " )
                 except ValueError:
                       print ( " Hyжнo ввести число от                      1    до   10! " )
                 else :
                       if (Value        > 0) and (Value <= 10 ) :
                             print( " Bы ввели :           '' , Value }
                       else :
                             рr i nt ( "Введенное          значение         некорректно!" )


                      File    "<ipython-input-l-e575efa30fЬ 4 >" ,                                 line 2
                         Va.l ue    = in t (:i.npu t ( "Ваед;;1'1'е     'llИC.JIO от           1    до 1 О     ") )

                 SyntaxError : default ' except : ' must                             Ье    l ast

     Рис. 10.З. Порядок расположения обработчиков исключений некорректен

6.    Выполните команду                 Kernelqlnterrupt (ЯдроqПрервать).
      Это действие равнозначно нажатию комбинации клавиш          <Ctrl+C> или
      <Cmd+C> в других IDE. Сначала кажется, будто ничего не происходит. Но по­
      смотрите на окно сервера, и вы увидите там сообщение                                              Kernel Interrupted
      (Выполнение ядра прервано).

7.    Введите 5. 5 и нажмите кпавиwу <Enter>.
      В результате появится обобщенное сообщение об ошибке (рис.                                                        10.4),   по­
      скольку    Notebook реагирует               на прерывание, а не на ввод некорректных дан­
      ных, ведь прерывание произошло раньше.                                 Python формирует очередь оши­
      бок в том порядке, в котором он их получает. Из-за этого иногда возникает
      впечатление, что приложение                        Python     выводит некорректные сообщения об
      ошибках.


        In   ( 7) :   try :
                         Value = int ( input               ( "Bвeдитe число от                     1    до   10: " ))
                      exoept ValueError :
                           print ( " Hyжнo       ввести число               от   1    до   10 !" )
                      exoept :
                           рrint ( " Обобщенная                ошибка! " )
                      else :
                           if (Value        >   О)       and (Value <= 10 ) :
                              print       ( " Вы ввели:       " , Value)
                           else :
                              pr i nt     ( " Введенное          значение        некорректно! " )


                      Вве дит е      число от        1    до    10 : 5 .5
                      Обобщенная         ошибка !


         Рис.   10.4.    Обобщенный обработчик перехватывает исключение
                                            Keyboardinterrupt

                                                                   ГЛАВА        10    Обработка ошибок                           197
  8.    Повторите пп. 3 и 4, но вместо Hello введите 5. 5.
        Приложение выдаст то же сообщение об ошибке, что и в самом начале (см.
        рис.   10.1 ).   В этом случае прерывания не происходит, поэтому отображается
        ожидаемое сообщение.


Обработка аргументов исключения
    Большинство исключений не содержит аргументов (т.е. список значений,
которые можно проверять для получения дополнительной информации). Ис­
ключение либо перехватывается, либо нет. Но некоторые исключения все же
предоставляют аргументы, и в последующих главах вы увидите, как они ис­

пользуются на практике. Аргументы содержат информацию об исключении,
требуемую для корректной обработки.

               Для полноты изложения эта глава содержит простой пример, в ко­
               тором генерируется исключение с аргументами. Можете без особо­
               го ущерба для понимания материала пропустить оставшуюся часть
ТЕХНИЧЕСКИЕ
подРОБНОСТИ    раздела, поскольку мы вернемся к этой теме в последующих главах.


  1.    Введите следующий код в бnокноте.

        import sys
        try:
           File = open ( 'myfile. txt')
        except IOError as е:
              рrint("Ошибка при открытии файлаl\r\n"         +
                 "Номер ошибки:       (О}\r\n". format (е. errno) +
                 "Текст     ошибки:   {О}". format (е. strerror))
        else:
              print("Фaйл     открыт,   как ожидалось.")
              File. close () ;

        В этом примере используются несколько не рассматривавшихся ранее эле­
        ментов. В частности, инструкция         import   подключает код из другого файла.
        Подробнее она будет описана в главе        11.
        Функция  open () открывает файл и предоставляет доступ к нему через пере­
        менную Fi le. Порядок доступа к файлам будет описан в главе 16. Учитывая то,
        что файла myfile. txt нет в каталоге приложения, операционная система не
        сможет его открыть и сообщит об этом Python.

        Попытка открытия несуществующего файла приводит к появлению исключе­
        ния    IOError,    которое содержит два аргумента:

        •     errno -      целочисленный номер ошибки, полученный от операционной
              системы;


        •     strerror -      строка с информацией об ошибке.



198         ЧАСТЬ 2       Основы программирования на Pythoп
     Предложение          as помещает информацию об исключении в переменную е,
     к которой можно получить доступ в блоке    except. Далее вызывается функция
     print (),которая выводит на экран описание ошибки.
     Если вы все же решите создать файл               myfile. txt, то будет вызвано предло­
     жение   else.    В данном случае выводится сообщение о том, что файл открыт в
     нормальном режиме. Затем программа закрывает файл, не выполняя над ним
     никаких действий.

2.   Щеnкните на кнопке Run Cell (Выпоnнить ячейку).
     Приложение отобразит информацию об ошибке открытия файла, как показа­
     но на рис.   10.5.


        In [8]:       iztчюrtsys
                      try:
                         File = open (' myfile.txt ')
                      except IOError аз е:
                          р:~::int (" Ошибка при: открытии: файла!\r\n"        +
                                " Номер ошибки :     {0}\r\n" .forrnat(e.errno) +
                                "Текст     ошибки:   {О}" . format (е. strerror) )

                      else:
                           print (" Фaйл открыт,         как   ожидалось .")
                           File. close () ;

                      Ошибка     при: открытии: файла!
                      Номер     ошибки :   2
                      Текст ошибки :       No such file or directory

               Рис.   70.5.   Попытка открыть несуществующий файл
                                  завершилась неудачей



 ПОЛУЧЕНИЕ СПИСКА АРГУМЕНТОВ ИСКЛЮЧЕНИЯ


 Список аргументов, передаваемый вместе с исключением, зависит как от само­
 го исключения, так и от того, что предоставляет отправитель. Не всегда можно
 понять, какая именно информация предоставляется в ваше распоряжение.
 Один из способов решения проблемы                   -    просто вывести весь список с по­
 мощью следующего кода.


 import sys
 try:
    File = open('myfile.txt')
 except IOError as е:
    for Arg in e.args:
       print(Arg)
 else:
     print("Фaйл      открыт,      как ожидалось.")
     File.close();


                                                         ГЛАВА   1О   Обработка ошибок   199
  Свойство   args   всегда содержит список аргументов исключения в строковом
  формате. Можно воспользоваться простым циклом         for   для вывода на экран
  каждого аргумента. Однако возникает одна проблема: отсутствуют имена ар­
  гументов, поэтому вы видите выводимую информацию, но не знаете, каким
  аргументам она соответствует.


  Более сложный подход, позволяющий устранить описанную проблему, заклю­
  чается в выводе на экран имен и значений аргументов.

  import sys
  try:
     File = open('myfile.txt')
  except IOError as е:
     for Entry in dir (е):
        if (not Entry.startsw1th(" ")):
           try:
              print (Entry, " = ", е. getattribute (Entry))
           except AttributeError:
              рrint("Атрибут ", Entry, "недоступен.")
  else:
      print("Фaйл открыт,    как ожидалось.")
      File.close();
  В этом случае все начинается с получения списка атрибутов, связанных с объ­
  ектом ошибки, с помощью функции      dir   ().Она возвращает список строк, со­
  держащих имена атрибутов, которые можно вывести на экран. Но только те
  аргументы, которые не начинаются символом подчеркивания            (_),   содержат
  полезную информацию об исключении. Впрочем, не все из этих аргументов до­
  ступны, поэтому нужно заключить код вывода во второй блок        try ... except
  (подробности будут приведены в разделе "Обработка вложенных исключе­
  ний").

  Имя атрибута вывести несложно, поскольку оно содержится в переменной
  Entry. А вот чтобы получить значение, связанное с этим атрибутом, нужно вос­
  пользоваться функцией _getattribute (),передав ей имя атрибута. После
  запуска программы отобразится список имен и значений каждого атрибута,
  переданного вместе с объектом исключения. В данном случае мы получаем
  следующий результат.

  args = ( 2, 'No such file or directory')
  Attribute characters written not accessiЫe.
  errno = 2
  filename = myfile.txt
  filename2 = None
  strerror = No such file or directory
  winerror = None
  with traceback = <built-in method with traceback of
      FileNotFoundError object at Ox0000000003416DC8>



200    ЧАСТЬ   2    Основы программирования на Pythoп
Обработка нескольких исключений с помощью
одного предложения         except
   Большинство приложений может генерировать несколько исключений в
одной строке кода, как было продемонстрировано в разделе "Использование
предложения     except    без указания исключения". Порядок обработки несколь­
ких исключений зависит от целей приложения, типов исключений и уровня
пользователей. Иногда менее опытным пользователям проще заявить о том,
что в приложении возникла неустранимая ошибка, и занести детали в файл
журнала, находящийся в каталоге приложения или в центральном хранилище.

             Использование одного предложения              except     для перехвата несколь­
             ких исключений допустимо, только если все эти исключения обраба­
             тываются по одной и той же процедуре. В остальных случаях нужно
 ЗАЛОМНИI
             обрабатывать каждое исключение отдельно. Ниже демонстрируется
             обработка нескольких исключений с помощью единственного пред­
             ложения    except.

        1.   Введите следующий код в блокноте.

             try:
                Value = int(input("Bвeдитe число от 1 до 10: "))
             except (ValueError, Keyboardinterrupt):
                print("Hyжнo ввести число о т 1 до 10!")
             else:
                if (Va lue > 0) and (Value <= 10):
                   print("Bы ввели: ", Value)
                else:
                   рriпt("Введенное     значение некорректно!")


             Обратите внимание на то, что теперь предложение       except перехваты­
             вает исключения      ValueError   и   Keyboardlnterrupt. Они заключены в
             скобки и разделены запятыми.
 ЗАПОМНИ!


        2.   Щелкните на кнопке Run Cell (Выполнить ячейку).
             Приложение попросит ввести число от           1 до 1О.
        3.   Введите Hello и нажмите клавишу <Eпter>.
             Приложение отобразит сообщение об ошибке (см. рис.              10.1).
        4.   Снова щелкните на кнопке      Run Cell.
             Приложение выдаст тот же запрос.

        5.   Выполните команду       KerneJqJnterrupt (ЯдроqПрервать).
             Это эквивалентно нажатию комбинации клавиш <Ctrl+C> или <Cmd+C>
             в других   IDE.



                                                   ГЛАВА   1О   Обработка ошибок        201
        6.    Введите         5. 5 и нажмите клавишу <Enter>.
              Приложение отобразит то же самое сообщение об ошибке.

        7.    Повторите nп. 2 и 3, но вместо Hello введите 7.
              Приложение сообщит о том, что было введено корректное значение,
              равное     7.


Обработка нескольких исключений с помощью
нескольких предложений               except
   При обработке нескольких исключений обычно рекомендуется перехваты­
вать каждое исключение с помощью собственного предложения except. Это
позволяет настраивать обработку для каждого исключения и дает пользовате­
лю понять, что именно пошло не так. Естественно, такой подход оказывает­
ся более трудоемким. Ниже показано, как выполнить обработку исключений
с помощью нескольких предложений               except.

        1.    Введите следующий код в блокноте.
              try:
                 Value = int (input      ("Введите число от        1   до   10: "))
              except ValueError:
                    print("Hyжнo     ввести число от    1   до   10!")
              except Keyboardinterrupt:
                    print("Bы нажали     клавиши   Ctrl+C 1 ")
              else:
                    i f (Value > 0) and (Value <= 10):
                        print("Bы ввели:    ", Value)
                    else:
                        рrint("Введенное    значение    некорректно 1 ")


              Обратите внимание на то, что в этом случае используются несколько
              предложений         except. Каждое из них обрабатывает другое исключение.
              Вполне допустим и комбинированный подход, когда некоторые предло-
 эАпомни1     жения     except     перехватывают только одно исключение, а некоторые   -
              несколько исключений. Вы вольны выбрать подход, который лучше всего
              подходит для конкретной ситуации.

        2.    Щелкните на кнопке Run Cell (Выполнить ячейку).
              Приложение попросит ввести число от            1 до 1О.
        3.    Введите       Hello и нажмите клавишу <Enter>.
              Приложение выведет сообщение об ошибке (см. рис. 10.1 ).

        4.    Повторите пп.        2 и 3, но вместо Hello введите 22.
              Приложение отобразит сообщение об ошибке диапазона (см. рис. 10.2).




202         ЧАСТЬ   2   Основы программирования на               Python
 5.       Повторите пп.          2 и 3, но теперь выпоnните команду Kernelqlnterrupt
          (ЯдроqПрервать), введите          5. 5 и нажмите кnавиwу <Enter>.
          Приложение выдаст специфическое сообщение об ошибке, как показано на
          рис.   10.6.

           In [8]:       try:
                            Value = int ( input      (" Бвeдитe число   от   1   до   10: "))
                         except ValueError:
                            print (" Hyжнo ввести число от 1 до 10!" )
                         except Keyboardinterrupt:
                            print (" ВЫ нажали клавиши Ctrl+C! ")
                         else :
                            if (Value > 0 ) and (Value <= 10 ) :
                                print ( "Бы ввели: " , Value)
                            else:
                                print (" Введенное значение некорректно!              ")


                         Введите   число от    1    до 10: 5.5
                         Бы нажали   клавиши       Ctrl+C!

           Рис. 10.6. Благодаря использованию нескольких предложений except
                можно генерировать специфические сообщения об ошибках

 6.       Повторите пп.         2 и 3, но вместо Hello введите 7.
          На этот раз приложение сообщит о том, что было введено корректное значе­
          ние, равное      7.

Иерархическая обработка менее специфичных исключений
  Одна из стратегий, применяемых для обработки исключений, заключается
в использовании конкретизированных предложений                          except для обработки всех
известных исключений и обобщенных предложений                               except для обработки
неизвестных исключений. Иерархия исключений                            Python описана по следую­
щему адресу:

https://docs.python.org/3/library/exceptions.html#ex ception-hierarchy
  Просматривая иерархию, обратите внимание на то, что на самом верхнем
уровне находится исключение   BaseException. Ну а большинство исключений
являются производными от объекта Exception. При обработке математических
ошибок можно использовать как обобщенное исключение ArithmeticError,
так и, к примеру, конкретизированное исключение ZeroDi visionError.

   Python просматривает предложения except в том порядке, в котором они
встречаются в исходном коде. Первое предложение проверяется первым, вто­
рое   -    вторым и т.д. Следующий пример демонстрирует, насколько важно со­
блюдать корректный порядок следования исключений. В данном случае будут
выполнены операции, приводящие к математическим ошибкам.


                                                          ГЛАВА   1О    Обработка ошибок        203
 1.   Введите следующий код в блокноте.

      try:
         Valuel   int(input("Bвeдитe       первое        число:   "))
         Value2   int(input("Bвeдитe       второе        число:   "))
         Output   Valuel / Value2
      except ValueError:
         print("Hyжнo    ввести целое    число!")
      except Keyboardinterrupt:
         print("Bы нажали    клавиши    Ctrl+C!")
      except ArithmeticError:
         рrint("Произошла    непредвиденная математическая                ошибка.")
      except ZeroDivisionError:
         рrint("Попытка    деления на    нуль 1 ")
      else:
         print(Output)
      Сначала вводятся два значения:     Valuel      и   Value2.   Первые два предложения
      except   предназначены для обработки результатов некорректного ввода. Сле­
      дующие два предложения     except    предназначены для обработки математиче­
      ских исключений, таких как деление на О. Если при выполнении приложения
      не возникает ошибок, вызывается предложение                 else,   в котором выводится
      результат выполнения операции.

 2.   Щелкните на кнопке     Run Cell   (Выполнить ячейку).

      Программа попросит ввести первое число.

 3.   Введите Hello и нажмите клавишу <Eпter>.
      Как и ожидалось, Pythoп отобразит сообщение, соответствующее исключению
      ValueError.
 4.   Снова щелкните на кнопке     Run Cell.
      Программа опять попросит ввести первое число.

 5.   Введите   8 и нажмите клавишу <Enter>.
      Программа запросит ввод второго числа.

 6.   Введите О и нажмите клавишу <Enter>.
      Появится сообщение, соответствующее исключению       Ari thmeticError, как
      показано на рис.
                     10.7. Но это не совсем то, чего мы ожидали, ведь исключение
      ZeroDi visionError более специфично, чем Ari thmeticError.
 7.   Поменяем порядок обработки исключений, как показано ниже.

      except ZeroDivisionError:
         print ("Попытка деления   на    О")
      except ArithmeticError:
         рrint("Произошла непредвиденная математическая ошибка.")




204    ЧАСТЬ   2   Основы программирования на Python
 In [ 9] :      t.ry:
                   Valuel     int (i nput (" Bвeдитe первое                       число:    "))
                   Value2     int ( input (" Bвeдитe второе                       число:    "))
                   Output     Valuel / Value2
                except ValueError:
                   print (" Нужно ввести целое число! ")
                except Keyboardinterrupt:
                   print (" ВЫ нажали клавиши Ctrl+C! ")
                except ArithmeticError:
                    рrint (" Произошла       непредвиденная математическая ошибка .")
                except ZeroDivisionError:
                   print (" Попытка деления                  на   нуль! ")
                else:
                   print (Output)

                Введите первое        число:    8
                Введите     второе    число:    О
                Произошла     непредвиденная математическая                         ошибка.



         Рис.   10.7.     Порядок обработки исключений в                     Python    имеет значение

8.     Снова выполните пп.            4-6.
       Появится сообщение, соответствующее исключению                                  ZeroDivisionError, по­
       скольку теперь исключения перехватываются корректно.


9.     Повторите пп. 4-5, но на этот раз в качестве второго чисnа введите                                   2 вме­
       сто о.

       Приложение выведет результат                     4.   О, как показано на рис.          10.8.


 In [10]:        t.ry :
                    Valuel = int ( input (" Bвeдитe первое                        число :    "))
                    Value2 = int ( input (" Bвeдитe второе                        число :    "))
                    Output = Valuel / Value2
                 except ValueError:
                    print (" Нужно ввести целое число!" )
                 except Keyboardinterrupt:
                    print (" Bы нажали клавиши Ctrl+C! ")
                 except ArithmeticError:
                        рrint (" Произошла     непредвиденная математическая                       ошибка .")
                 except ZeroDivisionError:
                        рrint (" Попытка деления на нуль! ")
                 else:
                    print (Output)

                 Введите     первое   число:        8
                 Введите     второе   число:        2
                 4.0

Рис.   1О.В.   При правильных входных данных приложение возвращает корректный
                                                результат




                                                                  ГЛАВА      1О    Обработка ошибок             205
               Заметьте, что результат, показанный на рис.                    10.8,   является значени­
               ем с плавающей точкой. Дело в том, что результатом деления всегда
               будет значение с плавающей точкой. Если же вам нужен целочис­
 3АЛОМНИ!
              ленный результат, воспользуйтесь оператором деления нацело(//).



Обработка вложенных исключений
   Иногда обработчик одного исключения необходимо расположить внутри
другого обработчика. Это называется вложение.и исключе11ий. При вложении
обработчиков         Python    сначала пытается найти обработчик на вложенном уров­
не, а затем    -     на внешнем. Глубина вложений может быть произвольной.
   Двойная обработка исключений применяется в том случае, когда нужно по­
лучать входные данные от пользователя в цикле, чтобы гарантировать получе­
ние всей информации. Ниже показан пример такого кода.

  1,   Введите следующий код в блокноте.

       TryAgain = True
       while TryAgain:
          try:
             Value = int(input("Bвeдитe               целое       число."))
          except ValueError:
                   print("Hyжнo    ввести   целое    число 1 ")
                   try:
                      DoOver   =   inрut("Попытаться снова           (y/n)? ")
                   except:
                      print("Xopoшo,     увидимся     в    следующий раз!")
                   TryAgain = False
                else:
                   if (str.upper(DoOver)                  "N"):
                      TryAgain = False
             except Keyboardinterrupt:
                   print("Bы нажали     клавиши     Ctrl+C!")
                print ("Увидимся в       следующий        раз!")
                TryAgain = False
             else:
                print(Value)
                TryAgain = False
       Программа начинается с создания цикла ввода. Использование циклов в по­
       добных случаях оправдано, поскольку вы не хотите, чтобы приложение за­
       вершало работу всякий раз, когда допускается ошибка ввода данных. В этом
       примере цикл упрощен, так как обычно код выносится в отдельную функцию.

       Когда начинается цикл, программа предлагает пользователю ввести целое
       число, которое может быть любым. Если пользователь вводит нецелочислен­
       ное значение либо нажимает комбинацию клавиш <Ctrl+C>, <Cmd+C> и т.п.,


206         ЧАСТЬ 2    Основы программирования на Python
              возникает исключение. В противном случае приложение отображает зна­
              чение, введенное пользователем, и присваивает переменной           TryAgain
              значение   False, которое   вызывает завершение цикла.

              Исключение   ValueError возникает в тех случаях,    когда пользователь до­
              пускает ошибку. Мы не знаем, почему пользователь вводит неправиль­
              ное значение, а потому спрашиваем, хочет ли он повторить попытку. Ну
              а поскольку пользователь должен ввести ответ на этот вопрос, может

              возникнуть новое исключение. Оно будет обрабатываться внутренним
              блоком   try ... except.
              Обратите внимание на использование функции         str. upper ()   при полу­
              чении символьных данных, вводимых пользователем. Это позволяет не
              делать различий между символами      n и N, принимая оба варианта. Всякий
 СО8ЕТ        раз, когда вы запрашиваете у пользователя ввод символов, имеет смысл

              переводить символы нижнего регистра в верхний регистр, чтобы вместо
              двух проверок делать одну (уменьшая тем самым вероятность ошибок).

              Исключение     Keyboardinterrupt     возникает, когда пользователь нажи­
              мает определенную комбинацию клавиш, чтобы завершить выполнение
              приложения. Обработчик исключения       Keyboardinterrupt отображает
ЗАЛОМНИI      два сообщения и присваивает переменной      TryAgain значение False,
              что приводит к завершению цикла.

         2,   Щелкните на кнопке     Run Cell (Выполнить ячейку).
              Приложение попросит ввести целое число.

         3.   Введите Hello и нажмите клавишу <Enter>.
              Приложение отобразит сообщение об ошибке и спросит, хотите ли вы
              попытаться еще раз.

         4.   Введите У и нажмите клавишу        <Enter>.
              Приложение снова запросит ввод целого числа, как показано на рис.       10.9.
         5.   Введите значение    5. 5 и нажмите клавишу <Enter>.
              Приложение отобразит сообщение об ошибке и запросит повторный
              ввод данных.


         6.   Теперь выполните команду Kernel~lnterrupt (Ядро~Прервать), что­
              бы прервать работу ядра, введите У и нажмите клавишу           <Enter>.
              Приложение завершит работу, как показано на рис.      10.1 О. Обратите вни­
              мание на то, что сообщение выводится внутренним обработчиком. Внеш­
              ний обработчик никогда не будет вызван, потому что внутренний обра­
              ботчик перехватывает все исключения.

         7.   Щелкните на кнопке     Run Cell   (Выполнить ячейку).

              Приложение попросит ввести целое число.




                                                 ГЛАВА   1О   Обработка ошибок        207
  ln   [r]:   TryAgain = 7rue
              vhile TryAgain:
                 try:
                    Value = iнt ( input (" Bьeд;.iтe целое число. "))
                 ежсерt ValueError:
                    print ( "Нужно ввести целое число!" )
                    ti=y:
                       DoOver = inрut (" Поnытаться снова (y/n)? ")
                    except:
                       print (" Xopomo, увидимся в следующий раз!" )
                       TryAgain = False
                    eJ.se:
                       iL (str .upper(DoOver)      =   "N"):
                          TryAgain = False
                 except Keyboardinterrupt:
                    print ( "ВЫ нажали клавиши     Ctrl+c!" )
                    рrint (" Увидимся     в следупций раз! ")
                    TryAgain а Fa.lзe
                 else:
                    print (Value)
                    TryAgain = False

              введите целое     число.   Hello
              Нужно ввести целое     число!
              Попытаться снова     (y/n)?   У


              Введите   целое   число.



       Рис.   10.9. Использование цикла позволяет приложению обрабатывать
                                            ошибки ввода

 8.    Выпоnните команду Kernelqlпterrupt (ЯдроqПрервать), чтобы прервать
       работу ядра, введите значение             5 . 5 и нажмите кnавиwу <Enter>.
       Приложение завершится, как показано на рис.               10.11. На этот раз сообщение
       выводится внешним обработчиком. В пп.             6 и 8 пользователь завершает работу
       приложения, нажимая соответствующую комбинацию клавиш, но в каждом из
       случаев вызываются разные обработчики.




Генерирование исключений
  До сих пор в примерах главы мы занимались обработкой исключений. Воз­
никала та или иная нештатная ситуация, и приложение определенным обра­
зом реагировало на нее. Но иногда вы не знаете заранее, на этапе разработки
приложения, как обработать ошибку. Возможно, ошибка даже не подлежит об­
работке на текущем уровне, и ее нужно передать на какой-то другой уровень
для обработки. Короче говоря, в определенных сиrуациях приложение должно
генерировать исключение. В следующих разделах описаны распространенные
сценарии, когда это происходит.




208     ЧАСТЬ 2      Основы программирования на Python
      In [13]:     TryAgain = True
                   while TryAgain:
                      try :
                         Value = int ( input          ( "Введите целое число.    ") )
                      except ValueError:
                              print ( "Hyжнo    ввести целое число!" )
                              try :
                              DoOver       =
                                         inрut ( "Попытаться снова (y/n)? ")
                           except :
                              print ( "Xopomo, увидимся в следующий раз!" )
                              TryAgain     False=
                           else :
                              if (str . upper (DoOver)     "N") :
                                   TryAgain = False
                        except Keyboardinterrupt:
                           print ( "Bы нажали клавиши Ctrl+C!" )
                              рrint ( "Увидимся в следующий раэ!" )
                           TryAgain = Fa.lse
                        else:
                           print (Value)
                           TryAgain = Fa.lse

                   Введите      целое    число.     Hello
                   Нужно      ввести целое      число!
                   Попытаться снова          (y/n)? У
                   Введите      целое    число.  5.5
                   Нужно      ввести    целое   число!
                   Попытаться снова          (y/n)?    У
                   Хорошо,      увидимся    в следующий раз!


            Рис.   10.1 О.   Внутренний обработчик исключений позволяет
                             запрашивать повторный ввод данных


Генерирование исключений в нештатных ситуациях
  В этом примере демонстрируется генерирование простого исключения, не
требующего ничего особенного. Мы генерируем и тут же обрабатываем ис­
ключение.



 1.   Введите следующий код в блокноте.

      try:
         raise ValueError
      except ValueError:
         рrint("Исключение            ValueError 1 ")
      Вряд ли есть какая-то практическая польза от этого кода, но он дает общее
      представление о том, как генерируются исключения на простейшем уровне.
      В данном случае исключение генерируется в блоке                  try ... except. В простей­
      шем случае просто указывается имя исключения. Можно также задавать аргу­
      менты для передачи дополнительной информации.



                                                         ГЛАВА   1О   Обработка ошибок      209
       In [1]:         TryAgain = True
                       while TryAgain:
                          try :
                              Value      = int ( inpllt ( "Bвeдитe   целое число.     " ))
                          exoept ValueError:
                              pr in t (" Нужно ввести целое число! " )
                              try :
                                  DoOVer = inрut ( "Попытаться снова (y/n)? " )
                              except :
                                    print ( "Xopomo, увидимся        в    следующий раз!" )
                                    TryAgain = False
                              else :
                                   (str .upper(DOOver)
                                    i~                                   "N" ):
                                  TryAgain = Fa.lse
                          exoept Keyboardinterrupt:
                              print ( "Bы нажали       клавиши   Ctrl+C! ")
                              рrint ( "Увидимся в следующий раз!" )
                             TryAgain = Fal.se
                          else :
                             print (Value)
                             TryAgain 2 Fa.lse

                       Введите   целое число.      5.5
                       вы нажали     клавиши    Ctrl+C!
                       Увидимся в        следующий раз!


       Рис. 10.11. Внешний обработчик исключений позволяет контролиро­
                         вать правильность ввода данных

             Обратите внимание на то, что в этом блоке                     try ... except    отсутствует
             предложение            else,   что редко встречается на практике. Как бы там ни
             было, предложение              else   является необязательным, в отличие от пред-
ЭАПОМНИ!
             ложения      except.
       2.    Щелкните на кнопке              Run Cell (Выполнить ячейку).
             Программа отобразит сообщение об исключении, как показано на
             рис.   10.12.


              In [1]:        try:
                                raise ValueError
                             except ValueError:
                                 рrint ( "Исключение      ValueError!" )

                             Исключение      ValueError!

              Рис. 10.12. Чтобы сгенерировать исключение, достаточно
                                    выполнить инструкцию         raise




210        ЧАСТЬ   2    Основы программирования на                   Python
Передача информации об ошибке вызывающему коду
  В Pythoп обеспечивается исключительно гибкая обработка ошибок, по­
скольку можно передавать информацию вызывающему коду независимо от
используемого исключения. Конечно, вызывающий код не знает заранее о том,
что ему передаются аргументы, и это приводит к определенным трудностям.

Если вы работаете с чужим кодом и не знаете, доступна ли дополнительная
информация, вы всегда можете использовать методику, описанную во врезке
"Получение списка аргументов исключения".
  Вы наверняка задались вопросом, можно ли предоставить лучшую инфор­
мацию при работе с исключением                     ValueError,        чем та, что передается встроен­
ными средствами Pythoп. Ниже показано, как это сделать.

 1.    Введите сnедующий код в бnокноте.

       try:
          Ех = ValueError ()

          Ex.strerror ="Значение должно находиться в                               пределах           от   1   до    10."
          raise Ех
       except ValueError as е:
          print ("Исключение ValueError ! ", е. strerror)
        Исключение          ValueError          обычно не включает атрибут                  strerror           (строка с
       описанием ошибки), но его можно добавить путем простого присваивания
       значения. Генерируемое исключение перехватывается предложением                                               except,
       которое получает доступ к его атрибутам через объект е. Нужное нам значе­
       ние содержится в переменной е.                  strerror.
 2.     Щеnкните на кнопке              Run Cell (Выпоnнить ячейку).
        Приложение отобразит расширенную информацию об исключении
        ValueError, как показано                на рис.    10.13.

  In   [2]:    try:
                   Ех ~ ValueError()
                   Ex.strerror = " Значение         должно    находиться     в   пределах   е>т   1   до   10. "
                   rOLise   Ех
               except ValueError OLS       е:
                   рrint (" Исключение     ValueError!" , e.strerror)

               Исключение        ValueError!    Значение    должно   находиться     в пределах        от   1   до   10.

      Рис.   7О. 7З.   К любому исключению можно добавить информацию об ошибке




                                                              ГЛАВА     10       Обработка ошибок                         211
Создание и использование
настраиваемых исключении
                                                    "

  В   Python   доступно множество стандартных исключений, которые следует
использовать в большинстве ситуаций. Эти исключения невероятно гибкие и
легко поддаются модификации (разумеется, в разумных пределах), если возни­
кает такая необходимость. Например, в предыдущем разделе демонстрирова­
лось, как изменить исключение       ValueError таким образом, чтобы оно включа­
ло дополнительные данные. И все же бывают ситуации, когда вы вынуждены
создавать настраиваемые исключения, поскольку ни одно из стандартных ис­

ключений не подходит. Это может понадобиться при работе с базами данных
или веб-службами.

            Пример, рассматриваемый в этом разделе, может показаться немно­
            го сложным, поскольку мы еще не работали с классами. О них мы
            детально поговорим в главе    15.   Можете смело пропустить этот раз­
ВНИМАНИЕ/
            дел и вернуться к нему после того, как прочитаете главу        15.
   В приводимом ниже примере демонстрируется быстрый способ создания
настраиваемых исключений. Для этого нам нужно создать класс, основанный
на существующем исключении. Чтобы немного облегчить задачу, мы создадим
новое исключение на основе исключения           ValueError.   По сравнению с подхо­
дом, описанным в предыдущем разделе, это дает нам то преимущество, что

любой программист, который впоследствии будет работать с данным кодом,
сможет четко понять, каким именно образом модифицируется исключение
ValueError. Кроме того, это упрощает работу с измененным исключением.

 1.    Введите следующий код в блокноте.

       class CustomValueError(ValueError):
          def    init (self, arg):
              self.strerror = arg
              self.args = {arg)
       try:
          raise CustomValueError("Знaчeниe должно находиться        в   пределах
              от 1 до 10.")
       except CustomValueError as е:
          рrint("Исключение CustomValueError!", e.strerror)

      Функционально это тот же пример, что и в предыдущем разделе, только здесь
      одна и та же информация помещается в атрибуты        strerror и args, благодаря
       чему разработчик может получить доступ к обоим атрибутам (что обычно
       и происходит на практике).



212     ЧАСТЬ   2   Основы программирования на          Python
             Вначале мы создаем класс             CustomValueError, который                использует класс
             исключения      ValueError в          качестве стартовой точки. Функция-конструк­
             тор   _ ini t _ ()   предназначена для создания нового экземпляра класса.
             Класс можно рассматривать как чертеж здания, а экземпляр                               -       как само
             здание, построенное на основе этого чертежа.

             Заметьте, что атрибуту           strerror непосредственно присваивается зна­
             чение, тогда как атрибут          args получает его в виде массива. Переменна­
             я-член   args    обычно содержит массив всех аргументов исключения, так
ЗАПОМНИ!     что это стандартная практика, даже если атрибут                          args   содержит лишь
             одно значение, как в данном случае.

             Код, генерирующий исключение, здесь понятнее, чем в случае непо­
             средственного изменения исключения                       ValueError.       Все, что нам нужно
             сделать,    -   вызвать инструкцию            raise, указав        имя исключения и список
             передаваемых вместе с ним аргументов.

       2.    Щеnкните на кнопке Run               Cell (Выпоnнить ячейку).
             Программа выведет информацию о настраиваемом исключении, как по­
             казано на рис.     10.14.

  In [3] : olasa customValueError(ValueError):
              def    init (self, arq):
                  self.эtrerror • arg
                  эelf .a rqэ • {arg}
            try:
               r:aise фэtomValueError(" Эн aчeниe должно находиться в пределах от 1 до 10. ")
            except customValueError а• е:
               print. (" Исключение   ~U'J'tDmValueError 1 " ,   е. зtrerror)


            ИсКЛDчение   cuэtomValueError!      Значение доnжио      находиться   в   пределах от       1   до   10.

   Рис.    10. 14. Благодаря настраиваемым исключениям код становится более
                                                понятным




Использование предложения                                                   finally
  Обычно любые исключения должны обрабатываться таким образом, чтобы
приложение не завершало работу аварийно. Но иногда ничего нельзя сделать,
и аварийное завершение неизбежно. В таком случае наша цель                                    -         позволить
приложению корректно завершиться, т.е. закрыть все файлы для предотвраще­
ния потери пользовательских данных и выполнить другие задачи подобного
рода. То есть нужно сделать все возможное, чтобы минимизировать ущерб для
системы и данных.

  В подобной ситуации на помощь приходит предложение                                       finally.              В нем
можно выполнять любые завершающие действия. Обычно его стараются
сделать максимально кратким, включив только те вызовы, которые гаранти-




                                                            ГЛАВА     1О    Обработка ошибок                           213
рованно завершатся успешно и не вызовут дальнейших проблем. Крайне важ­
но закрыть все файлы, завершить пользовательский сеанс и выполнить другие
необходимые действия, после чего позволить приложению аварийно завер­
шиться, прежде чем произойдет что-нибудь совсем плохое (например, систем­
ный сбой). И все это можно сделать с помощью предложения                         finally, как
продемонстрировано в следующей пошаговой инструкции.

       1.    Введите сnедующий код в бnокноте.

             import sys
             try:
                raise ValueError
                   рrint("Генерирование        исключения.")
             except ValueError:
                   рrint("Исключение    ValueErrorl")
                sys.exit()
             finally:
                print ("Уделим     внимание последним деталям.")
             print("Этoт      код не   будет    выполняться.")


             В этом примере программа генерирует исключение                ValueError. Пред­
             ложение    except    выполняется как обычно. Вызов          sys. exi t () означает,
             что приложение завершает работу по окончании обработки исключения.
             Вот почему финальный вызов функции              print ()   никогда не произойдет.

             Код предложения       finally      выполняется всегда. И не важно, возникло
             исключение или нет. Код, находящийся в этом блоке, должен быть уни­
             версальным, таким, который всегда нужен. Например, при работе с фай-
ЗАПомни1     лом в блок     f inall у включается    код закрытия файла, гарантирующий, что
             данные не будут повреждены, оставаясь в памяти, а не на диске.

       2.    Щеnкните на кнопке        Run Cell (Выпоnнить ячейку).
             Приложение выведет сообщения, находящиеся в предложениях                    except
             и   finally,   как показано на рис.    10.15. Вызов sys. exit ()   предотвращает
             вызов любого последующего кода.

             Учтите, что это не является нормальным завершением приложения, и
             Notebook выводит соответствующую информацию по данному поводу.
             В других IDE, таких как IDLE, приложение просто завершает работу, не
ЗАПОМНИ\     выводя никакой дополнительной информации.

       3.    А теперь закомментируйте вызов ValueError, предварив его двумя
             симвоnами решетки, как показано ниже:


             ##raise ValueError
             Это позволит лучше понять, как работает предложение              finally.
       4.    Снова щеnкните на кнопке            Run Cell.



2Ц.        ЧАСТЬ   2 Основы программирования на Python
   Приложение отобразит ряд сообщений, включая сообщение блока                                                                                 finally,
   как показано на рис.                                       10.16. Это                  показывает, что предложение                    finally выпол­
   няется всегда, поэтому используйте его аккуратно.


     1.irport    зуэ
     try:
        rUse ValueError
           r1n':" ("'    "lft.r"<fi~-.ea. ;.t      -~11JY-fet.Y.ll   ")
     ••a.pt VailueError:
         р..-Н•' ("И.:1<"..•'1.J"Jo:::tt~ ~   Vdl"eEr.i;·~r   ! ")
         .sys.exit ()
     tinally:
         1::11лr ("          l~M      \hИМН>'       tt"'C.ЛQ;!hlill J.i6'Т-i   ю..   ")
     рrнн.(":.r.т          к•.д    h" С:,;д~т      !!'WI   !H•l'l't«·n "1

     Исключекие         ValueError !
     У.цепии     внимание          посnе.11НЮ4 детаЛЯN.


     An exception ha.s occurred, use ~tb t.o see the !ull traceb.ack .




     F: \Aш1condaЗ\l.ib\5ite-p1cU9es\IPython\core\i11terillct.ive5hell .py:2911: U5erWarnin9:                           то   exit: use ' exit '. •quit' , or Ct
     rl-D.
       varn("To         eм:it:       use 'ex..it', 'qu it', or Ct.rl-D.",                   зtacklevel•l)




Рис. 1О.15. Использование предложения f in а 11 у для выполнения необходимых
               действий перед завершением работы приложения




        In [2] : import sys
                                      try:
                                                 11# rai"                   ValueErz·or
                                                рrint ( "Генерирование исключения." )
                                      except ValueError :
                                                рrint ( "Исюпочение                              ValueError!" )
                                                sys . exit()
                                      finally :
                                                рrint ( "Уделим внимание                                     последним деталям." )
                                      print ( "Этoт                         код не будет                    выполняться .")


                                      Генерирование                                  исключения.

                                      Уделим                внимание                      последним деталям.
                                      Этот           код не                 будет           вьmолняться .


         Рис. 70.16. Необходимо учитывать, что предложение finally
                              выполняется всегда




                                                                                                     ГЛАВА      1О   Обработка ошибок                             215
 ро      с­
сион    nьнь1е
       АИКИ
прог    ам-
ми~     вания
на ~у   hon
В ЭТОЙ ЧАСТИ .•.


))   Импорт и использование пакетов


))   Работа со строками

))   Создание списков объектов

))   Использование коллекций для расширения
     функциональности списка

))   Разработка классов
Глава            11

Пакеть1

  В ЭТОЙ ГЛАВЕ ...

 »    Структурирование кода

 )) Добавление кода из внешних источников
 )) Поиск и просмотр библиотек кода

 ))   Получение и чтение документации к библиотекам




п
            оскольку примеры, используемые в книге, довольно небольшие, функ­
            циональность результирующих приложений тоже будет сильно ограни­
            чена. Реальные приложения, даже самые маленькие, содержат тысячи
строк кода. Нередко встречаются приложения, содержащие миллионы строк
кода. Представьте себе, что вы пытаетесь что-либо найти в подобном огром­
ном файле. Вряд ли у вас это получится. Короче говоря, нужен какой-то способ
структурирования кода, позволяющий разбить его на фрагменты, которыми
было бы легче управлять. Решение, применяемое в         Python,   заключается в раз­
мещении кода в отдельных блоках, называемых пакетами (или модуля.ми, что
одно и то же.) Часто применяемые пакеты, содержащие исходный код общего
назначения, называются библиотека\1и.

              Пакеты содержатся в отдельных файлах. Чтобы использовать пакет,
              необходимо попросить     Python   загрузить файл и подключить его к
              текущему приложению. Процесс получения кода, находящегося во
 ЗАПОМНИ!
              внешних файлах, называется и.нпорто.\1. В нескольких примерах
              книги уже было продемонстрировано использование инструкции
              import;   в этой главе мы рассмотрим его подробнее.
   В процессе начальной установки          Python   создает ссылку на библиотеки об­
щего назначения. Вот почему можно просто добавить в программу инструк­
цию   import с именем библиотеки, и Python найдет ее. Тем не менее полезно
знать, как найти файлы на диске, если нужно обновить их или добавить соб­
ственные пакеты и библиотеки в список файлов, используемых в            Python.
   Код библиотеки является автономным и хорошо документированным (по
крайней мере, в большинстве случаев). Необходимость просматривать исход­
ный код библиотеки обычно не возникает, однако вы вправе это сделать, если
хотите разобраться, как он работает. Кроме того, просматривая код библиоте­
ки, можно научиться новым приемам программирования, которые вы навряд

ли встретите где-то еще. То есть это не обязательная, но полезная практика.
   Главное, что нужно знать,        -   как получить документацию по библиотеке
Python.     В этой главе будет показано, как воспользоваться документацией в про­
цессе создания приложения. Исходный код примеров данной главы находится
в файле BPPD_ 11 _ Interacting_with_Packages. ipynb (см. введение). Примеры
пакетов доступны в файле BPPD 11 Packages. ipynb.



Создание блоков кода
   Код становится проще использовать, редактировать и понимать, когда он
разбит на логические блоки. По мере разрастания приложения управлять ко­
дом, хранящимся в одном файле, будет все сложнее и сложнее, и в какой-то мо­
мент вы поймете, что уже не в состоянии контролировать настолько большой
листинг.



               В данном случае термин код употребляется в широком смысле. Бло­
               ки кода могут включать:


 ЭАПОМНИI       >>    классы;

                »     функции;

                »     переменные;

                »     исполняемые файлы.

   Коллекции, состоящие из классов, функций, переменных и исполняемого
кода, называются атрибутами. Пакет содержит атрибуты, к которым пользо­
ватель обращается по именам. Далее мы рассмотрим, как именно осуществля­
ется доступ к пакетам.




220         ЧАСТЬ 3    Профессиональные методики программирования на         Python
              Исполняемый код может быть написан на других языках программи­
              рования. Например, нередко можно встретить пакеты, написанные
              на С/С++ (а не на   Python).   Причина, по которой некоторые разработ­
m<НИЧЕСКИЕ
ПОДРОБНОСТИ   чики используют готовый код, заключается в том, что это позволяет
              сделать приложение      Python   более быстрым, менее ресурсоемким и
              лучше использующим ресурсы конкретной платформы. Однако при­
              менение исполняемого кода приводит к тому, что приложение стано­

              вится менее переносимым (способным работать на других платфор­
              мах), если только в вашем распоряжении нет пакетов исполняемого
              кода для каждой платформы, которую нужно поддерживать. Кроме
              того, многоязычные приложения сложнее поддерживать, поскольку

              в вашей команде должны быть разработчики, знающие каждый из
              компьютерных языков, используемых в приложении.



   Самый распространенный способ создания пакета              -   вынести группиру­
емый код в отдельный файл. Например, можно написать процедуру печати,
предназначенную для использования в разных частях приложения. Она не яв­
ляется самостоятельной программой, это просто структурная часть приложе­
ния, но она выделяется в отдельный файл, поскольку обращение к ней проис­
ходит из разных файлов и, возможно, даже из других программ. Повторное
использование кода      -   одно из главных преимуществ пакетов.

   Для простоты в примерах этой главы используется общий пакет. Он не осо­
бо полезен, его назначение- демонстрация принципов работы с пакетами.
Откройте проект Python 3 Notebook, назовите его BPPD_ 11 _ Packages и введи­
те код, показанный в листинге 11.1. После этого загрузите код в виде ново­
го файла Python с именем BPPD_ 11 _ Packages. ру, выбрав в блокноте команду
FileqDownload AsqPython      (.ру).


ЛИстинr       11.1.   Простой демонстрационный пакет

def SayHello(Name):
   рrint("Привет, ", Name)
   return
def SayGoodbye(Name):
   print("Пoкa, ", Name)
   return

    Может понадобиться скопировать полученный файл в существующую пап­
ку BPPD, в зависимости от того, куда ваш браузер обычно загружает файлы.
Если все сделано правильно, файл появится на панели           Notebook,   как показано
на рис.   11.1.   Все существенно упростится, если выполнить импорт блокнота,
как описывалось в главе      4.


                                                            ГЛАВА   11   Пакеты   221
       JUpyter                                                                                                                                              ,,....
                                                                                                                                                    ""'
   г   DnO<I~ mridu~                                                                                                            10   месяце в неэа.а


   г   (""] NФ Sh111~                                                                                                                З t.еесяце нюед

   г   !'1r>к11111•,                                                                                                                    2 mQВ Н8311Л

   г   l'J ProioctsN,t6.Ja·1s                                                                                                              ""'...,.,,
   г   1....,   S,1\лj,;,,..,._                                                                                                         2 rooe   назад

   г    -       -,flJ!h<:\<,                                                                                                            2 rooe
                                                                                                                                        ,_...,.,,
                                                                                                                                                 маэао.

   г   1JV1t!('(;


   г   r--\111tuqo.                                                                                                                  З wвсяце нl!lэел

   г   Г1 Weti'i·J•mP•O.f(YJs

   г   r:-i     'N,нlo.<.,p1 .~
                                                                                                                                           ""'""""'
   г   li       вrro 04 U'f•dnrot.-. ·iцriti
                                                                                                                                           ""'""""'
                                                                                                                                        uесяцнеэад         225kB

   г   11       (J 'Pt!   IJ4 _t11()(;ritai101l IP11!t/                                                                              4 Щ!САЦ8 1Ы!138д      117kВ


   г   jl UH'O_{J'1_St11r1p1< ~рун{                                                                                                  d месяца наэад        175 k8

   г   lil      Rrrt> ·)"':       ~·· 1f19   -'-·\d MMfv:n<J lf\firm>1!•m             ,,.,,,                                            1.10СJЩМ838Д       491 k8

   г


   г
       li Bl'I[} N_Mнiнt>,J<flЧ 1гlOtr1<.1lf'fl~

       li       111-'PU Of1_1\.t..1k"·1~J_/1eo<.101;<.1'Y'«1
                                                                                                                                       24дня lt83Q,Q


                                                                                                                                      20~..аэел
                                                                                                                                                           .""
                                                                                                                                                           125k8

       1/1 111 PI) {~1                              f.lr,1)(j''1,,c J11-,k." 1tц11b                                                   21 ДеtlЬН838Л
   г

                                                                                                                                                            ""
                                  i-'01k)m1.111J


   г   il       (IJJl'I> 1U fн•<1'~11J_ wm-, 1 Щ'l'i l(Jyl\\1                                                                           2 дня    наэвд     252kB

   г   li       Ш·РО 11 ГнrtoOUr'; 1r1~11t.                                                                                             2дН АН83М           16 kB

   г


   г


   ~
       IJj til'Pfl 11 !П1(Jfж;ltrig \Vith Piti kl:lfl""•

       J1 fll'l·0_11_ Рtк!r~.:ю

       LJ lii'f'[)        11      'IК!r,'hl'-·~
                                                  !ру•\11


                                                  IJY
                                                                        .l)y11U                                                         2дНЯ»8Заll

                                                                                                                                        2 дня    назед


                                                                                                                                        2ДН11Н8Эf1Д
                                                                                                                                                            ....
                                                                                                                                                           125kB



                                                                                                                                                            1808



                               Рис.               77. 7.         Не забудьте поместить копию пакета в папку BPPD

  В нашем пакете содержатся две простые функции: SayHello () и SayGood
Ьуе (). В обоих случаях нужно указать аргумент Name, и функция выведет его
на экран вместе с приветствием для пользователя, после чего вернет управле­

ние вызывающему коду. Конечно, можно создать и более сложные функции, но
для целей главы вполне подойдут и эти.


Типы пакетов
  Система поддержки                                                                   Python   огромна. Вы никогда не будете использовать ее
в полном объеме, даже в самых требовательных приложениях. И дело даже не
в громоздкости                                              Python,                   который на самом деле довольно лаконичен по срав­
нению со многими другими языками программирования. Необходимость та­
кой поддержки объясняется наличием большого количества пакетов                                                                                            Python,
которые применяются везде: в интенсивных научных вычислениях, задачах

искусственного интеллекта, космических исследованиях, биологическом мо­
делировании и пр. Однако не все эти пакеты доступны на постоянной основе,
поэтому нужно знать, какие пакеты поддерживает                                                                   Python   и где их можно найти
(в порядке предпочтения).

                                      »                 Встроенные пакеты. Они позволяют решать все распространен­
                                                        ные задачи и находятся в папке AdacondaЗ \Lib. Все, что вам нужно
                                                        сделать, чтобы их использовать,                     -   импортировать их в свое прило­
                                                        жение.



222                ЧАСТЬ                          3         Профессиональные методики программирования на                                                 Python
            >>    Поnьзоватеnьские пакеты. Как будет показано далее, можно соз­
                  давать собственные пакеты и использовать их в случае необходимо­
                  сти. Они обычно находятся в том же каталоге, что и файлы проекта,
                  и вы просто импортируете их в приложение.

            »     Пакеты   conda. Существует множество пакетов, специально разра­
                  ботанных для Anaconda. Многие из них доступны по адресу http:     //
                  conda. anaconda. org/mutirri. Прежде чем их     использовать, нуж­
                  но установить их с помощью утилиты conda в      командной строке
                  Anaconda, как будет описано в разделе "Установка пакетов conda".
                  После завершения установки пакет можно использовать подобно
                  любому встроенному пакету.

            »     Пакеты, не являющиеся пакетами        conda. Тот факт,   что пакет не
                  предназначен специально для использования с         Anaconda, не оз­
                  начает, что его нельзя использовать. Можно найти огромное коли­
                  чество полезных пакетов, разработанных сторонними разработ­
                  чиками. Для их установки используется утилита командной строки
                  Anaconda pip, как будет описано в разделе"Установка пакетов с по­
                  мощью утилиты   pip". После установки   пакета может потребоваться
                  сконфигурировать его в соответствии с требованиями разработ­
                  чика. После того как пакет настроен, он используется как обычный
                  встроенный пакет.



Kew    пакетов
   В   Anaconda   имеется кеш пакетов, благодаря которому можно легко взаи­
модействовать с пакетами       Anaconda    с помощью утилиты командной строки
conda. Чтобы увидеть, как используется кеш пакетов, откройте командную
строку Anaconda или окно терминала, воспользовавшись ссылкой Anaconda
Prompt в папке AnacondaЗ. Введите команду conda list, чтобы просмотреть
список установленных пакетов. На рис.         11.2   показаны типичные результаты,
которые получены в данном случае.



            Обратите внимание на то, что имя пакета отображается в том виде, в
            котором оно выводится в окне       Anaconda. Также отображаются вер­
            сия пакета и соответствующая версия        Python. Ниже перечислены
 ЗАПОМНИ!
            основные команды      conda,   применяемые для управления пакетами.


             >> conda clean. Удаление неиспользуемых пакетов.
             » conda config. Конфигурирование кеша пакетов.
             » conda create. Создание новой среды conda с конкретным списком
                  пакетов, что позволяет упростить управление пакетами и ускорить

                  работу приложения.



                                                           ГЛАВА 11    Пакеты      223
 ,....., Админисrратор: Anaconda Promp~~.mj!I(-· , , _


 (bese) C: \Users\Alex>conda list
   peckeges in environ•ent et F : \AnecondeЗ :

   Neme                     Uersion                                 Build    Chennel
  ipyw_jleb_nb_ext_conf     0 . 1 .0                     pyЗ6he6757f0_e
  lebester                  0 . 7 . 10                   pyЗ6hcd07829_e
  neconde                   5 . 2 .0                               ру36_З
  neconda-client            1 . 6 . 1Ч                             руз6_е
  neconda-navigetor         1.8.7                                  руз6_е
  neconde-project           0.8 .2                       py36hfed2e28_e
  sn1crypto                 0 . 2ч . 0                             руЗ6_0
  stroid                    1 .6 . З                               руз6_е
  stropy                    З.0.2                         руЗ6hЧ52е1еЬ_1
  ttrs                      18 . 1 .0                              ру36_0
  ebel                      2.5.З                                  руЗ6_0
  eckcell                   0.1 .0                                 руз6_е
  eckports                  1.0                           руЗ6h81696е8_1
  ackports .shutil_get_ter•inal_size 1 . 0.0                        ру36h79аЬ8ЗЦ_2
  eeutifulsoupЧ                      Ц .6 .0              руЗ6hdЧсс5е8_1
  iterrey                           0 .8 .1               py36hfe6e2cd_1
  kcherts                           0.2                   py36h7e685f7_0
  las                               1. 0                             •kl
  leze                               0 . 11 . З           руЗ6h8е29се5_0
  leach                              2. 1 .З                       руЗ6_0
  losc                               1 .1Ц . з                heS1fdeb_e
  okeh                               0 . 12 . 16                   руЗ6_0
  oto                                2 . Ч8 . 0           py36h1аП6d2_1
  ottleneck                          1. 2 . 1             py36hd119dfe_0
  zip2                               1.0 . 6                  hfa6e2cd_S
  a-certificates                     2018 . 03.07                       0
  ertifi                             2018 . Ч . 16                 руЗ6_0
  ffi                                1.11 .5              руЗ6h9Ч5ЧЕ10d_0
  herdet                             з.0 . ц              руЗ6hЧ20се6е_1


       Рис. 11.2. Список пакетов Апасопdа, полученный с помощью утилиты
                              команд ной строки conda

               ))       conda help.    Вывод полного списка команд           conda.
               ))       conda info.     Отображение сведений о конфигурации             conda,   в том
                        числе о местонахождении пакетов            conda    и новых пакетов.

               ))       conda install. Установка         одного или нескольких пакетов в задан­
                        ную по умолчанию или указанную среду               conda.
               ))       conda list. Вывод списка         пакетов   conda с настраиваемым уровнем
                        детализации. Можно указать, какие именно пакеты должны выво­
                        диться и в каких средах их следует искать.

               ))       conda rernove. Удаление одного         или нескольких пакетов из кеша па­
                        кетов.


               ))       conda search.       Поиск указанных пакетов с помощью заданных кри­
                        териев поиска.

               ))       conda update.          Обновление некоторых или всех пакетов в кеше
                        пакетов.



224     ЧАСТЬ       3     Профессиональные методики программирования на                        Python
            Поскольку всю эту информацию невозможно держать в голове,
            пользуйтесь переключателем командной строки               --help    для полу­
            чения подробных сведений по конкретной команде. Например, для
  СОВЕТ
            получения дополнительных сведений о команде            conda list       введите
            conda list --help         и нажмите клавишу      <Enter>.



Импорт пакетов

   Чтобы воспользоваться пакетом, его нужно импортировать.                 Python   помеща­
ет код пакета вместе с остальной частью приложения в память, как будто был
создан один огромный файл. При этом сами файлы на диске не меняются                      -
это по-прежнему разные файлы, просто            Python   трактует их код по-другому.

            Импортировать пакеты можно двумя способами, в зависимости от
            ситуации.


 ЗАПОМНИ!    ))   Инструкция      import.   Применяется в случае импорта целого паке­
                  та. Этот способ чаще всего используется разработчиками кода, по­
                  скольку экономит время и требует всего лишь одной строки кода.
                  С другой стороны, такой подход требует больше памяти, чем под­
                  ход, предусматривающий выборочный импорт атрибутов.

             ))   Инструкция      from ... import.   Применяется в том случае, когда
                  нужно выборочно импортировать отдельные атрибуты пакета. Это
                  позволяет экономить ресурсы, но сам по себе такой способ слож­
                  нее. Кроме того, если попытаться использовать атрибут, который не
                  был импортирован,      Python выдаст ошибку. Да, пакет содержит атри­
                  бут, но   Python не видит, поскольку он не был импортирован.

   В следующих разделах эти инструкции будут рассмотрены подробнее.


   ВЗАИМОДЕЙСТВИЕ С ТЕКУЩИМ КАТАЛОГОМ PYTHON


   Каталог, который    Python    использует для доступа к коду, влияет на то, какие
   пакеты можно загрузить. Каталог библиотечных файлов всегда включен в
   список мест, к которым       Python может получить доступ, но Pythoп ничего не
   знает о каталоге, который вы используете для хранения исходного кода, если
   только вы не попросите просматривать этот каталог. Это требует знакомства с
   каталожными функциями, позволяющими сообщить             Python, где искать нужные
   фрагменты кода. Соответствующий пример можно найти в файле BPPD 11
   Directory. ipynb (см.       введение).




                                                              ГЛАВА   11    Пакеты      225
      1•    Откройте новый бnокнот.

      2.    Введите   import os.
            Это действие приводит к импорту библиотеки       os.   Ее нужно импортиро­
            вать, чтобы заменить текущий каталог (место, которое     Python ищет на дис­
            ке) рабочим каталогом данной книги.

      3.    Введите    prin t ( os. getcwd () )   и щеnкните на кнопке        Run Cell (Вы­
            поnнить ячейку).

            В результате вы увидите имя текущего рабочего каталога        (cwd),   который
            используется в   Python для   получения локального кода.

      4.    В новой ячейке введите     for entry in os. listdir () : print (entry)
            и щеnкните на кнопке     Run Cell.
            На экране отобразится список записей каталога. Это позволяет опреде­
            лить, находится ли нужный вам файл в каталоге   cwd. Если    нет, нужно заме­
            нить текущий каталог каталогом, содержащим нужный файл.

  Чтобы изменить местоположение текущего каталога, воспользуйтесь методом
  os. chdir (),указав имя каталога в виде строки, например os. chdir ('с:\
  MyDir' ) . Но обычно вы увидите, что в каталоге cwd находятся файлы текуще­
  го проекта.




Использование инструкции                     import
  Для импорта пакетов в            Python   чаще всего применяется инструкция         import.
Этот подход достаточно быстрый и гарантирует, что весь пакет будет готов к
использованию. Выполните следующие действия.

 1.        Откройте новый бnокнот.
           Можете также воспользоваться файлом исходного кода в Р Р D                     11
           Interacting_wi th_Packages. ipynb (см. введение).
 2.        При необходимости перейдите в катаnог загружаемого исходного кода.
           Обычно   Notebook   выбирает корректный каталог для использования файлов
           исходного кода, поэтому выполнять данный шаг не понадобится. Прочитайте
       также врезку"Взаимодействие с текущим каталогом             Python':
 З.        Введите   import BPPD_ 11_ Packages.
           Эта инструкция указывает    Python на необходимость импорта содержимого
           файла   BPPD_ 11 _ Packages. ру, который был создан в разделе "Создание бло­
           ков кода". Теперь вся библиотека готова к использованию.




226         ЧАСТЬ 3     Профессиональные методики программирования на Python
              Важно понимать, что Python также создает кеш пакета в подкаталоге
              _pycache                после первого импорта файла
                                                          BPPD _ 11 Packages. Если
              нужно внести изменения в пакет, удалите этот подкаталог, иначе Python
 внимлнив     продолжит использовать старый файл кеша вместо обновленного файла
              исходного кода.


              Кешированное имя файла включает версию     Python, для которой предна­
              значен пакет. В данном случае этоBPPD_ 11 _Packages. cpython-37. рус.
              Число 37 в имени файла означает, что файл относится к Python 3.7. Файл с
ТЕХНИЧЕСКИЕ   расширением . рус представляет собой скомпилированный файл Python,
ПОДРО6НОСТИ
              который используется для увеличения быстродействия приложения.

         4.   Введите        dir (BPPD_ll_Packages) и щелкните на кнопке Run Cell
              (Выполнить ячейку).

              На экране появится список содержимого пакета, который включает функ­
              ции   SayHello () и sayGoodЬye (),как показано на рис. 11.3. (Дополни­
              тельная информация будет приведена в разделе "Просмотр содержимо­
              го пакета':)



                             Импорт пакетов

                             Использование инструкции                          import
              In [5];        import BPPD_ll_Packages
                             dir (BPPD_ll_Packages)

              Out. [ 5] :    [   'SayGoodЬye'       ,
                                 ' SayHello ' ,
                                     builtins
                                     cached    .-
                                     doc
                                     file
                                     loader -
                                     name •
                                   _package_
                                     spec_']


                   Рис.     11.3. Pythoп    импортирует обе функции из пакета

         5.   В новой ячейке введите BPPD_ 11_Packages.                      SayHello ("Иван").
              Учтите, что имя атрибута                  -   в данном случае функцию SayHello () -
              нужно предварять именем пакета, т.е.                  BPPD_ 11 _ Packages. Два элемента
              разделены точкой. Подобным образов осуществляются любые обраще­
              ния к импортируемым пакетам.

         6.   BвeдитeBPPD_ll_Packages. SayGoodЬye ("Мария") и щелкните на
              кнопке        Run Cell    (Выполнить ячейку).



                                                                           ГЛАВА   11   Пакеты   227
       Функции     SayHello ()         и SayGoodЬye     ()   выводят ожидаемый результат, как по­
       казано на рис.        11.4.


                      In (2):        BPPD_ll_Packages.SayHello(" Ивaн" )
                                     BPPD_ll_Packages.SayGoodЬye ( "Mapия")


                                     Привет,     Иван
                                     Пока,     Мария



                      Рис.   11.4. Функции SayHello () и SayGoodbye ()
                                     выводят ожидаемый результат



Использование инструкции                          from ... import
   Преимущество инструкции                   from ... import    заключается в импорте из пакета
только необходимых атрибутов. Это означает, что пакет потребляет меньше па­
мяти и других системных ресурсов, чем при обращении к инструкции   import.
Кроме того, инструкция from ... import упрощает использование пакета, по­
скольку некоторые команды, такие как dir ( ) , отображают меньше информа­
ции или только ту информацию, которая вам действительно нужна. В результа­
те вы получаете только то, что хотите, и ничего больше. Ниже пошагово проде­
монстрировано использование инструкции                        from ... import.

        1.     Введите следующий код в блокноте, чтобы удалить пакет BPPD_ 11_
               Packages       из среды.

               import sys
               del sys.modules["BPPD_ll_Packages"J
               del BPPD_ll_Packages
               dir(BPPD_ll_Packages)
        2.     Щелкните на кнопке Run Cell (Выполнить ячейку).
               Появится сообщение об ошибке, показанное на рис. 11.5. Вывод содер­
              жимого пакета           BPPD_ 11 _ Packages      невозможен, поскольку этот пакет
               больше не загружается.
        3.     В новой ячейке введите from BPPD_ 11_ Packaqes import SayHello.

               Python   импортирует функцию             SayHello   (),которая была создана в раз­
              деле "Создание блоков кода': Только эту конкретную функцию можно те­
               перь использовать в приложении.

               При желании можно импортировать весь пакет. Это реализуется двумя
               способами. Во-первых, можно указать список атрибутов через запятую,
               например       from BPPD_ 11 _Packages import SayHello,           SayGoodЬye, или
 3АЛОМНИI      поставить звездочку(*) вместо имени атрибута. Звездочка              -   это символ
               подстановки, означающий импорт всего содержимого пакета.



228         ЧАСТЬ 3     Профессиональные методики программирования на Python
 In [13]:   iщport   зуз

            del зуs .modules ["BPPD_ll_Pac kages " J
            del BPPD_ll_Packages
            d ir (BPPD_ll_PackaQeS)


            Nam.eError                                  Traceback (most recent cal l last)
            <1python-1nput-13-&5656Sa3615a> in             ()
                  0  dal sys modules ["BPPD_ll_P&ak&qea" I
                     del BPPD_ll_Packages
            ----> 4 dir ( BPPD_l l _ Pa c kaQeЗ )
            N&!tl8!:rror: name 'BPPD_l l_PackaQes' is not defined


                       Рис.   11.5. Процесс удаления пакета из среды

      4.    Введите        dir (BPPD_ 11_ Packaqes)         и щеnкните на кнопке        Run Cell
            (Выпоnнить ячейку).

            Python отобразит сообщение об ошибке, показанное на рис. 11.5. Причи­
            на в том, что Python импортирует только те атрибуты, которые были яв­
            ным образом запрошены. Это означает, что пакет BPPD_ 11 _Pac k ages не
            загружен в память; в памяти находятся лишь конкретные его атрибуты.

      5.    В новой ячейке введите           dir (SayHello) и щеnкните на кнопке Run
            Cell (Выпоnнить ячейку).
            Отобразится список атрибутов, которые связаны с функцией                Sa yHell o () ,
            как показано на рис.       11.6 (и   это далеко не полный список) . Сейчас вам не
            нужно знать, что они означают; с некоторыми из них вы еще столкнетесь

            в книге.


      6.    В новой ячейке введите SayHello ("Андрей") и щеnкните на кнопке
            Run Cell (Выпоnнить ячейку).
            Функция        SayHell o ()     выводит ожидаемый текст, как показано на
            рис.   11.7.
            Если атрибут был импортирован с помощью инструкции                   fr om... impo rt,
            имя атрибута больше не нужно предварять именем пакета, что упрощает
            доступ к атрибуту.

            Инструкция        from ... import может вызывать проблемы. Если у двух атри­
            бутов одно и то же имя, допускается импортировать лишь один из них. В
            то же время инструкция         i mpor t    предотвращает конфликт имен, который
вниМАНив    может иметь место в случае импорта большого количества атрибутов .
            Поэтому следует соблюдать осторожность при использовании инструк­
            ции    fr om... import.
      7.    В новой ячейке введите SayGoodЬye ("Григорий") и щеnкните на
            кнопке     Run Cell (Выпоnнить ячейку).
            Поскольку была импортирована только функция               SayHell o () , Python    ни­
            чего не знает о функции Sa yGood.Ь ye (), а потому отображает сообщение



                                                                    ГЛАВА   11   Пакеты       229
      об ошибке. Избирательный характер инструкции                          from ... import чреват про­
      блемами, когда вы предполагаете, что атрибут имеется, хотя на самом деле
      его нет.




                       In [16) :           di.r1 SayHello

                       Онt   ['   1о J :   ['     annotations
                                                  call
                                                  class
                                                  closure
                                                  code
                                                  defaults
                                                            -
                                                  delattr '
                                                  dict
                                                  dir
                                                  doc
                                                _eq_'
                                                  format
                                                _ge _
                                                _ get _
                                                _ getattribute_
                                                _ globals _
                                                _ gt_
                                                  hash
                                                  init
                                                  init subclass
                                                  kwdefaults
                                                  le
                                                  lt
                                                  module
                                                  name
                                                        -
                                                  ne     '
                                                  new
                                                _qualname_
                                                  reduce
                                                  reduce ех

                       Рис.       11.6. Использование функции di r ()
                                  для получения информации об
                                   импортируемых атрибутах


                                  In [8]:         SayHello   (" Андрей ")


                                                  Привет,    Андрей


                             Рис. 11.7.Для функции SayHello                  ()
                                 больше не нужно указывать
                                                  имя пакета




230    ЧАСТЬ     3   Профессиональные методики программирования на                              Python
Поиск пакетов на диске

  Чтобы можно было использовать код из пакета,             Python должен суметь    найти
пакет и загрузить его в память. Информация о местонахождении пакета хра­
нится в виде путей в        Python.   Всякий раз, когда вы запрашиваете импорт пакета,
Python   просматривает все файлы в своем списке путей, чтобы его найти. Ин­
формация о пути поступает из следующих трех источников.

             ))     Переменные среды. В главе      3 уже рассматривались переменные
                    среды   Python, такие как РУТНОNРАТН, которые сообщают Python о
                    местонахождении пакетов на диске.

             ))     Текущий каталог. Ранее уже говорилось о том, как изменить теку­
                    щий каталог   Python,   чтобы находить любые пакеты, используемые
                    приложением.

             ))     Каталоги, заданные по умолчанию. Даже если вы не определяете
                    никаких переменных среды, а в текущем каталоге отсутствуют ка­

                    кие-либо пригодные для использования пакеты,        Python все равно
                    может найти свои библиотеки в наборе каталогов по умолчанию, ко­
                    торые подключены как часть его собственной информации о пути.

  Знать информацию о текущем пути полезно, потому что отсутствие нужно­
го пути может привести к сбою приложения. Чтобы получить информацию о
пути, в новой ячейке введите  for р in sys .path: print (р) и щелкните на
кнопке  Run Cell (Выполнить ячейку). На экране появится информация о пути
(рис. 11.8). Ваш список может отличаться от показанного на рис. 11.8, в зависи­
мости о платформы, версии Python и установленных модулей Python.


                     Поиск пакетов на диске

         In [10]:    ~or р   in sys.path : print   (р)



                     F:\Anaconda3\python36.zip
                     F:\AnacondaЗ\DLLs
                     F:\AnacondaЗ\lib
                     F:\AnacondaЗ
                     F:\AnacondaЗ\lib\site-packages
                     F:\Anaconda3\lib\site-packages\win32
                     F:\Anaconda3\lib\site-packages\win32\lib
                     F:\AnacondaЗ\lib\site-packages\Pythonwin
                     F:\AnacondaЗ\lib\site-packages\IPython\extensions
                     C:\users\Alex\.ipython

    Рис. 11.8. Атрибут s ys. ра th содержит информацию о путях в системе



                                                             ГЛАВА 11     Пакеты     231
  На атрибут sys. ра th вполне можно положиться, но он далеко не всегда со­
держит все пути, которые может видеть                            Python.   Если вы не находите нужного
пути, проверьте другое место, где                       Python   ищет информацию. В следующей по­
шаговой инструкции показано, как это сделать.

 1,       В новой ячейке введите                 import os.
 2.       Введите           os . environ [ 'PYTHONPATH ' ] . spli t ( os. ра thsep) и щелкните
          на кнопке          Run Cell (Выполнить ячейку).
          Если переменная среды PYTHONPATH определена, то появится список путей,
          как показано на рис.              11.9. Если же эта переменная не определена, будет выда­
          но сообщение об ошибке.



          In { 9) :              import    оз
                                 o з . environ ['PY:~ONPA:g• ] . зplit оз . раthзер

                .... J :
          с ..lt.. ""'':!
                      ~
                                 [ 'C : \\ BP4D' ]

                                Рис.   11.9. Запрос информации о переменных среды

          Атрибут           sys. ра th не включает функцию spli t (), поэтому в данном примере
          используется цикл             for. А вот атрибут os. environ [ 'PYTHONPATH' ] поддер­
          живает эту функцию, поэтому ее можно использовать для создания списка
          отдельных путей.

          Функции           split ()      нужно предоставить значение, которое следует искать при
          разбиении списка элементов. Константа                      os. pathsep (переменная,   имеющая
          одно фиксированное значение) задает разделитель пути для текущей плат­
          формы, чтобы можно было использовать один и тот же код на любой платфор­
          ме, поддерживающей                 Python.

                    Атрибут sys. path поддерживает добавление и удаление элементов.
                     Например, если нужно добавить текущий рабочий каталог в спи­
                     сок пакетов, введите в ячейку блокнота                   sys. ра th. append ( os .
  СОВЕТ
                    qetcwd () )          и щелкните на кнопке        Run Cell (Выполнить ячейку).    При
                     повторном выводе содержимого атрибута sys. path новая запись до­
                     бавляется в конец списка. Аналогично, чтобы удалить запись, нуж­
                     но ввести         sys. ра th. remove (os. qetcwd () )          в ячейку блокнота и
                     щелкнуть на кнопке              Run Cell.


Загрузка пакетов из других источников
   Ваша копия                   Python и связанный с       ней компонент     Jupyter Notebook   поставля­
ются с широким ассортиментом пакетов, которые удовлетворят большинство


232         ЧАСТЬ           3    Профессиональные методики программирования на                    Python
потребностей. Вам довольно редко придется выходить за рамки этих пакетов,
разве что в целях эксперимента, поскольку в системе уже установлено доста­

точное количество пакетов. Конечно, при желании всегда можно придумать
новый способ решения задачи, который потребует нового кода и пакетов для
его хранения. Кроме того, некоторые задачи настолько специфичны, что вклю­
чение пакетов для их поддержки в стандартную установку приведет к пустой
трате ресурсов, поскольку большинство людей никогда не будут их использо­
вать. Следовательно, вам придется время от времени устанавливать пакеты из
Интернета или других источников.
  Чаще всего для получения новых пакетов применяются утилиты              conda   и
pip.   Но есть и пакеты, при установке которых используются другие методи­
ки. Утилиты   conda   и   pip   служат разным целям. Бытует множество неверных
представлений относительно этих двух менеджеров пакетов, но на самом деле
все сводится к тому, что  conda обеспечивает универсальное управление паке­
тами для широкого     спектра языков в своей собственной среде, тогда как pip
предоставляет услуги специально для  Python, причем в любой среде. Если вам
нужен пакет, специфичный для   Python, в первую очередь обратите внимание
на утилиту pip. Например, она предоставляет доступ к индексу пакетов Python
(Python Package Index- PyPI), доступному на сайте https: //pypi.python.
org/pypi.   Оба менеджера пакетов подробно рассматриваются в следующих
разделах.



Открытие командной строки                Anaconda
   Прежде чем вплотную заняться вопросами управления пакетами, нужно
вызвать утилиту   Anaconda Prompt.      Она аналогична любой другой командной
строке или окну терминала, но предоставляет специальные функции настрой­
ки, облегчающие работу с различными утилитами командной строки, входя­
щими в комплект поставки         Anaconda. Чтобы   открыть командную строку, най­
дите папку AnacondaЗ. Например, в       Windows    можно открыть выбрать команду
Пускq8се программыqАпасопdаЗqАпасопdа         Prompt.

Работа с пакетами          conda
   С помощью     conda    можно решать самый широкий спектр задач. В следу­
ющих разделах описывается, как решать основные задачи с помощью              conda.
Чтобы получить справку по этой утилите, введите         conda --help.
просмотр пакетов      conda
   Просматривать пакеты           conda можно двумя способами. Первый спо­
соб заключается в создании списка доступных пакетов, второй           -   в поиске



                                                         ГЛАВА 11   Пакеты     233
определенного пакета. Благодаря списку пакетов можно узнать, установлен ли
требуемый пакет. Ну а поиск поможет получить сведения об установленном
пакете.

   Можно выполнить общий поиск, чтобы найти все, что установлено в кон­
кретной системе. В этом случае используются следующие команды.

conda list
conda search

   Вывод этих команд очень длинный и может заполнить весь экранный буфер,
из-за чего выполнить прокрутку назад и просмотреть все результаты не полу­

чится. Например, на рис.              11.1 О   показано, что произойдет, если воспользоваться
командой      conda list.

  !""'1 Админисrратор: A11aconda Prontpt
  - - - - - - -- -

  (base) C:\Users\Alex>conda list
    packages in environment at F: \Anaconda3 :

  11 Name                     Uersion                            Build       Chann'11
   ipyw_jlab_nb_ext_conf      0 . 1. 0                  py36he61S1f0_0
   111b11ster                 0.1 . 10                  py36hcd01829_0
   naconda                    S. 2 . 0                            ру36_3
  11n11cond11-client          1 . 6 . llf                         ру36_0
  anaconda-navigator          1.8 .1                              ру36_0
   naconda-project            0 . 8 .2                  py36hfad2e28_0
  asn1crypto                  е . 2ч . 0                          ру36_0
  astroid                     1.6 . 3                             ру36_0
  aetropy                     3.0.2                     py36hlf52e1eb_1
  attre                       18 . 1. 0                           ру36_0
   abel                       2.S.3                               ру36_0
   ackcall                    0.1.0                               ру36_0
   ackports                   1. е                      py36h81696a8_1
   ackporte . ehutil_91t_t1rminal_eiz1 1 .0 . 0                    ру36h19аЬ83Ч_2
   eautifuleouplf             Ч.6.0                     py36hdlfcc5'18_1
   itarray                    0.8 .1                    py36hfa6e2cd_1
   kcharts                    0.2                       py36h1e685f1_0
   las                        1. е                                   lllkl
   laze                       0 . 11 .3                 py36h8a29c11s_0
   leach                      2.1.3                               ру36 _ 0


      Рис. 11.10. Вывод команды conda list довольно длинный и может вызвать
                             переполнение буфера экрана


   Обратите внимание на то, что результат выполнения команды включает
имя пакета, его версию и соответствующую версию                         Python.    Просмотрите этот
список, чтобы узнать, установлен ли нужный пакет в вашей системе. Иногда
требуется получить больше, чем выдает обычный поиск. Например, предпо­
ложим, что вы хотите узнать, какие компоненты были установлены из пакета
scikit-learn для 64-разрядной платформы Windows. Для этого нужно ввести
команду     conda search --platform win-64 scikit-learn.                                Это приведет
к выводу подробных сведений (рис. 11.11 ).

234       ЧАСТЬ     3    Профессиональные методики программирования на                       Python
  !""' /lf\HИH'1ПJl<llOp: дlldfOПlla 1>ro11111t .     /•;,'Hi;~    . • .
                -----     -------~-----                           --
  (base) C : \Useгs\Alex>conda seaгch                         --platfoгm win-6Ч scikit-leaгn
    oading channels: done
  11 Name                   Ueгsion                                     Build Channel
  scikit-le11гn                  0 . 11                            np16py27_0 pkgs/f гee
  scikit-leaгn               0 . 12.1                              np16py27_0 pkgs/fгee
  scikit-leaгn                   0.13                              np16py26_0 pkgs/fгee
  scikit-leaгn                   0.13                              np16py27_0 pkgs/fгee
    cikit-leaгn                  0 . 13                            np17py26_0 pkgs/fгee
  scikit-le11гn                  0.13                              np17py27_0 pkgs/fгee
    cikit-leaгn              0 . 13 . 1                           np16py27_p0 pkgs/pгo
  scikit-leaгn               0 . 13.1                              np17py26_0 pkgs/fгee
  scikit-leaгn
  scikit-leaгn
                             0 . 13 . 1
                             0 . 13 . 1
                                                                   np17py27_0 pkgs/fгee
                                                                  np17py27_p0 pkgs/pгo
                                                                                                              J
   cikit-leaгn                              0 . 1Ч . 1            np16py27_p0 pkgs/pгo
  scikit-le11гn                            0 . 1Ч . 1              np17py26_0 pkgs/fгee
  scikit-leaгn                             0 . 1Ч.1                np17py26_1 pkgs/fгee
  scikit-leaгn                             0 . 1Ч.1                np17py26_2 pkgs/fгee
  scikit-leaгn                             0 . 1Ч . 1              np17py27_0 pkgs/fгee
  scikit-leaгn                             0.1Ч.1                  np17py27_1 pkgs/fгee
  scikit-le11гn                            0 . 1Ч.1                np17py27_2 pkgs/fгee
   cikit-leaгn                             0 . 1Ч.1               np17py27_p0 pkgs/pгo
   cikit-leaгn                             0 . 1Ч . 1             np17py27_p1 pkgs/pгo
  scikit-leaгn                             0 . 1Ч.1               np17py27 _p2 pkgs/pгo
  scikit-leaгn                             0.   1Ц.   1            nр17руЗЗ_0   pkgs/fгee


      Рис.    11.11. Команда conda search позволяет получить дополнительную
                                                    информацию о пакетах


                 Поддерживаются дополнительные флаги, позволяющие увеличить
                 объем получаемой информации. Например, при использовании фла­
                 га   --j s on вы получаете такие сведения , как полный список зави­
  СОВЕТ
                 симостей для пакета, информация о том, полностью ли установлен
                 пакет, и URL-aдpec , содержащий расположение пакетов в сети.


Установка пакетов                  conda
   Пакеты         conda доступны на сайте ht tps: / / ana conda. org / . Чтобы опреде­
лить, доступен ли конкретный пакет, такой как                                     SciPy,    введите его имя в поле
поиска в верхней части окна. Скорее всего, вы получите целый список канди­
датов, как показано на рис.                         11.12.
   Чтобы разобраться в длинном списке кандидатов, следует щелкать на от­
дельных ссылках, которые приведут вас к странице с подробностями, подоб­
ной показанной на рис.                      11.13.         Учтите, что вы пол учите ссылки на все виды
информации о конкретной копии выбранного пакета. Но наиболее важным для
нас является раздел                lnstallers (Установщики).                  Можно загрузить установщик или
использовать для этого утилиту                                c onda.      Соответству ющая команда может вы­
глядеть так:


conda install            -с   a na conda s cipy


                                                                                       ГЛАВА    11   Пакеты   235
      .JдNACONDA                                                                      GaHery     AЬout   Anocondo     1lrlp   Downlood Лnar.onda     Sig11 ln




                                                                                                                                   -
       You must l.ogtn to seard'I prlvote pockoge&




      §CIPY



      TFllters
         Type: All v                                                 Access: АН"                                 Plotform· дll v



      : 1 ovorilcs      • l)ovmlo()(ts      ; J.'ш koqc (ownc1 / pnd<ШJ<")                                                                   Plot101ш~



                           2343748
                                             J   :011do forge / >Cipy                                                                         l.lnщ-64
                                                                                                                                               osx64
                                            Scмant1f1C    llhtoru IOI Python
                                                                                                                                              ttnwt 32
                                                                                                                                              linl.IX-64
                                                                                                                                               lin<IX-
                                            .) ancconda / sc1py ''"
              12            412956                                                                                                            ppc641e
                                            Sc1ent1rк: L!Ьfaru lor Pyth011                                                                     osx-64
                                                                                                                                               Wln-32
                                                                                                                                               W\1~64



                            68899
                                             J       ж•   / scipy                                                                             '"'"" 64
                                                                                                                                               osx 64
                                            Sclenttfк lЬrory     for Python                                                                    Wln-64

                                            i" carlkl / scipy "
                                                                                                                                               source
              о                 13301
                                            NEW prereteose5 oval(oЬle at t1ttpsJlonoconda orglпungwpy MiнgW W64 comptl.ed sdpy wt1eeti for    Windows--
                                            WlndOwS ЬOSed Ofl ~11ВL/\S




                                 Рис.     77. 72. Выберите версию используемого пакета




                                                                    "
                                                                                       Galtcry   AЬout    Anocondo     Hetp    Downlood Anoconda     S~n   ln




      anaconda / packages / anaconda                                                   s.э.1

      SlmpUfies package monogement and deptoyment of Anaconda


                       Conda


         D Llcense: 1~.     •

         А    Home:
        </> Development:          .пr
        lf!I Documentotlnn:                                                    О<.

         .i. 176492 total dawnlnads
         11$ Last uplnad б days and 8 hours ago



        lnstallers
        conda install f)

        ~ -~)1

        1311!11 " ••
        1:1:!1:1 "''


                                 Рис.    77. 73. Выбор устанавливаемого дистрибутива

236           ЧАСТЬ 3                   Профессиональные методики программирования на                                                                    Python
  ИСПОЛЬЗОВАНИЕ КОМАНДЫ                        CONDA INFO

  Несмотря на то что команда            conda info обычно   используется для получения
  информации об окружении, ее также можно применять для работы с пакетами.
  Чтобы узнать особенности конкретного пакета, нужно просто добавить имя
  пакета, например          conda info nurnpy.   К сожалению, эта команда часто выдает
  огромный список сведений, который желательно немного сократить. Один из
  способов сделать это          -    добавить номер версии после имени пакета, отде­
  лив его знаком равенства(=), например             conda info nurnpy = 1.13 .1   для вер­
  сии     1.13.1   пакета   NumPy.
  В большинстве случаев при использовании ключа               --verbose    применитель­
  но к пакетам вы не получите какой-либо дополнительной информации. А вот
  ключ     --j son позволяет узнать немного больше, причем информация подается
  так, что ею можно легко манипулировать из программы, например из сцена­

  рия. В общем, с помощью команды              conda info можно получить весьма содер­
  жательную информацию о пакетах.



Обновление пакетов            conda
  Пакеты, применяемые для разработки приложений, могут со временем уста­
ревать. Разработчики, которые их поддерживают, периодически добавляют но­
вые функции или исправляют ошибки. Проблема с обновлениями заключается
в том, что они могут привести к некорректной работе приложения, а иногда
и вовсе вывести его из строя. Тем не менее рекомендуется обновлять пакеты,
даже если обновление предназначено лишь для исправления ошибок, связан­
ных с безопасностью. Конечно, для начала нужно как-то узнать, что пакет тре­
бует обновления. Чтобы найти устаревшие пакеты, воспользуйтесь командой
conda search --outdated,             указав имя проверяемого пакета.


              Если нужно проверить все пакеты, то при выполнении поиска прос­
              то не указывайте имя пакета. К сожалению, на этом этапе вывод ста­
              новится настолько длинным, что действительно сложно что-либо
  СОВЕТ
              увидеть. В таком случае поможет команда           conda search --outdated
              --namesonly,          которая сообщает только имена пакетов, требующих
              обновления.

   Когда становится ясно, что именно требует обновления, можете восполь­
зоваться командой         conda update. Например, можно обновить пакет NumPy,
выполнив команду          conda update nurnpy. Мало какие пакеты являются автоном­
ными, поэтому         утилита conda сообщит список элементов, которые необходимо
обновить вместе с пакетом             NumPy.   Введите у и нажмите клавишу    <Enter> для

                                                                ГЛАВА 11    Пакеты       237
продолжения. На рис.                 11.14    показана типичная последовательность событий
в процессе обновления.

  Г' АДмин'1стратор: Ariaconda 1•ron1pt
  ------------ -                    -~-*



  (base) C:\Users\Alex>conda update numpy
   olving environment : done
   М    Package Plan        ММ


       environment location:          F:\AnacondaЗ


       added / updated specs:
         - numpy

  The following packages will               Ье   downloaded :
         package                                 1               bui ld
         ---------------------------1-----------------
         conda-I\ . 5. 11                        1              ру36_0       1.е   нв

   he following packages will               Ье   UPDATED :
         conda:    1\.5.1\-ру36_0     -->   1\ . 5.11-руЗ6_0


   roceed ([y]/n)?           у



   ownloading and Extracting Packages
   onda-1\ .5 . 11      1 1 . е нв 1 мммммммммммммммммммммммммммммммммммммм 1 1007.
   reparing transaction: done
   erifying transaction: done
   xecuting transaction : done
  (base) C:\Users\Alex>

          Рис.    11.14. В процессе обновления отображается много информации


                 Можно обновить все пакеты одновременно, воспользовавшись ко­
                 мандой          conda update --all.           Но в этом случае взаимодействие меж­
                 ду пакетами сделает обновление менее успешным, чем если бы па­
ВНИМАНИЕ!
                 кеты обновлялись по отдельности. Кроме того, обновление может
                 занять много времени, поэтому придется запастись терпением.




Удаление пакетов                 conda
   В какой-то момент вы приходите к выводу о том, что вам больше не нужен
пакет    conda.     Единственная проблема заключается в том , что вы не знаете, за­
висят ли от него другие пакеты. Поскольку зависимости пакетов могут быть
довольно сложными и вы хотите быть уверены, что ваши приложения про­
должат работать, нужно проверить, какие пакеты зависят от этого конкретного



238       ЧАСТЬ 3           Профессиональные методики программирования на Python
пакета. К сожалению, команда                        conda info    сообщает вам только о требованиях
к пакету, т.е. от чего они зависят. Поэтому рекомендуется не трогать пакеты
после их установки.



               Если же вы все-таки решили удалить пакет, то воспользуйтесь ко­
               мандой         conda remove.          Она удаляет указанный вами пакет вместе со
               всеми пакетами, которые от него зависят. В таком случае рекомен­
 ЗАПОМНИ!
               дуется сначала использовать параметр командной строки                         --dry-run,
               чтобы понять, действительно ли вы хотите удалить пакет. Предпо­
               ложим, вы решили удалить пакет                         NumPy.   Тогда введите команду
               conda remove --dry-run numpy. Сам пакет не будет удален; ути­
               лита conda просто показывает, что произойдет, если вы запустите
               процесс удаления (рис. 11.15).



  ~ Админиараrор: AlldCOnda Рrошр


  (base) C: \Users\Alex>conda remove --dry-run numpy
   olving environment: done
   М    Package Plan     ММ


       environment location:       F:\AnacondaЗ


       removed specs :
         - numpy


  The following packages will              Ье   downloaded :

         package                                1                build
         ---------------------------1-----------------
         certifi-2018 . 11 . 29                 1               руЗ6_е         11!6   кв
         openssl-1 . 0 . 2р                     1           hfa6e2cd_e         5.Ч МВ


                                                                Totel :        5.5    мв


  The following packages will              Ье   REMOUED :
         enaconda:                 5 . 2.0-руЗ6_З
         astropy :                 з . е.2-руЗ6hЧ52е1аь_1
         bkcharts :                e . 2-pyЗ6h7e685f7_e
         Ыаzе :                   0 . 11   . З-руЗ6h8а29са5_е
         bokeh :                   0 . 12 . 16-руЗ6_0
         bottleneck:
         dask :
         datashape :
         h5py :
         imageio :
                                   1 . 2 . 1-pyЗ6hd119dfa_e
                                   е.  11 . 5-руз6_е
                                   0 . 5.Ч-руЗ6h5770Ь85_0
                                   2 . 7 . 1-pyЗ6hЗbdd7fb_2
                                   2 . З . 0-руЗ6_0
                                                                                                    J
         matplotlib :              2.2 . 2-py36h15Зe9ff_1
         mkl_fft :                 1 . е . 1-руЗ6hЧ52е1еь_е


   Рис. 11.15. Удаление единственного пакета может вызвать цепную реакцию




                                                                           ГЛАВА 11        Пакеты   239
    Как видите, один пакет может поддерживать множество других пакетов,
и некоторые из них вам могут понадобиться. Если же вы действительно хо­
тите удалить пакет, введите ту же команду, что и раньше, только без ключа
--dry-run.
    Никогда не используйте ключ          --force. В этом случае команда удаляет па­
кет, не трогая зависимые пакеты, что в итоге приводит к повреждению уста­

новки   Python.    Если нужно удалить пакет, удаляйте и все зависимые пакеты,
чтобы сохранить свою установку в целости и сохранности.


Установка пакетов с помощью утилиты                        pip
    Как ни странно, использование утилиты      pip очень напоминает работу с
утилитой     conda. Обе они, по сути, решают одни и те же задачи, поэтому, если
вы знаете, как использовать одну утилиту, то будете знать, как использовать
другую. Обратившись на сайт           https: / /pip.pypa. io/en/staЬle/reference/,
вы увидите, что утилита         pip   поддерживает практически те же команды, что

и   conda   (с незначительными отличиями). Например, если вы хотите найти
список устаревших пакетов, то введите команду              pip list --outdated.         Вот
список общих команд, поддерживаемых утилитой                   pip.
              ))   check.   Проверка совместимости зависимостей для установленных
                   пакетов.

              ))   download. Загрузка указанных пакетов для           последующей установки.

              ))   freeze.    Вывод информации об установленных пакетах в формате
                   требований.

              ))   help. Отображение экрана     справки со списком команд.

              ))   install. Установка    указанных пакетов.

              ))   list. Вывод списка    установленных пакетов.

              ))   search.    Поиск пакетов на сайте   PyPI.
              ))   show. Вывод    информации об установленных пакетах.

              ))   uninstall. Удаление указанных       пакетов.




Просмотр содержимоrо пакета
    Python   поддерживает несколько способов просмотра содержимого пакета.
Основной способ, используемый большинством разработчиков, заключается в
применении функции          dir (), которая сообщает об атрибутах, предоставляемых
пакетом.




240     ЧАСТЬ 3     Профессиональные методики программирования на Pythoп
  Обратите внимание на рис.               11.3.   Помимо рассмотренных ранее функций
SayGoodЬye () и SayHello () в списке содержатся и другие записи. Эти атрибу­
ты автоматически генерируются в              Python.   Рассмотрим их назначение.

              ))      bui 1 t ins _. Содержит список всех встроенных атрибутов, кото-
                    рые доступны в пакете.        Python добавляет эти      атрибуты автомати­
                    чески.

              ))      cached_. Сообщает имя и местоположение кешированного фай-
                    ла, который связан с пакетом. Информация о местоположении явля­
                    ется относительной и зависит от текущего каталога          Python.
              ))      doc_.Выводит справочную информацию о пакете, если таковая
                    существует. Например, если ввести         os. _doc_, Python          выдаст
                    справку, связанную с библиотекой        os.
              ))      file_. Сообщает имя и местонахождение пакета. Информация
                    о местоположении является относительной и зависит от те~ущего
                    каталога   Python.
              ))      initializing_.          Определяет, находится ли пакет в процессе
                    инициализации. Обычно этот атрибут возвращает значение               False.
                    Данный атрибут полезен, когда нужно дождаться завершения за­
                    грузки одного пакета, прежде чем импортировать другой пакет, ко­
                    торый зависит от предыдущего пакета.

               ))     loader      . Выводит информацию о загрузчике для данного паке-
                    та. Загрузчик   - это утилита, которая получает пакет и помещает его
                    в память, чтобы      Python   мог его использовать. На практике данный
                    атрибут используется довольно редко.

               ))     name _.Сообщает название пакета.
               ))   __package _.Этот внутренний атрибут используется системой им­
                    порта для упрощения загрузки и управления пакетами.


  Можно получить еще более подробную информацию об атрибутах. Напри­
мер, введите  dir (BPPD_ 11_Packaqes. SayHello).                  Вы увидите список атри­
бутов,   показанный на рис. 11.16.
  Одни из записей, такие как               name     , понятны без дополнительных объяс­
нений, другие требуют комментариев. Например, предположим, что нужно по­
лучить дополнительную информацию о записи _sizeof_. Один из способов
сделать это    -    ввести   help ( "_sizeof_").            На экране появится довольно
скудная (но полезная) справочная информация (рис.                 11.17).
  С   Python    не случится ничего плохого, если попробовать воспользоваться ка­
ким-либо атрибутом. Даже если у программы                  Notebook   возникнут проблемы,
всегда можно перезапустить ядро (или среду в целом). Например, если ввести




                                                                  ГЛАВА 11      Пакеты     241
BPPD- 11- Packa9es. SayHello.                      sizeof    (),   отобразится размер функ-
                                               ~         ~


ции   SayHello () в байтах, как показано на рис. 11.18.


                       Просмотр содержимого пакета

        In [1] :       import BPPD_ll_Packages
                       dir (BPPD_ll_Packages.SayHello)

        Out [1].       ['     annotations
                              call
                              class
                              closure
                              code
                              defaults -
                              del attr '
                              dict-
                              dir '
                              doc-
                            _eq_ '
                              f orrnat
                            _ge _
                            _ get_
                            _ getattribute _
                            _ globals _
                            _ gt_
                              hash
                              init
                              init subclass
                              kwdefaults
                              le
                              lt


                                  ..
                              module
                                       -
                              name
                                   -
                              ne
                              new
                            _qualname_
                              reduce     '

           Рис.    11. 16. Просмотр списка атрибутов,        используемых в Pythoп



                   ln [2]:       help ("_sizeof_" )

                                 Help on built-in function     sizeof

                                   sizeof ( . .. )
                                       sizeof    () -> int
                                     size of object in memory, in bytes


          Рис.    11.17. Получение полезной        информации о нужном атрибуте



242     ЧАСТЬ      3        Профессиональные методики программирования на            Python
                         In [ 3 ]:                BPPD_l l_Pac kages . SayHello .                        sizeof            ()

                         Out (3);                 1 12


                                      Рис.        11.18. Пример использования атрибута

  В отличие от многих других языков программирования,                                                                      Python         делает до­
ступным исходный код своих внутренних библиотек. Например, открыв ката­
лог \Python37\Lib, вы увидите список файлов .ру, которые можно без про­
блем открыть в               Notebook.                      Попробуйте загрузить библиотеку                             os. ру, которую
вы используете в примерах этой главы, с помощью кнопки                                                                Upload (Загрузить)
панели инструментов                               Notebook.             Щелкните на кнопке                       Upload рядом с именем
файла после его открытия, после чего щелкните на полученной ссылке, и вы
увидите результат, показанный на рис.                                         11.19.       Заметьте, что файлы                       . ру открыва-

         JUpyte Г os.py"                          несколько секунд назад

      l le                   v

             r ""''OS ro\.ltin.es for NT or P()SlX dep"'nd1ng                               n what. system '-Je ' re on .

             This expo!ts:
                    all funct1onз frum pos1x or пt, e.g. 1,,1Пl1nk, st<.tt, et .
                    oз . patt. is e1ther poз1xr.ath or ntpatt1
                  - ,:15.name i~. 1..:jther 'po ... ix' or 'r1t '
                    ')S.curdir is а strinq repre-c:Pпt.inq th~ cur1·ent diri::-C"tory (alway5 '. '}
                      з.pardir is d s riny r.epп.~'3Pnt1nq ttн:~ рd1ег          di1:ec-- ry (alwAy5 ' . .                                  1 )


                    vз. з:ср is the (Qr а moзt common) patt.namc separator ( ' 1             01 '\ ' )                 1


                      .s.f"xt~e1= i~ -:.he exteнs1nf" ~E'fd"at r  (.al...-ays ' . ')
                     u~.<!i.""sep 15 th~ alternate 1at.t~г.rtm€:                     !'!   p;trat-or (None        r    '/')
                     оз   .pathser            ~з     the coroponen':.     ~eparatcr        1-,P1j   in   $РАГН   etc
                     cs.lineзep i~                   t~1c   line   separ.a:...н   ir:. tex.t files ('\r' cr ' \n' or                 1   \r\n'}
                     с 3.   defpa.<t-    r.   1!3    the def dUl t  '3earch patt: for exPcu~aЬles
                          . evnull            l      ~Г.е f1lt 1a1..r.  f tre r\н.1 iev.1.c ( 1 i1f'vlnull                  1 ,   et .)

             Pr .1rdЛ\S tha lmp<J.t t. ал.d ..lЧе ' 1 sta.Pd з l t е:. chance  f l: irig
             роr~аЫ~  betw"" n differert гlatfoпns. Of .... ,..ursc , tt.ey пшst- tГt.n
             only use funct1on that are def1п~rj Ьу ~i.J.l pJatforms (e.g., unlink
             a.nd upendir), and leave cill pdthname manipulution to cз . path
             (e.q., ~plit and J ,;").


             1.
             import аЬс
             import s ys
             import sca c               аа    st

             _nameз         • s ys.buil t in_module_names

                                 r.           ...т                  J
                  al l       •        [" altsri:" , "c1J:rd1r 11 , "parctir" , "~ei.'' , "path'"l~r-", "linesep" ,
                                       "de-fpa h" , ' 1 naroF" , 11 ra~ri", "devnull" , "SЕБУ ~Е'Т'" , "SEEK ctµ" ,
                                       "SEt:;K END" , ''fsenc..:::od " , "fsd '"ode" , "get ех1....\...._ path" , "f d,.)J.: n" ,
                                       "ро~       n" ,   " ~ХtЗР~ '']




  Рис. 11. 19. Просмотрите код пакета, чтобы лучше понять, как он работает


                                                                                                           ГЛАВА 11                Пакеты         243
ются в более простом редакторе и не отображают ячейки, в отличие от файлов
блокнота, которые вы использовали на протяжении всей книги.
  Непосредственный просмотр содержимого пакета поможет вам открыть для
себя новые приемы программирования и лучше понять, как работает библио­
тека. Чем больше времени вы потратите на изучение       Python, тем   лучше будете
использовать его возможности для создания интересных приложений.

              Убедитесь в том, что вы просто просматриваете код библиотеки,
              не изменяя его. Если вы случайно измените код, приложения могут
              перестать работать. Хуже того, вы внесете незаметные ошибки, ко­
ВНИМАНИЕ/
              торые будут проявляться только в вашей системе и больше нигде.
              Всегда проявляйте осторожность, работая с библиотечным кодом.




Просмотр документации по пакетам
  Используйте функцию          doc () всякий раз, когда нужна быстрая помощь. Но
для получения сведений ло пакетам и библиотекам         Python лучше воспользо­
ваться компонентом       Python Package Documentation (документация ло пакетам
Python).    Он часто   представляется как Package Docs в лапке Python и также на­
зывается     Pydoc.   Независимо от названия этот компонент значительно облегча­
ет жизнь разработчикам. В следующих разделах описано, как с ним работать.


Открытие приложения              Pydoc
   Pydoc -      это еще одно полезное приложение     Python.   Оно находится в ка­
талоге      \Python37\Lib вашей системы в виде файла pydoc.py. Как и в слу­
чае с другими файлами .ру, можно открыть этот файл с помощью             Notebook
и посмотреть, как он работает.  Pydoc также можно запустить с помощью
ярлыка  Python 3.7 Module Docs, который находится в системной палке Pyt
hon з. 7, либо команды Anaconda Prompt (см. раздел "Открытие командной
строки Anaconda").

              Pydoc   можно использовать как в графическом, так и в текстовом ре­
              жиме. При открытии    Anaconda Prompt можно указать ключевое сло­
              во, например JSON,   после чего Pydoc отобразит текстовую справку.
  совет
              Используя опцию командной строки -k, за которой следует ключе-
              вое слово, например if, можно отобразить список мест, где встреча­
              ется это ключевое слова. Чтобы запустить сам сервер, нужно ввести
              Pydoc -Ь. Если нужно использовать определенный порт для браузе­
              ра, добавьте ключ командной строки -р, указав номер порта.



244       ЧАСТЬ З     Профессиональные методики программирования на        Python
   В графическом режиме создается локализованный сервер                                Pydoc,   который
взаимодействует с браузером для отображения информации о пакетах и би­
блиотеках      Python.    Поэтому, запустив данное приложение, вы увидите окно ко­
мандной строки (терминала).

              Как и в случае с любым сервером, система может запросить у вас
              разрешение. Например, может появиться предупреждение брандма­
              уэра о том, что          Pydoc пытается получить доступ                  к локальной си­
 ЗАПОМНИ!
              стеме. Следует дать         Pydoc разрешение на работу с                 системой, чтобы
              можно было видеть предоставляемую информацию. В случае сраба­
              тывания антивирусной программы понадобится разрешить продол­
              жение работы           Pydoc.   Некоторые системы, как, например,              Windows,
              могут потребовать дополнительных полномочий для запуска                          Pydoc.
   Обычно сервер автоматически открывает новое окно браузера, как показано
на рис.     11.20.   В нем содержатся ссылки на различные пакеты, которые есть в
вашей системе, включая любые пользовательские пакеты, которые создаются
и включаются в путь поиска              Python.   Чтобы просмотреть информацию о любом
пакете, просто щелкните на соответствующей ссылке.




                                                      .....
                                                        -
                                                     _
                                                     -"""'




                                                     ---
                                                     -""""1t



                             ----
                                                     .Jlnoil
                                                     .....                    ...."
                             -"''"
                                                     ..DWIOU


                                                     -·-
                                                     -....                   -·-....
                                                                             •"""'
                             ......
                             _,,.,,.

                             ----
                             -""Ш

                             _,.
                                                     -
                                                     .-..
                                                     "'""'"
                                                     111111111
                                                                             -
                                                                             "'
                                                                             lltЬ




                 Рис.   11.20. Индексная страница модулей             в окне браузера

   Утилита Anaconda          Prompt предлагает две               команды, обеспечивающие управ­
ление сервером. Достаточно ввести букву, связанную с командой, и нажать
клавишу      <Enter> для    ее активизации. Вот эти две команды:

                ))   Ь-   запуск новой копии браузера, заданного по умолчанию, с загру­
                     женной индексной страницей;

                ))   q-   останов сервера.




                                                                        ГЛАВА 11         Пакеты    245
                  Завершив просмотр справочной информации, остановите выполне­
                  ние сервера, введя       q   в командной строке и нажав клавишу           <Enter>.
                  После остановки сервера освобождаются все используемые ресур­
 3АЛОМНИI
                  сы и закрываются все порты брандмауэра, открытые при установке
                  Pydoc.

Использование ссылок быстрого доступа
     Снова вернемся к рис.             l l .20.   В верхней части веб-страницы находятся три
ссылки. Благодаря им обеспечивается быстрый доступ к средствам сайта. Бра­
узер сначала открывает страницу Module Index. Если в какой-то момент потре­
буется вернуться к этой странице, щелкните на ссылке Module lndex (Индекс
модулей).
     После щелчка на ссылке               Topics (Темы) появится страница, показанная на
рис.   11.21.     Здесь находятся ссылки на важные темы                    Python.   Например, чтобы
получить сведения о булевых значениях, щелкните на ссылке                             BOOLEAN. Будет
открыта страница с описанием того, как работают булевы значения в                          Python. В
нижней части страницы находятся ссылки на страницы, содержащие дополни­
тельную полезную информацию.




                                                           t«J),Фf'ymюp&
                                                            Ъ1Щ1>
                                                           Q1ШШ
                                                           <w..WIЖI
                                                             (   (Jf!J
                                                           ЮМJ1
                                                           ~

                                                           "..,.......
                                                           ~

                                                           l!t'{"IJ-(,
                                                           ЩХJЖ]'МfПЮDI.
                                                           ~




                               Рис.   11.21. Перечень важных тем Python

     После щелчка на ссылке Keywords появится страница, показанная на
рис.   l l .22.   Здесь находится список ключевых слов, поддерживаемых в                        Python.
Например, чтобы получить дополнительные сведения о создании циклов, щел­
кните на ссылке         for.

Ввод поискового термина
     В верхней части страницы также находятся два текстовых поля. Рядом с
левым полем расположена кнопка                      Get   (Получить), а рядом с правым      -    кноп­
ка   Search (Поиск). После ввода поискового термина в первое текстовое поле

246         ЧАСТЬ 3        Профессиональные методики программирования на Python
щелкните на кнопке                                    Get,       и вы получите доступ к документации по соответ­
ствующему пакету или атрибуту. На рис.                                                   11.23       показан результат, получаемый
после ввода слова                                print.
 Jlrd- J.•..S (dnalk, МSС \ 1900 Ы Ьd (AMD64)J
 Wllldo ..."'1




                                                        ...
                                                        "....
                                                        1111

                                                        """'
                                                                                     --
                                                                                     .••.......                     --
                                                                                                                    """"
                                                                                                                    ""
                                                                                                                    ."

                                                        -
                                                        ~                                                           >в1d
                                                        м

                                                        "                            ""....
                       Рис.        11.22.          Перечень ключевых слов, поддерживаемых в Pythoп


  Py1hon 3.6.5 [default, M SC v.1900 64 bit                              (АМD64 )]
  Windows-7
                                                                                                  Module Index : Topics : Keywords
                                                                                                           Get 1 1                 Search 1

  print(...)
              print(value,                       . . . , s e p='   ' , end=' \ n', file=sys . stdout, f lush=False}

              Prints the values to а st r eam, or to sys.stdout Ьу default.
              Opt i onal keywo rd arguments:
              file:    а file-like ob j ect (stream) ; defaults t o the current sys.stdout.
              s e p:   s tring inserted Ьetween values, default а spac e.
              end:     string appended after the last value , default а newline.
              flush: whether t o forciЫy flush the stream.

  Рис.       11.23. Информация о поисковом термине,                                                 полученная с помощью поля           Get

    Если ввести поисковый термин во второе текстовое поле и щелкнуть на
кнопке          Search             (Поиск), отобразится список тем, связанных с данным поиско­
вым термином. На рис.                                          11.24   показаны типичные результаты ввода ключевого
слова       print.             В данном случае нужно щелкнуть на ссылке, чтобы получить до­
полнительные сведения.



Просмотр резуnьтатов
    Результаты, полученные при просмотре страницы, зависят от темы. Одни
темы краткие, как, например, тема для функции                                                            print ()    на рис.   11.23.   Дру­
гие же темы могут быть довольно обширными. Например, после щелчка на
ссылке       Calendar,                   показанной на рис.                   11.24,          выводится большой массив данных
(рис.      11.25).




                                                                                                             ГЛАВА 11      Пакеты        247
  Python 3.6.5 [default, MSC v.1900 64 Ьit    (АМD64))                 Module Index : Topics : Keywords
  Windows-7                                                                       Get 1 1                     Search 1




           calendar- Calendar printing functions
           email.guoprimime- Quoted-printaЫe content transfer encoding per RFCs 2045-2047.
           encodings.guopri codec- Codec for quoted-printaЫe encoding.
           json.tool- Command-line tool to validate and pretty-print JSON
           lib2to3.fixes.fix print- Fixer for print.
           pprint- Support to pretty-print lists, tuples, & dictionaries recursively.
           pstats- Class for printing reports on profiled python code.
           guopri· Conversions to/&om quoted-printaЬ!e transport encoding as per RFC 1521 .
           traceback- Extract, format and print information about Python stack traces.
           IPython.core.tests.print argy
           IPython.extensions.sympyprinting- ••DEPRECAJED••
           IPython.lib.prettv- Python advanced pretty printer. This pretty printer is intended to
           PyOt5.QtPrintSupport
           anaconda project.intemal.cli.activate-The ·· activate'' command which prepares а project to run
           and prints commands to source in your sl1ell.
           astropyjo.fits.scripts.fitsheader- · ' fitsheader ' · is а command line script based on astropy.io.fits for
           printing
           astropy.taЫe. pprint
           astropy.taЫe . tests.test pprint
           binstar client.commands.whoami- Print the information of the current user
           binstar client. rintb

        Рис.   71.24.   После щелчка на кнопке              Search отображается список тем,
                                относящихся к поисковому термину



   В этом конкретном случае вы видите связанную информацию о пакете,
сведения об ошибках, функциях, параметрах и всем остальном, что касается
функций вывода календаря. Количество информации, которую вы получае­
те, частично зависит от сложности темы и частично                                   -     от объема информа­
ции, предоставленной разработчиком вместе с пакетом. Например, выбрав
BPPD_ 11 _Packages на странице                  Module lndex,        вы получите только список функ­
ций (и никакой документации).




248      ЧАСТЬ 3        Профессиональные методики программирования на Python
Python 3.6.5 (default, MSC v. 1900 64 Ьit (АМD64 )]        Module Index : Topics : Kerwords
Windows-7                                                           Get 1 1                 Search 1




Calendar printinq functions

Notв whвn compa rinq these calвndars to thв onвs printвd Ь у ca l(l) : В у
de f ault , these c al вndars ha ve Monday as thв first d a y o f the week, and
Sunday as thв last (thв E u r opв a n convention). Use setfirstweekday() to
set the f ir s t da y of the week (O=Monday , б=Sunday).




         buillins.ValueError(buillins.Exception)
                lllegalMonthError
                lllegalWeekdayError
         builtins.object
                Calendar
                       HTMLCalendar
                            LocaleHTM LCalendar
                       TextCalendar
                            Locale TextCalendar


         class Calendar(builtins.object)

       Рис. 11.25. Некоторые страницы содержат большой объем данных




                                                                     ГЛАВА 11      Пакеты        249
Глава            12

Работа со строками

    В ЭТОЙ ГЛАВЕ ...

    >>   Знакомство со строками

    »    Работа со специальными и одиночными символами

    >> Обработка строк и поиск в строках

    »    Форматирование строк




к
            омпьютеры не понимают строковых данных. Они говорят на языке
            цифр, а не букв. Строка, отображаемая на экране, воспринимается ком­
            пьютером как последовательность чисел. Но поскольку люди понимают
строки, приложения должны иметь возможность работать с ними. К счастью,
в   Python работать со   строками относительно не сложно. Понятные пользовате­
лям строки переводятся в числа, воспринимаемые компьютером, и наоборот.
         Чтобы от строк был какой-либо толк, нужно уметь их обрабатывать. На
практике это означает, что нужно уметь анализировать строки, извлекать из

них фрагменты и искать в строке требуемую информацию. В этой главе рас­
сматривается, как создавать строки в    Python,   разбивать их на части и использо­
вать только те части, которые нужны.

         Строки, создаваемые в программах, нужно представлять пользователям в
удобном для чтения виде. Компьютер, в общем-то, не заботится о том, как вы­
глядит строка на экране, поэтому отображаемый текст порой довольно трудно
читать. Важно понимать принципы форматирования строк, чтобы пользовате­
ли могли получать информацию в наглядном виде. Прочитав главу, вы будете
знать, как создавать и форматировать строки должным образом. Исходный код
примеров данной главы находится в файле           BPPD_ 12 _ Working_wi th _ Strings.
ipynb (см. введение).
Различия между строками
   Многие начинающие разработчики (и даже те, кто поопытнее) не понимают,
что на самом деле компьютеры работают лишь с нулями и единицами. Даже
большие числа фактически состоят из О и                   1.   При сравнении учитываются лишь
нули и единицы. Данные перемещаются с использованием нулей и единиц. Та­
кие объекты, как строки, для компьютера выглядят как последовательности,
состоящие из О и          1.   И хотя сгруппировать нули и единицы для создания чисел
относительно просто, со строками все намного сложнее, поскольку в этом слу­

чае речь идет об информации, которой компьютер должен манипулировать как
числами, а представлять            -   как символы.



               Для компьютера понятия "строка" не существует. Строки состоят
               из символов, а отдельные символы в действительности являются
               числовыми значениями. Работая со строками,                    Python   создает по­
 ЗАЛОМНИI
               следовательность символов, которую компьютер воспринимает как

               числовой набор.



Определение символа с помощью чисел
   Чтобы создать символ, нужно сначала определить связь между ним и со­
ответствующим ему числом. Важно понимать, что приложение, работающее
со строками, выполняет преобразование числовыми кодами и символами,
выводимыми на экран. Для подобного преобразования обычно применяется
стандарт       ASCll (American Standard Code for Information lnterchange -                  аме­
риканский стандартный код для обмена информацией). Например, код                           ASCll
используется в           Python   для преобразования числа 65 в букву А. На сайте           www.
ascii tаЫе. сот можно             просмотреть всю таблицу          ASCll,   включающую различ­
ные числовые значения и соответствующие им символы.



               Каждому символу должно соответствовать собственное числовое
               значение. Заглавной букве А соответствует значение 65. Чтобы со­
               здать строчную букву а, следует воспользоваться другим числовым
 ЗАЛОМНИ I
               значением, в данном случае 97. Компьютер рассматривает А и а как
               два совершенно разных символа, а вот для пользователя это две вер­

               сии одного и того же символа в нижнем и верхнем регистрах.



   В этой главе используются десятичные числа, но компьютер рассматривает
их как совокупности нулей и единиц. Например, буква А в действительности
представляется как 01000001, а буква а                -        как 01100001. Когда пользователь
видит на экране букву А, компьютер видит соответствующее двоичное значение.


252          ЧАСТЬ   3   Профессиональные методики программирования на                    Python
              Было бы удобно иметь один набор символов на все случаи жизни.
              Но на практике довольно сложно подобрать единый набор число­
              вых значений, который годился бы для представления всех симво­
ТЕХНические
nОДРОБности   лов. Частично суть проблемы заключается в том, что стандарт ASCll
              не поддерживает языки с нелатинской письменностью; кроме того,
              в нем нет средств преобразования специальных символов в экран­
              ное представление. На самом деле помимо            ASCII   существует мно­
              го других наборов символов. Некоторые из них доступны на сайте
              http://www.il8nguy.com/unicode/codepages.html.                 lЦелкните на
              названии интересующего вас символьного набора, чтобы увидеть,
              как в нем присваиваются конкретные числовые значения каждому

              символу. Большинство наборов символов в качестве отправной точ­
              ки использует таблицу     ASCll.

Создание строк на основе символов
    Для создания строк в      Python от вас   не потребуется ничего экстраординарно­
го. Для начала разберемся с термином строка. Представьте, что это бусы. При
создании ожерелья на нитку поочередно нанизываются отдельные бусинки.
После завершения этой работы вы получите готовое украшение, состоящее из
отдельных бусин.
    Аналогичная концепция применяется для описания компьютерных строк.
Видя строку, вы понимаете, что она состоит из отдельных символов, объеди­
няемых с помощью языка программирования. Средства языка создают струк­
туру, которая включает всю цепочку символов. Поэтому именно программа, а
не компьютер, знает о том, что весь этот числовой ряд (в котором каждое число
представляет символ) определяет строку.

              Почему так важно знать, каким образом           Python   работает с символа­
              ми? Дело в том, что многие функции и специальные средства            Python
              работают на уровне отдельных символов. Даже когда вы видите
 ЗАПОМНИ!
              предложение,    Python   видит цепочку символов.

    В отличие от большинства языков программирования, строки в                 Python   мо­
гут заключаться как в одинарные, так и в двойные кавычки. Например, "Привет
всем" и 'Привет всем'     -     это одна и та же строка. В      Python   также поддержи­
ваются тройные двойные и одинарные кавычки, которые позволяют создавать
строки, разделенные на несколько строк. В следующей пошаговой инструкции
демонстрируется работа со строками в           Python.



                                                 ГЛАВА   12   Работа со строками        253
 1.   Откройте новый блокнот.
      Можете воспользоваться файлом исходного кода BPPD_ 12_ Working_ wi th
      Strings. ipynb (см.          введение) .

 2.   Введите следующий код в блокноте.
      pr int ( 'При в е т   всем   (одинарные    кавычки ) 1 ' )
      print ( "Приве т      всем   (дв о йные к авычки ) !" )
      рrint ( """Мн о гостро чная текстов ая ст р ока с
      тремя дв ойными кавычками.
      Можно также и споль зо вать         т ри одинарные ка выч ки .""" )

      Каждый из трех вызовов функции               print ()         демонстрирует различные мето­
      дики работы со строками. Строки можно заключать как в одинарные, так и в
      двойные кавычки. При использовании трех кавычек (одинарных или двойных)
      текст можно разбивать на несколько строк.

 3.   Щелкните на кнопке            Run Cell (Выполнить ячейку).
      Программа выведет ожидаемый текст. Обратите внимание на то, что много­
      строчный текст отображается в трех строках (рис.                    12.1 ),   как и в файле исход­
      ного кода, так что это своего рода форматирование. Многострочное формати­
      рование применяется для разбиения отображаемого текста в тех местах, где
      это нужно.




                     Создание строк на основе символов

        In [1] : print ( 'Привет         всем    (одинарные         кавычки)!' )
                     рrint ( "Привет всем        {двойl:!Ые кавычки)!" )
                     рrint { """Многострочная текстовая строка с
                     тремя двойными кавычками.
                     Можно также       использовать     три одинарные         кавычки.""" )


                     Привет    всем    {одинарl:!Ые   кавычки)       !
                     Привет всем       (двойные кавычки)        !
                     Многострочная       текстовая     стро ка       с

                     тремя двойными кавычками.
                     Можно    также    использовать     три     одинарные     кавычки.



                     Рис.   12.1. Строки состоят        из цепочек символов




Создание строк, включающих
специальные символы

  В некоторых строках встречаются специальные символы. Они отличаются
от привычных нам алфавитно-цифровых символов и знаков пунктуации и де­
лятся на следующие категории.




254    ЧАСТЬ     3   Профессиональные методики программирования на                              Python
              >>   Управляющие символы. Это символы, которые предназначены не
                   для отображения, а для управления выводом. Многие из них влияют
                   на положение указателя вставки      -     маленькой линии, которую вы
                   видите, когда вводите текст. Типичный пример -          символ табуляции.
                   Он создает пространство между двумя элементами, а величина этого
                   пространства определяется позицией табуляции. Если вы хотите пе­
                   рейти на следующую строку, вы вставляете символ возврата каретки
                   (возвращает указатель вставки в начало строки) и символ перевода
                   строки (перемещает указатель вставки на следующую строку).

              >>   Акцентированные символы. Это символы с различными диакри­
                   тическими знаками, такими как акут         ( '), гравис ( '), циркумфлекс ("),
                   диерезис ("),тильда Н или кольцо        ( 0 ). Подобные символы имеются
                   во многих алфавитах.

              >>   Символы рисования. С помощью некоторых символов можно соз­
                   давать элементарную графику. Примеры можно увидеть на сайте
                   http: / /j rgraphix. net/r /Unicode/2500-25 7F.
              >>   Типографские символы. Некоторые символы, например символ
                   абзаца (<][),применяются при отображении на экране определенных
                   видов текста, особенно когда приложение используется в качестве
                   редактора.


              >>   Другие специальные символы. В зависимости от используемого
                   набора символов вам могут встретиться и другие специальные сим­
                   волы, число которых практически бесконечно.

      Чаще всего при работе со строками, даже в простых консольных приложе­
ниях, используются управляющие символы. С учетом этого в                    Python   применя­
ются управляющие последовательности, с помощью которых можно непосред­

ственно вводить такие символы.



             Управляющая последователыюсть изменяет привычное назначе­
             ние символа, придавая ему новый смысл. Сочетание обратной косой
             черты   (\)   и буквы (например, а) обычно рассматривается разработ­
 ЗАПОМНИ!
             чиками как один элемент      -   управляющий сиwвол или управляющий
             код. В табл.    12.1 представлены   управляющие последовательности,
             применяемые в       Python.

      Наилучший способ понять, как работают управляющие последовательнос­
ти,   -   испытать их в действии. Для этого выполните следующую пошаговую
инструкцию.




                                               ГЛАВА   12      Работа со строками           255
Табnица 12.1. Управnяющие посnедоватеnьности в Python

 Управляющая                     Значение
 последовательность



 \newline                        Игнорируется


 \\                              Символ обратной косой черты(\)

 \'                              Одинарная кавычка     ( ')

 \"                              Двойная кавычка(")

 \а                              АSСll-символ звонка   (BEL)

 \Ь                              АSСll-символ возврата на одну позицию (BS)

 \f                              АSСll-символ прокрутки страницы (FF)

 \n                              АSСll-символ перевода строки (LF)

 \r                              АSСll-символ возврата каретки   (CR)

 \t                              АSСll-символ горизонтальной табуляции (ТАВ)

 \uhhhh                          Символ Unicode (набор символов, широко применяемый
                                 во всем мире), шестнадцатеричное значение которого
                                 задается символами    hhhh
 \v                              АSСll-символ вертикальной табуляции (VT)

 \ооо                            АSСll-символ, восьмеричное значение которого задается
                                 символами ооо


 \xhh                            АSСll-символ, шестнадцатеричное значение которого
                                 задается символами    hh


 1.     Введите сnедующий код в бnокноте.

      print("Чacть этого текста находится на\r\nследующей строке.")
      print        ("Буква А с грависом:    \хСО. ")
      рrint("Символ рисования:           \u2562.")
      print("Знaк           абзаца: \266.")
      print        ("Знак   деления: \xF7. ")

        В этом примере используются различные способы достижения одной и той же
        цели   -    создание специального символа. В первой строке продемонстрирова­
        но непосредственное использование управляющих символов. В то же время
        многие специальные символы формируются с помощью шестнадцатеричного
        числа, которое состоит из двух цифр, как показано во второй и пятой строках.



256      ЧАСТЬ 3        Профессиональные методики программирования на Python
       Иногда приходится использовать символы Uпicode, состоящие из четырех
       цифр, как показано в третьей строке. Восьмеричные значения состоят их трех
       цифр и записываются без буквенного префикса, как показано в четвертой
       строке.

 2.    Щеnкните на кнопке Run Cell (Выпоnнить ячейку).
       Программа отобразит ожидаемый текст и специальные символы (рис.                                      12.2).


             Создание строк, включающих специальные символы

  In [2] : print     (" Часть этого текста      находится            на\r\nследук1Цей строке." )
             print C' Byxвa А с грависом:           \хСО.   11   )
             print   (" СИмвол рисования:      \u2562. " )
             print (" знaк абзаца:       \266. ")
             print   ( "Знак деления:     \xF7. "}

             Часть    этого    текста   находится     на
             следующей строке.
             Буква А с гра висоы: А.
             символ рисования: ~ -
             знак    абзаца:    ! .
             Знак    деления:    +,


   Рис.     12.2. Специальные символы                    используются для форматирования вывода


               В    Notebook          используется стандартный набор символов для разных
               платформ, поэтому вы будете видеть одни и те же специальные сим­
               волы независимо от того, на какой платформе работаете. Однако,
ВНИМАНИЕ!
               создавая приложение, обязательно протестируйте его на разных
               платформах, чтобы увидеть, не изменится ли его поведение. Набор
               символов для каждой конкретной платформы может использовать
               другие числа для представления специальных символов. Кроме
               того, выбор пользователем наборов символов может повлиять на
               отображение специальных символов вашим приложением. Всегда
               тщательно тестируйте используемые специальные символы.




Выбор отдельных символов
   Выше уже отмечалось, что строки состоят из отдельных символов. Они дей­
ствительно похожи на ожерелье                        -      каждая бусина является отдельным элемен­
том всей цепочки.
   В   Python       можно получить доступ к отдельным символам строки. Это важ­
ная особенность, позволяющая создавать новые строки, которые содержат
только часть исходной строки. Можно также комбинировать строки для созда­
ния новых строк. В таких операциях применяются квадратные скобки: после



                                                                        ГЛАВА    12    Работа со строками      257
имени переменной ставятся квадратные скобки, в которых указывается число,
как показано ниже.


MyString = "Здравствуй,           мир"
print(MyString[O])

                В результате отобразится буква з. Строки в            Python   индексируют­
                ся, начиная с позиции О. Например, если использовать вызов            print
                (MyString [1]), то будет выведена буква д.
 ЗАЛОМНИ!


   Можно также извлечь подстроку из строки. Для этого нужно в квадратных
скобках указать начальную и конечную позиции, разделенные двоеточием. На­
пример, результатом выполнения функции                 print (MyString [ 12: 14]) будет сло­
во мир. Вывод начинается с буквы, находящейся на 13-й позиции, и завершает­
ся буквой, находящейся на 15-й позиции (не забывайте о том, что индексация
ведется с нуля). В следующей пошаговой инструкции демонстрируется, как
работать с подстроками в               Python.
         1.     Введите следующий код в блокноте.

                Stringl = "Здравствуй, мир"
                String2 = "Python - это супер!"
                print(Stringl[O])
                print(Stringl[O:lO])
                print(Stringl[:lO])
                print(Stringl[lO:J)
                StringЗ = Stringl[:ll] + String2[:6]
                print(StringЗ)
                print(String2[:7]*9)
                Пример начинается с создания двух строк. Затем демонстрируются раз­
                личные способы индексации первой строки. Заметьте, что можно не ука­
                зывать начальную или конечную позицию в диапазоне, если нужно рабо­
                тать с остальной частью строки.

                Далее мы комбинируем две подстроки, соединяя начало подстроки
                Stringl   с началом подстроки      String2,   чтобы создать строку StringЗ.

                Операция, связанная с использованием символа +для объединения двух
                строк, называется конкатенацией. Это один из самых удобных операто­
                ров, о котором нужно помнить, работая со строками в приложении.
 ЗАЛОМ НИ!
                Последний шаг заключается в использовании функциональной возмож-
                ности   Python, которая     называется повторением. С ее помощью создается
                несколько копий строки или подстроки.

         2.     Щелкните на кнопке Run Cell (Выполнить ячейку).
                Программа отобразит различные варианты подстрок и комбинаций
                строк (рис.   12.3).


258          ЧАСТЬ З    Профессиональные методики программирования на Python
   In [5]:   Stringl "" "Здравствуй, мир"
             String2 = "Pytrюn - это супер!"
             print (Stringl[ O])
             print (Stringl[ O: lO J)
             print (Stringl[: lO J)
             print (Stringl[ ll :J)
             StringЗ = Stringl : 11' + String2[: 6]
             print (StringЗ)
             print (String2[: 7 J •9 )

             з
             Здравствуй
             Здравствуй
                 мир

             здравствуй,Руthоn
             Python Python Python Python Python Python Python Python Python

             Рис.      12.3. Можно выбирать отдельные фрагменты строк



Обработка строк
  Работа с диапазонами символов обеспечивает определенную степень
гибкости, но не дает возможности манипулировать строковым содержимым
или анализировать его. Например, может потребоваться перевести символы в
верхний регистр или определить, содержит ли строка одни лишь буквы. К сча­
стью, в   Python       есть функции, которые помогают решать задачи такого рода.
Вот наиболее часто используемые функции.

             ))    capi tali ze ().   Перевод первого символа строки в верхний регистр.

             ))    center    (ширина, заполнитель=" ").Центрирует строку таким
                   образом, чтобы ее ширина стала равна значению ширина. Если вы
                   предоставляете аргумент заполнитель, функция использует этот
                   символ. В противном случае используются пробелы для выравнива­
                   ния строки до нужной ширины.

             »     expandtabs    (размер_ та буляции=8). Раскрывает символы табу­
                   ляции в строке, заменяя их количеством пробелов, заданным аргу­
                   ментом размер_ табуляции. Если размер табуляции не задан, то по
                   умолчанию он равен      8 пробелам.
             ))    isalnum ().Возвращает True,        если строка включает хотя бы один
                   символ и все символы являются алфавитно-цифровыми.

             ))    isalpha    ().Возвращает   True,   если строка включает хотя бы один
                   символ и все символы являются буквами.

             ))    isdecimal     ().Возвращает    True,   если строка   Unicode   содержит
                   только десятичные символы.




                                                ГЛАВА    12   Работа со строками      259
          ))    isdigi t      ().Возвращает           True,    если строка содержит только цифры.

          ))    islower        ().Возвращает           True,   если строка содержит хотя бы один
                буквенный символ и все буквенные символы находятся в нижнем
                регистре.

          ))    isnumeric           ().Возвращает          True,   если строка      Unicode   содержит
                только числовые символы.

          ))    isspace        ().Возвращает           True,   если строка содержит только симво­
                лы пропуска (пробелы, табуляция, возврат каретки, перевод строки,
                прокрутка страницы, вертикальная табуляция, но не символ возвра­
                та на один символ).

          ))    isti tle       ().Возвращает           True,   если все слова в строке начинаются
                с прописной буквы, например Здравствуй, Мир. Это касается даже
                однобуквенных слов. Например, для строки ты и я возвращается
                значение        False, а для        строки Ты И я   -   значение    True.
          ))    isupper ().Возвращает True,                    если строка содержит хотя бы один
                буквенный символ и все буквенные символы находятся в верхнем
                регистре.

          ))    join (последовательность).                       Создает строку, в которой базовая
                строка по очереди разделяется каждым символом последов а                             -
                тельности, образуя повторяющиеся фрагменты. Например, если
                начать с команды                MyString ="Привет"       и ввести   print (MyString.
                j oin ( 11 ! * ! 11 )   ) ,   то результат будет ! Привет*Привет ! .

          ))    len (строка).             Возвращает длину строки.

          ))    lj ust    (ширина, заполнитель=" ").Выравнивает строку влево та­
                ким образом, чтобы ее ширина стала равна значению ширина. Если
                вы предоставляете аргумент заполнитель, функция использует
                этот символ. В противном случае используются пробелы для вырав­
                нивания строки до нужной ширины.

          ))    lower      ().Преобразует все символы верхнего регистра в строке
                в символы нижнего регистра.


          ))    lstrip ().Удаляет все                ведущие пробелы в строке.

          )) max      (строка)           . Возвращает символ, который имеет максимальное
                числовое значение в строке. Например, числовое значение симво­
                ла а больше числового значения символа А.

          )) min      (строка). Возвращает символ, который имеет минимальное
                числовое значение в строке. Например, числовое значение симво­
                ла А меньше числового значения символа а.

          ))    rj ust     (ширина, заполнитель=" ").Выравнивает строку впра­
                во таким образом, чтобы ее ширина стала равна значению ши­
                рина. Если вы предоставляете аргумент заполнитель, функция


260   ЧАСТЬ 3     Профессиональные методики программирования на Python
                использует этот символ. В противном случае используются пробелы
                для выравнивания строки до нужной ширины.

           ))   rstrip     ().Удаляет все хвостовые пробелы в строке.

           ))   spli t    (строка=" ", чиcлo=string.       count   (строка) ) . Разбивает
                строку на подстроки с помощью разделителя, указанного в пер­

                вом аргументе. По умолчанию в качестве разделителя использу­
                ется пробел. Следовательно, если строка содержит фразу А              Fine
                Day, будут получены три    подстроки: А,   Fine   и   Day. Параметр   число
                используется для определения количества возвращаемых под­

                строк. По умолчанию возвращается каждая подстрока, создавае­
                мая функцией.

           ))   splitlines ( чиcлo=string. count ( '\n') ) . Разбивает строку,          со­
                держащую символы перевода строки        (\n), на отдельные строки. Ка­
                ждое разбиение имеет место там, где стоит символ новой строки.
                В результирующих строках символы новой строки отсутствуют. Ко­
                личество возвращаемых строк указывается с помощью параметра

                число.


           ))   strip ().Удаляет все    ведущие и хвостовые символы в строке.

           ))   swapcase     ().Инвертирует регистр каждого буквенного символа
                в строке.

           ))   title     ().Возвращает строку, в которой начальная буква каждого
                слова переведена в верхний регистр, а все остальные символы сло­
                ва   -   в нижний.

           ))   upper ().    Преобразует все символы нижнего регистра в символы
                верхнего регистра.

           ))   zfill (ширина). Заполняет строку нулями слева, чтобы ее шири­
                на стала равна значению ширина. Эта функция предназначена для
                использования со строками, содержащими числовые значения. Ис­
                ходный знак числа сохраняется.


  Вы сможете лучше понять эти функции, если поэкспериментируете с ними.
Ниже демонстрируется использование некоторых из функций.

 1.   Введите сnедующий код в бnокноте.

      MyString = " Здравствуй, мир
      print(MyString.upper())
      print(MyString.strip())
      print(MyString.center(21, "*"))
      print (MyString.strip() .center(21,     "*"))
      print(MyString.isdigit())
      print(MyString.istitle())
      print(max(MyString))


                                             ГЛАВА 12      Работа со строками           261
              print(MyString.split())
              print (MyString. split () [О] 1
              Программа начинается с создания строки             MyString,   которая включает
              пробелы до и после текста, чтобы вы могли видеть, как работают связан­
              ные с пробелами функции. Первая из вызываемых функций,                    upper (),
              преобразует все символы строки в верхний регистр.

              Удаление лишних пробелов является обычной задачей при разработке
              приложений. И с ней хорошо справляется функция                strip ().Функция
              center ()        позволяет добавлять заполнители как в левой, так и в правой
               части строки, чтобы строка занимала требуемое пространство. Результат,
               полученный в результате комбинирования функций            strip ()   и   center (),
              будет отличаться от результата, полученного при использовании одной
              функции         center ().
              Функции разрешается комбинировать. Pythoп по очереди вызывает ка­
              ждую функцию в направлении слева направо. Порядок вызова функций
              будет влиять на результат, и разработчики часто допускают ошибки, ука-
 ЗАПомни1     зывая функции в неправильном порядке. Если результаты отличаются от
              ожидаемых, попробуйте изменить порядок расположения функций.

               Некоторые функции работают со строками как с аргументами, в частно­
              сти, функция max ().Если ввести         MyString .max (), Python выдаст ошибку.
               Если функция возвращает список строк, то можно получить доступ к от­
              дельному элементу списка, указав его индекс. В примере показано, как
               использовать функцию         spli t ()   для разбиения строки на подстроки. В
               конце демонстрируется порядок получения доступа только к первой
               подстроке в списке. Подробнее работа со списками будет рассмотрена
               в главе   13.
        2.     Щеnкните на кнопке          Run Cell   (Выпоnнить ячейку).

               Программа выведет модифицированные строки, как показано на
               рис.   12.4.



Поиск значения в строке

   Иногда требуется найти конкретную информацию в строке, например уз­
нать, содержит ли строка слово Привет. В                Python   имеется целый ряд функций
для анализа строк. Вот наиболее часто используемые функции.

                ))    count     (стр, на чало= О, конец=lеn (строка)          ) . Подсчитывает,
                      сколько раз подстрока стр встречается в строке. Можно ограни­
                      чить поиск путем указания начального индекса с помощью параме­

                      тра на чало и конечного индекса с помощью параметра конец.




262         ЧАСТЬ 3      Профессиональные методики программирования на Python
     In [6]:   MyString ~" Здравствуй, мир
               print (MyString . upper())
               print (MyString.strip())
               print (MyString.center( 21 , "*" ))
               print (MyString. strip () . center (21 , "*" ))
               print (MyString . isdigit())
               print (MyString.istitle())
               print (max (MyStri ng))
               print (MyString.split())
               print (MyString.split() [ О ])

                       ЗДРАВСТВУЙ , МИР
               Здравствуй,        мир
                   *    Здравствуй,      мир   "
                   ***Здравствуй,        мир***
                   False
                   False
               у

                   [ ' Здравствуй ,' ,    'мир ' ]
                   Здравствуй ,


       Рис. 12.4. Благодаря функциям обработка строк
                    становится более гибкой

))    endswith(cyффикc, начало=О, конец=lеn(строка) ). Возвраща­
      ет   True,   если строка завершается символами, заданными параме­

      тром суффикс. Можно ограничить поиск путем указания началь­
      ного индекса с помощью параметра на чало и конечного индекса

      с помощью параметра конец.


))    find   (стр , на чало=О, конец=lеn (строка) ) . Определяет, встре­
      чается ли подстрока стр в строке, и выводит индекс местоположе­

      ния. Можно ограничить поиск путем указания начального индекса
      с помощью параметра на чало и конечного индекса с помощью па­

      раметра конец.

))    index    (стр , начало=О, конец=lеn (строка)). Реализует ту же
      функциональность, что и функция                find (),   но генерирует исключе­
      ние, если подстрока стр не найдена.

))    replace          (старый, новый      [, макс)). Заменяет все вхождения под­
      строки старый подстрокой новый. С помощью параметра макс
      можно ограничить количество замен.


))    rfind(cтp, начало=О, конец=lеn(строка)).Реализуеттуже
      функциональность, что и функция                 find   (), но поиск выполняется
      с конца строки, а не с начала .

))    rindex       ( стр, начало=О, конец=lеn (строка)               ) . Реализует ту   же
      функциональность, что и функция                index   ( ),но поиск выполняется
      с конца строки, а не с начала.




                                           ГЛАВА 12      Работа со строками         263
               ))    startswith (префикс,      начало=О, конец=lеn (начало)). Возвра­
                     щает True, если строка    начинается символами, заданными параме­

                     тром префикс. Можно ограничить поиск путем указания началь­
                     ного индекса с помощью параметра начало и конечного индекса

                     с помощью параметра конец.


  Поиск требуемых данных             -     важная задача программирования, с которой
вы будете сталкиваться независимо от того, какое приложение создаете. Ниже
показано, как выполнять поиск в строках.


 1.   Введите следующий код в блокноте.

      SearchMe       = "Малина окрашена в красный цвет,         а   голубика    окрашена
                        в   синий цвет!"
      print    ( SearchMe. f ind 1"в") 1
      print    ( SearchMe. rf ind ("в") )
      pr int   ( SearchMe. count ("а") )
      print    (SearchMe. startswith 1"красный"))
      print(SearchMe.endswith("cиний"))
      print ( SearchMe. replace ("Малина", "Машина")
              . replace ("голубика", "ракета") 1

      Пример начинается с создания строки           SearchMe, содержащей два экземпляра
      слова в. Это позволит продемонстрировать, как различаются результаты по­
      иска в зависимости от того, с какой позиции вы начинаете. При использова­
      нии функции       find () поиск выполняется         с начала строки, а при использова­
      нии функции       rfind () - с конца строки.
      Иногда нужно узнать, сколько раз в строке встречается определенный набор
      символов. В таком случае на помощь придет функция                 count ().
      Далее с помощью функции            startswi th ()   мы проверяем, начинается ли стро­
      ка с определенного шаблона, и точно также с помощью функции                   endswi th ()
      проверяется, заканчивается ли строка указанным шаблоном.

      Последняя инструкция в примере заменяет слово "Малина" словом "Маши­
      на", а слово "голубика"        -     словом "ракета". Обратите внимание на то, что
      инструкция занимает две строки, а функция              replace ()      вызывается дважды.
      Подобный способ записи позволяет улучшить наглядность кода.

 2.   Щелкните на кнопке Run Cell (Выполнить ячейку).
      Результаты работы программы показаны на рис.                  12.5.   Принципиальный мо­
      мент     -    поисковые функции возвращают разные индексы в зависимости от
      того, с какого места строки был начат поиск. Важно выбирать подходящую
      функцию для получения правильных результатов.




264    ЧАСТЬ 3         Профессиональные методики программирования на Pythoп
  In [ 9 J :   SearchМe       =   "Малина   окрашена    в -красный uвет,      а голубиR:а окрашена в синий цве'I·   !"
               print (SearchМe.find( "в" ) )
               print (SearchМe.rfind( "в" ))
               print (SearchМe .count ( "а" ))
               print (SearchМe. startswith ( "красный" ))
               print (SearchМe.endswith( "cиний" ))
               print ( searchМe. replace       ( "малина(' ,    "Машина" )
                           .rерlасе( "голубика" ,      "ракета" ))


               16
               61
               9
               False
               False
               Машина      о крашена в красный цвет,           а рахета    окрашена   в синий цвет!



                             Рис.   12.5. Применение функций поиска и замены



Форматирование строк
  Задача форматирования                       -    представить строки в виде, удобном для поль­
зователя и простом для восприятия. Форматирование не означает добавления
специальных шрифтов или эффектов, а связано лишь с представлением дан­
ных. Например, пользователю может понадобиться вывести число с фиксиро­
ванной запятой, а не десятичное число.
  Существует несколько способов форматирования строк, которые будут про­
демонстрированы в книге. Большинство из них основано на использовании
функции        format        ().Сначала вы создаете строку со спецификацией формата, а
затем вызываете функцию                      format      (),добавляя данные в эту строку. Специфи­
кация формата может быть очень простой и содержать, например, две фигур­
ные скобки          { },    которые задают заполнитель для данных. Заполнители можно
нумеровать, создавая более сложные правила форматирования. Например, вы­
ражение {О} ссылается на первый элемент данных в строке. Если элементы
данных пронумерованы, можно повторять их, чтобы одни и те же данные по­
являлись в строке более одного раза.
  Спецификация формата стоит после двоеточия. Если нужно создать только
спецификацию, то в фигурных скобках указывается лишь двоеточие и любое
форматирование, которое нужно использовать. Например, спецификация                                                       {:
f} задает вывод числа с фиксированной точкой. Если вы нумеруете элементы
данных, то число, которое предшествует двоеточию, скажем, {о:                                             f},   задает

вывод числа с фиксированной запятой только для этого элемента. Синтаксис
спецификации формата таков:

[[заполнитель] выравнивание] [знак][#]                               [0]   [ширина][,] [.точность] [тип]




                                                                     ГЛАВА 12         Работа со строками             265
  Этот синтаксис подробно описан по адресу                   https: //docs .python. org/3/
library/string.html.
  Рассмотрим на3начение основных элементов спецификации.

          >>    заполнитель. Задает символ, используемый для выравнивания
               данных, которые слишком малы, чтобы поместиться в отведенном
               для них пространстве.


          »     выравнивание. Задает способ выравнивания данных в области ото­
               бражения. Можно использовать следующие типы выравнивания:

                • <-      выравнивание влево;

                • >-      выравнивание вправо;

                •   л -   выравнивание по центру;

                • =-      выравнивание по ширине.

          »     знак. Определяет использование знаков в выводимых результатах:

                • +-          положительные числа имеют знак "плюс'; а отрицатель­
                    ные   -       знак"минус";

                •   - -   отрицательные числа снабжаются знаком "минус";

                •   <пробел> -         положительным числам предшествует пробел, а от­
                    рицательным числам           -   знак "минус".

          »     #.Указывает на то, что следует использовать альтернативный фор­
                мат отображения чисел. Например, к шестнадцатеричным числам
                будет добавлен префикс Ох.

          »     О. Указывает на то, что выводимые числа должны иметь знаки и до­
                полняться нулями по мере необходимости для обеспечения согла­
                сованного вывода.


          »     ширина. Определяет общую ширину поля данных (даже если дан­
                ные не помещаются в отведенное пространство).

          » , . Указывает на то, что числовые данные должны содержать запятые
                в качестве разделителя разрядов.

          » . точность. Определяет количество символов                       после десятичной
                точки.


          »     тип. Определяет тип вывода, даже если тип входных данных не со­
                впадает. Типы вывода делятся на следующие три группы.

                •   Строка. Можно использовать тип              s   или просто ничего не указы­
                    вать.


                •   Целое число. Вот целочисленные типы: Ь (двоичный), с (символь­
                    ный),     d   (десятичный), о (восьмеричный), х (шестнадцатеричный
                    с буквами в нижнем регистре), Х (шестнадцатеричный с буква­
                    ми в верхнем регистре) и           n   (зависящее от локальных настроек



266   ЧАСТЬ 3       Профессиональные методики программирования на Python
                      десятичное число, использующее соответствующие символы

                      в качестве разделителя разрядов).

                  •   Число с плавающей точкой. Вот типы с плавающей точкой: е (экс­
                      поненциальная запись, использующая символ нижнего регистра

                      е в качестве разделителя), Е (экспоненциальная запись, исполь­
                      зующая символ верхнего регистра Е в качестве разделителя),      f
                      (число с фиксированной точкой с символами нижнего регистра),
                      F (число с фиксированной точкой с символами верхнего реги­
                      стра),g (общий формат в нижнем регистре), G (общий формат
                      в верхнем регистре),   n (зависящий от локальных настроек общий
                      формат, в котором используются соответствующие символы для
                      десятичного разделителя и разделителя разрядов) и    %(процент­
                      ное значение).

  Элементы спецификации формата должны стоять в корректном порядке,
иначе   Python   не будет знать, что с ними делать. Если вы укажете выравнива­
ние перед заполнителем,        Python   выведет сообщение об ошибке и не станет
применять форматирование. Следующая пошаговая инструкция поможет вам
увидеть, как применяются спецификации форматирования и в каком порядке
задаются элементы спецификации.

 1.     Введите следующий код в блокноте.

        Formatted = "{:d}"
        print(Formatted.format(7000))
        Formatted = " {:, d}"
        print(Formatted.format(7000))
        Formatted = "{:л15,d}"
        print(Formatted.format(7000))
        Formatted = "{:*л15,d}"
        print(Formatted.format(7000))
        Formatted = "{:*л15.2f}"
        print(Formatted.format(7000))
        Formatted = "{:*>15Х}"
        print(Formatted.format(7000))
        Formatted = "{:*<#15х}"
        print(Formatted.format(7000) 1
        Formatted = "{0} {1} и {0} {2}."
        print ( Formatted. format ("синяя", "машина",      "ракета")   )
        Пример начинается с форматирования поля в виде десятичного значения. За­
        тем к выводу добавляется разделитель разрядов. Следующий шаг        -   сделать
        поле шире, чем необходимо для хранения данных, и центрировать данные
        в поле. Наконец, в поле добавляется заполнитель-звездочка.

        После этого мы переходим к другим типам данных. Сначала мы выводим те же
        данные в формате с фиксированной запятой. В примере также показан вывод


                                                ГЛАВА 12     Работа со строками    267
      данных в шестнадцатеричном формате в верхнем и нижнем регистре. Число с
      символами верхнего регистра выравнивается по правому краю, а с символа­

      ми нижнего регистра     -   по левому краю.


      И наконец, в примере демонстрируется, как использовать пронумерованные
      поля. В данном случае создается строка вывода, в которой повторяется одно
      из входных значений.

 2.   Щелкните на кнопке      Run Cell     (Выполнить ячейку).
      Программа выведет данные в разных форматах, как показано на рис.              12.6.


       In (19]:   Forrnatted = "{ :d}"
                  print (Forrnatted.forrnat( 7000 ))
                  Forrnatted = "{: , d)"
                  print (Forrnatted . forrnat( 7000 ))
                  Forrnatted = "{: л15 , d}"
                  print (Forrnatted.forrnat( 7000 ))
                  Forrnatted "" "{:* лlS ,d)"
                  print (Forrnatted.forrnat( 7000 ))
                  Forrnatted = "{ :*л15.2f}"
                  print (Forrnatted.forrnat( 7000 ))
                  Forrnatted = " { : *>15Х}"
                  print (Forrnatted.forrnat( 7000 ))
                  Forrnatted " "{:* <flSx} "
                  print (Formatted.forrnat( 7000 ))
                  Forrnatted = " {О) {1} и r О} {2} . "
                  print (Forrnatted. forrnat ( "синяя" , "машина" ,   "ракета" ))


                  7000
                  7,0 00
                        7, 000
                  *****7 , 000 *****
                  ****7 0 00 . 0 0****
                  *********** 185 8
                  Oxlb58*********
                  синяя    машина   и    синяя   ракета.




      Рис. 12.6. Использование форматирования для представления данных
                                  в нужном виде




268    ЧАСТЬ 3    Профессиональные методики программирования на Python
Глава             13

Управление списками

    В ЭТОЙ ГЛАВЕ ...

    )) Знакомство со списками
    ))    Создание списков

    )) Управление списками

    )) Использование объекта Counter




м
              ногие упускают из виду тот факт, что большинство приемов програм­
              мирования взято из реальной жизни. Отчасти это связано с употре­
              блением незнакомой терминологии. Например, большинство людей
называют место для хранения чего-либо коробкой или ящиком, тогда как для
программистов привычнее термин пере.иенная. Но со списками иная ситуа­
ция: они знакомы всем. Каждый человек составляет списки и использует их
в повседневной жизни. Так что многое в этой главе должно быть вам понятно.
Единственное        -   нужно научиться думать о списках так, как это принято
в   Python.
         Многие считают, что со списками трудно работать, хотя это не так. Созда­
вая список, мы просто записываем элементы в том порядке, который считаем
правильным. Иногда мы переупорядочиваем список, переставляя его элемен­
ты. Порой мы используем палец для поиска нужной записи в списке. Все то,
что мы привыкли делать со списками, выполнимо и в        Python. Разница лишь в
том, что теперь нужно продумывать каждый шаг,        чтобы Python понимал наши
намерения.

         Эта глава посвящена рассмотрению способов создания, управления, по­
иска и вывода списков. Изучив главу, вы сможете применять списки, чтобы
делать свои приложения более надежными, быстрыми и гибкими. Исходный
код примеров этой главы находится в файле                BPPD_ 13 _ Managing_ Lists. ipynb
(см. введение).




Упорядочение информации в приложении
   Люди создают списки, чтобы упорядочить информацию и упростить доступ
к ней. В     Python     списки служат тем же целям, и часто без них не обойтись. На­
пример, может понадобиться создать объект, предназначенный для хранения
названий дней недели или месяцев в году. Эти названия сформируют список,
как если бы вы записали их на бумаге. В следующих разделах мы поговорим о
принципах работы со списками.


Знакомство со списками
   В   Python   список определяется как разновидность последовательности. По­
следовательность            -    это способ хранения данных в одном месте, но в виде
отдельных объектов. Представьте себе почтовые ящики, которые устанавли­
ваются в жилых домах. Один почтовый шкаф содержит несколько небольших
ящиков, в каждый из которых кладется корреспонденция для конкретной квар­
тиры. В      Python     поддерживаются и другие виды последовательностей, которые
будут рассмотрены в главе            14:
               ))       кортежи;

               ))       словари;

               ))       стеки;


               ))       очереди;

               ))       двухсторонние очереди.



              Из всех последовательностей списки наиболее просты для понима­
              ния. Освоив списки, вы научитесь лучше работать с другими вида­
              ми последовательностей, которые обеспечивают большую функци­
 ЗАПОМНИ!
              ональность и гибкость. Суть в том, что данные хранятся в списке
              почти так же, как если бы вы записывали их на листе бумаги: один
              элемент следует за другим, как показано на рис.         13.1. Любой   список
              имеет начало, середину и конец. Как показано на рисунке, элементы
              списка пронумерованы. (Даже если вы обычно не нумеруете их
              в реальности,        Python   всегда нумерует элементы за вас.)




270         ЧАСТЬ   3     Профессиональные методики программирования на             Python
                                1. Январь
                                2. Февраль
                                3. Март
                                4.Апрель
                                5. Май
                                6. Июнь
                                7. Июль
                                8. Август
                                9. Сентябрь
                                10. Октябрь
                                11 . Ноябрь
                                12. Декабрь




                        Рис. 73. 7. Список является последователь­
                          ностью элементов, подобно обычному
                              списку, записанному в блокноте


Как компьютер просматривает списки
   Компьютер не просматривает списки так, как мы. У него нет блокнота и
ручки. Зато у компьютера есть память, поэтому он сохраняет каждый элемент
списка в отдельной ячейке памяти, как показано на рис.                     13.2.   Память имеет
непрерывный характер, и каждый новый элемент добавляется в следующую
ячейку памяти .



             Январь   Февраль        Март                Октябрь      Ноябрь        Декабрь



       Рис.    73.2. Каждый элемент, добавляемый в список, занимает отдельную
                                           ячейку памяти


   Компьютеры используют нечто наподобие почтовых ящиков для хранения
списков. Список в целом представляет собой своего рода почтовый шкаф . Ког­
да поступает новый элемент данных, компьютер помещает его в следующий
почтовый ящик, доступный в шкафу.

                Ячейки памяти, в которых хранятся элементы сг1иска, нумеруются
                подобно почтовым ящикам , на которых указаны номера квартир.
                Только в данном случае нумерация начинается с О, а не с                1.   Каждый
 ЗАПОМНИ !
                очередной ящик получает следующий номер по порядку. Список с
                названиями месяцев года будет содержать               12   элементов, которые
                будут пронумерованы от О до         11   (а не от   1 до 12,   как можно было


                                                ГЛАВА    13 Управление списками                271
            предположить). Важно как можно быстрее привыкнуть к компью­
            терной системе нумерации, потому что даже опытные программи­
            сты допускают ошибки, используя            1,   а не О в качестве отправной
            точки для нумерации.



  В зависимости от того, какая информация хранится в каждом почтовом
ящике, они не обязательно должны быть одинакового размера.                 Python   позво­
ляет хранить строку в одном элементе, целое число             -   в другом и число с пла­

вающей точкой         -    в третьем. Компьютер не знает, какая информация хранится
в каждом почтовом ящике, и ему это не нужно. Все, что он видит,              -    это один
длинный список чисел, которые могут обозначать все что угодно.                   Python   бе­
рет на себя всю заботу по обработке элементов списка в соответствии с кор­
ректным типом данных. Он гарантирует, что если вы запрашиваете пятый эле­
мент списка, то получите именно его.


            Как правило, рекомендуется создавать списки однотипных элемен­
            тов, чтобы упростить управление данными. Например, при создании
            списка, состоящего только из целых чисел, вам не придется тратить
  СОВЕТ
            время на постоянные проверки типа. Но бывают ситуации, когда
            возникает потребность в использовании смешанных данных. Мно­
            гие языки программирования требуют, чтобы списки имели только
            один тип данных, но        Python   в этом плане более гибкий и допускает
            наличие смешанных данных. Просто помните о том, что использова­
            ние смешанных данных в списке означает необходимость постоянно
            проверять их тип при извлечении информации. Если вы попьпае­
            тесь обработать строку как целое число, приложение может аварий­
            но завершиться.




Создание списков
  Как уже упоминалось, списки в           Python могут быть смешанного типа.         Одна­
ко ограничение списка одним типом данных всегда является наилучшей прак­
тикой. В следующей пошаговой инструкции демонстрируется, как создавать
списки в   Python.
 1.   Откройте новый бпокнот.
      Можете также воспользоваться файлом исходного кода BPPD_ 13_Managing
      Lists . ipynb (см. введение).
 2.   BвeдитeListl= ["Один", 1, "два", True].




272       ЧАСТЬ   3       Профессиональные методики программирования на             Python
            Python создаст список List 1. Список содержит два строковых значения
            ("Один" и "два"), целое число (1) и булево значение (True). Естественно,
            вы не увидите результат, поскольку Python создает список в памяти.

            Вы заметите, что каждый тип данных выделяется своим цветом. Если ис­
            пользуется цветовая схема, заданная по умолчанию,                      Python отображает
            строки оранжевым цветом, цифры               -    черным, булевы значения        - зеле-
здnомни1    ным. Цвет записи    -    это сигнал, позволяющий понять, правильно ли вы
            ввели данные. Благодаря этому уменьшается количество ошибок при
            создании списков.

       3.   Введите print (Listl) и щелкните на кнопке                       Run Cell   (Выполнить
            ячейку).

            На экране отобразится содержимое всего списка, как показано на
            рис.   13.3. Обратите   внимание: строковые значения отображаются води­
            нарных кавычках, даже если они изначально были взяты в двойные ка­
            вычки. Оба варианта одинаково допустимы в                    Python.


                               Создание списков

                     In [1]:   Listl = [ "Один" , 1 ,          "Два" ,    True]
                               print (Listl)

                               [ ' один' , 1 ,   ' два   ',   Т rue]


              Рис.   13.3. Python отображает содержимое списка Li s t 1

       4.   Введите dir (Listl) и щелкните на кнопке                     Run Cell.
            Python отобразит список действий, которые можно выполнять с по­
            мощью списков, как показано (частично) на рис.                 13.4. Выводимый   резуль­
            тат сам по себе является списком. Таким образом, вы используете один
            список, чтобы определить, какие действия можно выполнить над другим
            списком.



            Когда вы начнете работать со сложными объектами, вы увидите, что
            функция     dir () сообщает, какие действия можно выполнить, исполь­
            зуя этот объект. Действия, отображаемые без знаков подчеркивания,
ЗАПОМНИ!
            являются основными действиями, которые можно выполнять над
            списком. Вот они:

             ))    append;
             ))    clear;
             ))    сору;

             ))    count;


                                                 ГЛАВА 13        Управление списками            273
                            In [2] : dir (Listl J
                            Outt2].    ['    add
                                             class
                                             contains
                                                      -
                                             delattr '
                                             delitern
                                             dir
                                             doc
                                                -
                                            _eq_ '
                                              forrnat
                                            _ge_ ,
                                            _getattribute _
                                            _ getitern_
                                            _ gt_
                                              hash
                                              iadd
                                              irnul
                                              init
                                              init subclass
                                              iter

                 Рис.   13.4.   Pythoп предоставляет список действий,
                   которые можно выполнять с помощью списка



           ))    extend;
           ))    index;
           ))    insert;
           ))    рор;

           ))    remove;
           ))    reverse;
           ))    sort.



Доступ к спискам

  После создания списка понадобится получать доступ к информации, ко­
торую он содержит. В предыдущем разделе было показано, как использовать
функции   print () и dir () для взаимодействия со списком, но существуют и
другие способы обращения к спискам, как описано в следующей пошаговой
инструкции.



 1.   Введите Listl = ["Один", 1, "два", True] и щелкните на кнопке Run
      Cell (Выполнить ячейку).
      Python создаст список Listl.


274    ЧАСТЬ 3    Профессиональные методики программирования на Python
2.   Введите Listl       [1]     и щелкните на кнопке                   Run Cell.
     Будет выдан результат          1, как    показано на рис.       13.5. Число, заключенное в ква­
     дратные скобки, называется индексом.                    Python всегда начинает индексацию с О,
     поэтому запрос элемента с индексом                     1 означает получение второго элемента
     в списке.




                                    Доступ к спискам

                     In [5]:        Listl tlJ I

                     0Ut[5]:        1

                  Рис.    13.5. Убедитесь в использовании коррект­
                                              ного индекса


3.   Введите Listl       [1: З] и щелкните на кнопке Run Cell.
     Будет выдан диапазон значений, который включает два элемента, как пока­
     зано на рис. 13.6. Верхняя граница диапазона всегда на единицу больше, чем
     количество возвращаемых элементов. В данном случае это означает, что вы
     получаете элементы          1 и 2, а не элементы с 1 по 3, как можно было бы ожидать.


                                     In [6]:         Listl ( 1 : 3 )

                                     ou [ 6]         [ 1,   • два • ]


                                 Рис.    13.6. Диапазоны содержат
                                         несколько значений


4.   Введите Listl       [1:]     и щелкните на кнопке                   Run Cell.
     На экране появятся все элементы, начиная с элемента            1 и до конца списка,
     как показано на рис.        13.7. Если верхняя граница диапазона не указана, значит,
     подразумевается вся оставшаяся часть списка.




                  I n [ 7] :     Li s t 1 11 : ] 1

                  ou t ( 7 J :    [ 1,   • два ' ,   т rue]


                 Рис. 13.7. Если не указать верхнюю границу диапа­
                  зона, будет выведена оставшаяся часть списка

5,   Введите Listl       [: З] и щелкните на кнопке Run Cell.
     Отобразятся элементы от О до                2. Если нижняя граница диапазона не указана,
     вывод начинается с элемента О, как показано на рис.              13.8.




                                                       ГЛАВА      13      Управление списками   275
                       In [8]:      Listl[: З ]


                       с t [ 8J:    [   'один'   , 1,   'два'   ]

                  Рис.   13.8.   Если не указать нижнюю границу диапазона,
                                    вывод начнется с элемента О

              В   Python    можно использовать отрицательные индексы, хотя это и
              кажется странным. При наличии отрицательного индекса                             Python бу­
              дет просматривать список в направлении справа налево. Например,
ТЕХНИЧЕСКИЕ
ПОДРОБНОСТИ   если вы создадите список                  Listl =     ["Один",   1,   "два",   True]   и вве­
              детеListl [-2 J, то получите результат "два". Аналогично при вводе
              List [-3 J вы получите значение 1. В этом случае крайний справа
              элемент имеет индекс               -1.


Циклический обход списков
    Чтобы автоматизировать обработку элементов списка, требуется какой-то
способ циклического обхода списка. Простейший способ выполнить это                                      -
воспользоваться инструкцией                 for,   как описано ниже.

  1.    Введите сnедующий код в бnокноте.

        Listl = [О, 1, 2, 3, 4, 5]
        for Item in Listl:
           print(Item)
        Пример начинается с создания списка, содержащего числовые значения. За­
        тем используется цикл           for для    получения каждого элемента списка и отобра­
        жения его на экране.

  2.    Щеnкните на кнопке              Run Cell (Выпоnнить ячейку).
        Python отобразит содержимое списка по одному элементу в строке, как пока­
        зано на рис.13.9.



Изменение списков
    Содержимое списка можно изменить, если возникнет такая необходимость.
Под изменением списка понимается добавление новых записей и удаление су­
ществующих. При работе со списками применяют акроним                                  CRUD,     означаю­
щий    "Create, Read, Update, Delete"              (создать, прочесть, обновить, удалить), т.е.
четыре основные операции работы с объектами данных. Вот функции, связан­
ные с   CRUD:

276       ЧАСТЬ 3      Профессиональные методики программирования на Python
                              Циклический обход списков

              In [1]:         Listl " [ О , 1 , 2 , 3 , 4 , 5 )
                              for Item in Listl :
                                 pп.nt (Item)


                              о
                             1
                             2
                              з
                              4
                              5

            Рис.    73.9.   Благодаря циклу облегчается получение копии каждого
                                                элемента списка



               »      append () - добавление новой записи в конец списка;
               ))      clear () -          удаление всех записей из списка;

               ))     сору        () -    создание копии текущего списка и вставка ее в новый
                      список;


               ))     extend ( ) -          добавление элементов из существующего списка в те­
                       кущий список;

               ))      insert () -          добавление новой записи в указанную позицию спи­
                      ска;


               ))     рор    () -        удаление записи из конца списка;

               ))      remove ()         -удаление записи из указанной позиции списка.


   В следующей пошаговой инструкции показано, как модифицировать спи­
ски. Это всего лишь практическое упражнение, цель которого                       -   помочь вам
понять, как работают списки. По мере чтения книги вы увидите, как те же са­
мые функции применяются в приложениях.

        1.    Введите        List2 = [ ] •
              Pythoп создаст список              List2.
              Обратите внимание на то, что в квадратных скобках ничего нет. Список
              List2         не содержит никаких записей. Можно создавать пустые списки,
              которые будут заполняться информацией позже. Фактически именно так
 зАпомни1     создается большинство списков, поскольку вы обычно не знаете, какую
              информацию они будут содержать, пока пользователь не начнет взаимо­
              действовать со списком.

        2.    Введите         len (List2) и щелкните на кнопке Run Cell (Выполнить
              ячейку).




                                                          ГЛАВА 13   Управление списками    277
      Функция   len ()    возвращает значение О, как показано на рис.           13.1 О.   При созда­
      нии приложения можно проверять, пуст ли список, используя функцию                       len ( ) .
      Если список пустой, вы не сможете выполнять такие действия, как, например,
      удаление элементов из списка, поскольку удалять просто нечего.




                            In [2]:         List2 = []
                                            len (List2)

                            Out[2]:         О



                          Рис.    13.1 О.
                                        Проверка списка на предмет
                                       наличия содержимого


 3.   Введите List2 .append(l) и нажмите кnавиwу                    <Enter>.
 4.   Введите len (List2) и щеnкните на кнопке                 Run Cell.
      Теперь функция      len ()     сообщает о том, что длина списка равна        1.
 5.   Введите   List2 [О] и щеnкните на кнопке Run Cell.
      На экране появится значение, сохраненное в элементе О списка                 List2,    как по­
      казано на рис.     13.11.


                           In (4) :         List2 !01

                           Out[4]:          1

                     Рис.    13.11. Добавление элемента изменяет
                                                длину списка

 6.   Введите Lis t2 . insert (О, 2) •
      Функция     insert ()       требует два аргумента. Первый аргумент -                это индекс
      вставки, в данном случае О. Второй элемент               -   это объект, который нужно
      вставить в указанной позиции; в данном случае это число              2.
 7.   Введите List2 и щеnкните на кнопке Run Cell.
      Python добавляет еще один элемент в список List2. С помощью функции
      insert ()    новый элемент можно вставить перед первым элементом списка,
      как показано на рис.        13.12.


                          In [5 ]:      List2.insert( O, 2 )
                                        List2

                         Out (5):       (2,     1]


                   Рис. 13.12. Благодаря функции insert ()можно
                выбирать, где необходимо вставить новый элемент




278    ЧАСТЬ 3      Профессиональные методики программирования на Python
 8.    Введите ListЗ      =List2. сору().
       Новый список ListЗ становится точной копией списка                       List2.   Копирование
       часто применяется для создания временной версии существующего списка,
       в результате чего пользователь сможет вносить изменения во временную ко­

       пию, а не в исходный список. После завершения ввода данных пользователем
       приложение либо удаляет временный список, либо копирует его в исходный
       список.


 9.    Введите   List2. extend (ListЗ).
       Pythoп скопирует все элементы из списка ListЗ в конец списка                      List2. Подоб­
       ная операция часто применяется для объединения двух списков.

1О .   Введите List2 и щелкните на кнопке Run Cell.
       После выполнения операций копирования и расширения список                          List2   будет
       содержать значения          2, 1, 2 и 1,   как показано на рис.   13.13.


                     In [ 6] :       ListЗ = List2. сору()
                                     List2.extend(List3)
                                     List2

                     < ut [' ' :     [ 2, 1, 2, 1]

                  Рис.   13.13.   Благодаря функциям сору () и           e x tend ()
                 можно быстро перемещать большие объемы данных

11 .   Введите List2. рор          () и щелкните на кнопке Run Cell.
       Pythoп отобразит значение             1, как показано на рис. 13.14. Это значение хра­
       нилось в конце списка, а функция р ор            () всегда удаляет значения из конца
       списка.




                                  In [7]:    List2.pop()

                              Out t 7]:      1


                            Рис. 13.14. Функция рор ()позволяет
                            удалять элементы из конца списка

12.    Введите List2.      remove (1) и щелкните на кнопке Run Cell.
       На этот раз Pythoп удалит элемент               1.   В отличие от функции рор       ( ) , функция
       remove () не отображает значение удаляемого элемента.
1 3.   Введите   Lis t2 . clear () .
       После применения функции              clear ()       список станет пустым.

14.    Введите   len (List2)         и щелкните на кнопке           Run Cell.




                                                     ГЛАВА 13      Управление списками             279
      В данном случае результат будет О, так как список                    List2   пуст. Итак, мы опро­
      бовали все функции модификации, которые Pythoп предоставляет для работы
      со списками.




  ИСПОЛЬЗОВАНИЕ ОПЕРАТОРОВ ПРИ РАБОТЕ СО СПИСКАМИ


  Некоторые действия над списками можно выполнять с помощью опера­
  торов. Например, если нужно создать список, содержащий четыре копии
  слова Здравствуй, то можно использовать инструкцию                          MyList    = ["Здрав­
  ствуй" J       * 4 для   заполнения списка. Список допускает повторение элемен­
  тов. Оператор умножения(*) сообщает Pythoп, сколько раз нужно повторить
  данный элемент. Pythoп создаст соответствующее количество копий элемента.
  В результате список         MyList будет выглядеть            так:   [ 'Здравствуй' , 'Здрав­
  ствуй'     ,   'Здравствуй'   , 'Здравствуй' ] .
  Для заполнения списка можно также использовать конкатенацию. Например,
  в результате выполнения инструкции                  MyList =    ["Здравствуй"]       +   ["мир"]   +
   [" ! "J   * 4 будут созданы 6 элементов в списке MyList. Первым элементом бу­
  дет "Здравствуй", вторым             -     "мир", а за ними последуют четыре элемента,
  содержащих один восклицательный знак("!").

  Оператор членства         (in) также работает со списками. В этой            главе используется
  простой и понятный способ поиска в списках, но с помощью оператора член­
  ства можно упростить некоторые инструкции, сделав их более короткими. На­
  пример, выражение "Здравствуй"            in MyList вернет True, если список был
  заполнен значениями          [ 'Здравствуй' , 'мир' , ' ! ' , 1 ! 1 , 1 ! 1 , 1 ! 1 J.




Поиск в списках
  Изменить содержимое списка будет непросто, если не знать, что в нем со­
держится. И здесь приходит на помощь возможность поиска в списке. Ниже
показано, как искать в списке нужные значения.


 1.   Введите следующий код в блокноте.

      Colors = ("Красный", "Оранжевый", "Желтый", "Зеленый",                          "Синий")
      ColorSelect = ""
      while str.upper(ColorSelect) != "ВЫХОД":
         ColorSelect = inрut("Укажите название цвета: ")
         if (Colors.count (ColorSelect) >= 1):
                 print("Этoт    цвет указан       в   списке!")
             elif (str.upper(ColorSelect)             !=   "ВЫХОД"):
                 print("Этoт    цвет       отсутствует     в   списке!")




280     ЧАСТЬ 3       Профессиональные методики программирования на Python
               Пример начинается с создания списка                     Colors, в котором содержатся
               названия цветов. Также создается переменная                   ColorSelect, в которой
               хранится название цвета, введенного пользователем. Затем приложение
               входит в цикл, в котором у пользователя запрашивается название цвета,

               сохраняемое в переменной                ColorSelect. До тех пор пока этой    перемен­
               ной не будет присвоено значение "ВЫХОД", приложение будет продол­
               жать выполнять цикл, запрашивая ввод данных.

               Всякий раз, когда пользователь вводит название цвета, приложение
               подсчитывает количество вхождений этого цвета в списке. Если число
               больше или равно единице, значит, цвет содержится в списке, и на экра­
               не появляется соответствующее сообщение. С другой стороны, если за­
               прошенного цвета нет в списке, на экране появляется альтернативное

               сообщение.

               Обратите внимание на то, каким образом в этом примере используется
               предложение   elif. Оно позволяет поверить, не содержит ли перемен­
               ная   ColorSelect слово "ВЫХОД". Соответствующее сообщение не долж-
совЕТ          но быть выведено, если пользователь хочет завершить работу с прило­
               жением. Такого рода проверки нужно всегда применять во избежание
               путаницы или даже потери данных (когда приложение выполняет задачу,
               которую пользователь фактически не запрашивал).

        2.     Щелкните на кнопке              Run Cell   {Выполнить ячейку).

               Программа попросит ввести название цвета.

        3.     Введите Синий.
               На экране появится сообщение о том, что этот цвет включен в список
               (рис.    13.15).


                Поиск в списках

  In [ *] : Colors = [ "Красный" , " Оранжевый " , " Желтый" , "Зеле.t<"ыйu ,          " Синий" ]
            ColorSelect = ""
            while str .upper(ColorSelect) != " ВЫХОД " :
               ColorSelect " inрut (" Укажите название цвета: ")
               if (Colors.count(Colorselect) >= 1 ) :
                          print (" Этoт цвет указан в списке !")
                       elif (str . upper(ColorSelect)         !=   "ВЫХОД" ):
                          print (" Этoт       цвет   отсутствует   в   списке'" )


                Укажите название цвета:              Синий
                Этот     цвет указан      в   списке!


                 Рис. 1З.15. Сообщение о том, что цвет имеется в списке


4.      Введите Пурпурный.
        Появится сообщение о том, что цвет отсутствует в списке, как показано на
        рис.   13.16.

                                                        ГЛАВА 13        Управление списками         281
              Поиск в списках

  In [ *] :   Colors :      [ "Красный." ,   " Оранжевый" ,       "Желтый" ,      "Зеленый" ,   " Синий ")
              ColorSelect = ""
              While str .upper(Colorselect) != "ВЫХОД ":
                ColorSelect • inрut (" Укажите название                    цвета:     ")
                 i f (Colors . count(ColorSelect) >= 1 ):
                      print (" Этoт цвет указан в списке!" )
                 elif (str . upper(ColorSelect)              !•    " ВЫХОД ") :
                      print ( "Этoт цвет          отсутствует      в   списке !")


              Укажите название        цвета:      синий
              Этот   цвет   указан    в   списке!
              Укажите    название     цвета:      Пурпурный
              Этот   цвет   отсутствует       в   списке!



                 Рис.    13. 16.   Сообщение об отсутствии цвета в списке

 5.   Теперь введите выход.
      Приложение завершит работу, не выдав никаких сообщений.




Сортировка списков
  Компьютер найдет информацию в списке независимо от того, в каком по­
рядке она хранится. Но, несомненно, поиск в длинных списках выполняется
эффективнее, когда они отсортированы. Тем не менее основная причина сорти­
ровки списка состоит в том, чтобы облегчить пользователю просмотр инфор­
мации, содержащейся в списке. Люди лучше воспринимают отсортированную
информацию. Ниже показано, как выполнить сортировку простого списка.

 1.   Введите следующий код в блокноте.

      Colors = ["Красный", "Оранжевый",                     "Желтый",       "Зеленый",       "Синий"]
      for Item in Colors:
         print(Item, end=" ")
      print ()
      Colors. sort ()
      for Item in Colors:
         print ( Item, end=" ")
      print ()

      Пример начинается с создания массива                        Colors.      В данный момент цвета не
      отсортированы. Далее названия цветов выводятся в порядке их появления.
      Обратите внимание на использование аргумента                             end=""      функции    print (),
      благодаря чему все названия цветов выводятся в одну строку (это делает
      сравнение более наглядным).



282    ЧАСТЬ 3        Профессиональные методики программирования на Python
                 Сортировка списка выполняется простым вызовом функции                           sort ().По­
                 сле этого содержимое списка снова выводится на экран, но уже в отсор­

                 тированном порядке.

ЗАПОМНИ!


           2.    Щелкните на кнопке              Run Cell   (Выполнить ячейку).

                 Программа выведет неотсортированный и отсортированный списки, как
                 показано на рис.       13.17.


                     Сортировка списков

    In [1] : Colors         •   ['' Красный" ,   ''Оранжевый" ,   "Желтый" ,   "Зеленый" ,   "Синий'' ]
                     ~or Item in Colors:
                        print (Item, end=" ")
                     print ()
                     Colors. sort ф
                     ~or Item in Colors:
                        print (Item, end=" ")
                     print ()

                     Красный Оранжевый Желтый Зеленый Синий
                     Желтый Зеленый Красный Оранжевый Синий


 Рис.      73. 77.   Сортировка списка заключается в простом вызове функции                         sort ()

                 Иногда нужно отсортировать элементы списка в обратном порядке. Для
                 этого используется функция              reverse     ().Она должна вызываться в от­
                 дельной строке. Предыдущий пример, выполняющий сортировку цветов
  coвi:r         в обратном порядке, будет выглядеть следующим образом.

                 Colors = ["Красный", "Оранжевый",                  "Желтый",     "Зеленый",      "Синий"]
                 for Item in Colors:
                    print(Item, end=" ")
                 print ()
                 Colors.sort()
                 Colors.reverse()
                 for Item in Colors:
                    print(Item, end=" ")
                 print ()



Вывод списков
   В    Python        доступно множество способов вывода информации. В этой гла­
ве было г~родемонстрировано лишь несколько простейших способов вывода
списков. В реальных приложениях процедуры вывода будут намного сложнее,
поэтому вам нужно освоить ряд дополнительных методик.




                                                         ГЛАВА 13      Управление списками                283
 1.    Введите следующий код в блокноте.

       Colors = ["Красный", "Оранжевый",              "Желтый",       "Зеленый",      "Синий"]
       print(*Colors, sep='\n')
        Мы начинаем с создания того же списка цветов, что и в предыдущем разде­
       ле. Там для вывода содержимого списка применялся цикл                         for.    Здесь же мы
        воспользуемся специальным оператором-звездочкой(*), который называет­
       ся оператором позиционного расширения. Он выполняет распаковку списка и
        поочередно передает каждый элемент функции                   print ().Аргумент sep опре­
       деляет способ разделения выводимых элементов. В данном случае каждый
       элемент записывается с новой строки.

 2.     Щелкните на кнопке           Run Cell   (Выполнить ячейку).
        Программа выводит список строка за строкой, как показано на рис.                         13.18.



      In [2]:      Colors = ["Красный" , '1 Оранжевый:" ,   "Желтый:' 1 ,   "Зелен:ый" ,    "Синий" ]
                   print {*Color s, sep='\n' )

                   Красный
                   ОраНJJtеВЫЙ
                   Желтый
                   Зеленый
                   синий


 Рис.    73. 78.   Оператор *позволяет существенно сократить и упростить код

 3.     Введите следующий код в блокноте и щелкните на кнопке                              Run Cell.
        for Item in Colors: print(Item.rjust(8), sep='/n')
        Программа не обязана располагаться на нескольких строках. В этом примере
       две строки кода соединены в одну строку. Здесь также демонстрируется ис­
        пользование метода      rj ust (), который задает выравнивание строки вправо,
        как показано на рис.    13.19. Многочисленные методы работы со строками опи­
        саны по      адресу https: / /docs. python. org/2/ library/string. html.



          In (3):       for Ite.m inColors: print {Item.rjust{ B), sep='/n')

                           Красный
                        Оранжевый
                            Желтый
                           Зеленый
                             СИНИЙ


         Рис.      73. 79. С помощью строковых функций можно форматировать
                                     результат нужным образом




284      ЧАСТЬ З           Профессиональные методики программирования на Pythoп
 4.    Введите следующий код в блокноте и щелкните на кнопке Run Cell.

       print ( ' \n '. join (Co lors ))

       В Python предусмотрено несколько способов решения любой задачи. В дан­
       ном случае используется функция j               oin () для объединения символа новой
       строки с каждым элементом списка                Colors. Результаты будут такими же, как
       на рис.    1З.18, хотя достигается это по-другому. Вы всегда можете выбрать тот
       подход, который для вас удобнее .

 5.    Введите следующий код в блокноте и щелкните на кнопке Run Cell.

       print ( 'First: {0}\nSecond: {1}'.format(*Colors))

       Здесь создается спецификация формата, содержащая поясняющий текст, при­
       чем в выводимые результаты включаются не все элементы списка                       Colors.
       Записи      { О)    и   {1 )   соответствуют первому и второму элементам входных
       данных (они извлекаются при раскрытии списка с помощью оператора       *).
       На рис.    13.20 показан полученный результат. Дополнительные сведения по
       этой теме можно найти по адресу               https: / / docs. python. org/3/tutorial/
       inputoutput. html.

            In [5]:       рrint ( 'Первый:      {0}\nВторой:   {1}' .format( • Colors))

                      Первый:         Красный
                          Второй:     Оранжевый


        Рис. 13.20. Используйте функцию forma t (),когда выводимые данные
                    нужно определенным образом форматировать


              В этом разделе были рассмотрены лишь некоторые из применяемых
              в   Python       способов форматирования вывода. На самом деле их го­
              раздо больше. Многие из них будут продемонстрированы в следую­
 ЗАПОМНИ!
              щих главах. Выбирайте для себя тот подход, который вам понятнее
              и удобнее.




Работа с объектом                               Counter
   Предположим, имеется источник данных и нужно узнать, как часто про­
исходят определенные события (например, сколько раз тот или иной элемент
появляется в списке). Если список короткий, то подсчет можно провести са­
мостоятельно. Но если у вас по-настоящему длинный список, сами вы точно
не справитесь. Представьте, что вас ждет, если, к примеру, нужно подсчитать
частоту слов в романе "Война и мир", текст которого хранится в источнике
данных. Решить такую задачу невозможно без помощи компьютера.


                                                     ГЛАВА 1З     Управление списками        285
               Объект    Counter   позволяет быстро сосчитать элементы списка. Кро­
               ме того, он невероятно прост в использовании. В этой главе будет
               показано, как применять его для работы со списками. Ниже создает­
ЗАЛОМ НИ!
               ся список с повторяющимися элементами, а затем подсчитывается,

               сколько раз эти элементы встречаются в списке.



        1.     Введите следующий код в блокноте.

               from collections import Counter
               MyList = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1, 5]
               ListCount = Counter(MyList)
               print(ListCount)
               for Thisltem in ListCount. i tems () :
                  рrint("Элемент: ", Thisitem[OJ,
                         " Появляется: ", Thisitem [ 1] )
               рr~nt("Значение 1 появляется {0) раз."
                      .format(ListCount.get(l)))
               Для использования объекта      Counter его нужно импортировать из пакета
               collections.      Если в приложении используются и другие типы коллек­
               ций, необходимо импортировать весь пакет с помощью команды               import
               collections.
               Пример начинается с создания списка         MyList,   содержащего повторяю­
               щиеся числа. Несложно заметить, что некоторые элементы появляются
               более одного раза. Далее на основе спискаMyList создается новый объ­
               ект   ListCount типа Counter. Объекты Counter можно создавать по-раз­
               ному, но этот способ наиболее удобный при работе со списком.

               Объект   Counter и   список сами по себе никак не связаны. При изменении
               содержимого списка придется заново создать объект          Counter,    посколь­
               ку он не увидит изменений. Альтернативный вариант             -    вызвать сна­
ЗАПОМНИ !      чала метод    clear (),чтобы   очистить объект  Counter, а затем -         метод
               update ()   для заполнения объекта     Counter новыми данными.
               Приложение выводит содержимое переменной              ListCount   несколькими
               способами. Сначала выводится объект         Counter   в чистом виде, без како­
               го-либо форматирования. Далее перечисляются уникальные элементы
               списка   MyList    с указанием количества появлений каждого элемента.
               Чтобы получить эти данные, следует использовать метод             i tems ( )   объ­
               екта   Counter.   В конце демонстрируется, как получить индивидуальный
               результат подсчета с помощью метода         get ().
        2.     Щелкните на кнопке Run Cell (Выполнить ячейку).
               Программа выведет результаты, полученные с помощью объекта
               Counter,    как показано на рис.   13.21.




286         ЧАСТЬ 3     Профессиональные методики программирования на Python
                     Работа с объектом                            Counter
           In [6]:   from collect i ons import Counter
                     MyList = (1 , 2 , 3, 4 , 1 , 2 , 3, 1 , 2, 1 , 5]
                     Listcount = Counter(MyList)
                     print (Listcount)
                     for This i tem in Listcount . items() :
                        рrint (" Элемент: " , Thi s i tem [O],
                                " Появляется: " , This i tem [l ] )
                     рrint (" Значение 1 появляется {0} раз. "
                            . format(Listcount . get( l )))

                     Counter ( {1 : 4 , 2: 3 , 3 : 2 , 4: 1 , 5: 1})
                     Элемент :        1    Появляется :      4
                     элемент :        2    Появляется:       3
                     Элемент:         3    Появляется:       2
                     Элемент:         4    Появляется:       1
                     Элемент :        5    Появляется:       1
                     значение     1       появляется   4   раэ.



         Рис.   13.21. С помощью объекта Coun ter можно получить статис­
                                 тику для длинных списков


     Вы, должно быть, заметили, что информация фактически хранится в объек­
те   Counter в виде пары "ключ -               значение". Эта тема будет подробно рас­
смотрена в главе     14.   Пока что вам достаточно знать, что элемент, найденный
в списке   MyList, становится в списке Listcount ключом, который идентифи­
цирует уникальное имя элемента. Значение показывает, сколько раз этот эле­
мент появляется в списке         MyList.




                                                  ГЛАВА 13        Управление списками   287
Глава            14

Коллекции даннь1х

 В ЭТОЙ ГЛАВЕ ...

 ))   Понятие о коллекции

 ))   Использование кортежей и словарей

 ))   Создание стеков с помощью списков

 )> Использование очередей и деков




            юди коллекционируют все что угодно. Компакт-диски, декоративные
л       тарелки, бейсбольные карточки      -   все это примеры коллекций. Коллек­
            ции, с которыми сталкивается разработчик при написании приложения,
представляют собой то же самое. Коллекция           -    это набор схожих элементов,
собранных в одном месте и организованных в простом и понятном порядке.

               В этой главе рассматриваются самые разные коллекции. Основная
               цель сбора любой коллекции      -   создание такой среды, в которой
               благодаря правильной организации можно было бы быстро найти
 ЗАПОМНИ!
               необходимый элемент в любое время. Книжные полки наиболее
               оптимальны для хранения книг,       DVD   и других плоских предметов.
               Коллекции ручек лучше хранить в пеналах или футлярах. Места
               хранения не влияют на саму суть домашних коллекций. То же самое
               можно сказать и о компьютерных коллекциях. Безусловно, между
               стеком и очередью имеются различия, но основная идея сводится

               к правильной организации данных, чтобы их можно было быстро
               находить. Исходный код примеров этой главы находится в файле
               BPPD_ 14_Collecting_All _ Sorts _ of _Data. ipynb   (см . введение).
Понятие коллекции

   В главе      13   вы познакомились с последовательностями. Последовате.'tь­
ность   -     это ряд значений, хранящихся в одном в контейнере. Самой простой
последовательностью является строка, представляющая собой цепочку симво­
лов. Списки, рассмотренные в главе                13, -   это наборы объектов. И то и то    -
последовательности, но между строками и списками имеются существенные

различия. Например, при работе со строками все символы можно перевести
в нижний регистр, чего нельзя сделать при использовании списков. С другой
стороны, списки позволяют добавлять новые элементы, а в строках эта воз­
можность не поддерживается (в результате конкатенации фактически создается
новая строка). Коллекция           -   это еще один вид последовательности, хотя и бо­
лее сложный, чем строка или список.

              Любая последовательность поддерживает две функции:                 index ()       и
              count ().      Функция   index ()    всегда возвращает позицию указанного
              элемента в последовательности. Например, можно определить поло­
 ЗАПОМНИ!
              жение символа в строке или элемента в списке. Функция             count ()   со­
              общает, сколько раз указанный элемент появляется в списке. Опять
              же, тип элемента зависит от вида последовательности.



   В Pythoп с помощью коллекций можно создавать структуры наподобие баз
данных. Каждый тип коллекции имеет определенное назначение, причем его
можно использовать разными способами. Важно запомнить, что коллекция                        -
один из видов последовательности. Как и любая другая разновидность после­
довательности, коллекции всегда поддерживают функции                    index () и count ()
как часть своей базовой функциональности.
   В   Python   имеется базовый набор коллекций, с помощью которых можно соз­
давать любые приложения. В этой главе рассматриваются наиболее популяр­
ные коллекции.


                ))       Кортеж. Это коллекция, используемая для создания сложных по­
                         следовательностей наподобие списков. Преимуществом кортежей
                         является возможность вложения содержимого кортежа. Эта осо­
                         бенность позволяет создавать структуры, содержащие, к примеру,
                         записи о сотрудниках или координатные пары х-у.


                ))       Словарь. Как и в настоящих словарях, содержит пары "ключ/зна­
                         чение" (их можно рассматривать как слово и его определение).
                         Словарь позволяет значительно сократить время поиска данных
                         и упростить их организацию.




290         ЧАСТЬ    3    Профессиональные методики программирования на              Python
          »     Стек. Во многих языках программирования предлагается непосред­
                ственная поддержка стеков.       Python не поддерживает стеки, хотя и
                предлагает частичное решение. Стек         - это последовательность
                типа   LIFO (Last ln/First Out - "последним пришел - первым ушел").
                В качестве иллюстрации представьте себе стопку блинчиков. Каж­
                дый новый блинчик, который кладут сверху, тут же съедают. Стек   -
                это важный тип коллекции, который в      Python можно смоделировать
                с помощью списка (именно эта методика демонстрируется в данной
                главе).

          »     Очередь. Это коллекция типа     FIFO (First 1n/First Out -   "первым при­
                шел    -   первым ушел"), с помощью которой можно отслеживать эле­
                менты, требующие той или иной обработки. Представьте себе оче­
                редь в супермаркете. Вы подходите к кассе, становитесь в очередь
                и, наконец, оформляете покупку.

           ))   Двухсторонняя очередь (дек). Это структура наподобие очереди,
                позволяющая добавлять или удалять элементы с обоих концов оче­
                реди, но не из середины. Дек можно использовать как очередь, стек
                или любой другой вид коллекции, допускающий добавление или
                удаление элементов в определенном порядке (в отличие от спис­
                ков, кортежей и словарей, реализующих произвольный доступ).




Работа с кортежами
  Как уже говорилось, кортеж         -   это коллекция, используемая для создания
сложных списков, в которых один кортеж может вкладываться в другой. Та­
кое вложение позволяет формировать иерархии наподобие листинга каталогов
жесткого диска или организационной структуры компании.

          Кортежи не поддаются изменению. Можно создать новый кортеж с
          таким же именем и измененной структурой, но нельзя изменить уже
          имеющийся кортеж. Списки же поддаются изменению. На первый
  СОВЕТ
          взгляд может показаться, что именно в этом проявляется недостаток

          кортежа. Тем не менее в неизменности имеются и свои преимущес­
          тва, а именно: более высокая степень безопасности и быстродей­
          ствия. Более того, неизменяемые объекты проще в использовании
          в случае параллельной обработки, осуществляемой несколькими
          процессорами.



  Основные различия между кортежем и списком заключаются в том, что кор­
теж неизменяем и позволяет вкладывать одни кортежи в другие. В следующей
пошаговой инструкции демонстрируется работа с кортежами в                Python.

                                              ГЛАВА 14     Коллекции данных          291
              1.       Откройте новый блокнот.
                       Можете также использовать файл исходного кода                                            BPPD_14_Collecting
                       All _ Sorts _ of_ Data. ipynb                      (см. введение).

              2.       Введите МyTuple                        = ( 'Красный' ,             'Синий' , 'Эепеный' ) •
                       Python создаст кортеж, состоящий из трех строк.
              3.       Введите МyTuple и щелкните на кнопке Run Cell (Выполнить ячейку).
                       Отобразится содержимое кортежа                                      MyTuple,         состоящего из трех строк
                       (рис.          14.1 ).   Учтите, что строки будут заключены в одинарные кавычки,
                       даже если при создании кортежа использовались двойные кавычки.
                       Кроме того, в кортеже, в отличие от списка, применяются круглые скобки
                       вместо квадратных.




                                                Работа с кортежами

                            In [ 7] :           MyTuple =        ( 'Красный'         ,    'Синий•   ,       'Зеленый'   )
                                                MyTuple

                            out. [ 7 J :        ('   Красный '   ,   ' Синий '   ,       ' Зеленый '    )

        Рис.        14.1. В кортежах используются круглые скобки вместо квадратных

              4.       Введите print (dir (МyTuple)) и щелкните на кнопке Run Cell.

                       Python выведет список функций, поддерживаемых кортежами (рис. 14.2).
                       Это напоминает перечень функций списков, который был рассмотрен
                       в главе            13. Здесь также            имеются функции             count ()        и   index ().

 rг.   tв;:   "".t 11:t ( 1i~   (My'ruplel 1

              l ' _add_', '_c:la!!l!I_', '_contiJins_', '_delattr_', '_dir_ ', '_doc_ ', · -~ · . ' _form.at_' , '_Qe_', ' _qe
              tAttribute_ ', ' _;etitem_ ' , '_;e tnl!!war;s_ ' , '_;t_', ' _ha"h_ ' , '_init_', '_init_subcJa ss_', ' _iter_', '-
              _le_ ' , ' _len_ ', '_lt_ ' , ' _mul_', '_ne_', ' _nt! w_ ' . ' _reduc:e_•. ' _ redu~ _ex_ ' , ' _repr_ ' , '_rnwl_ ', '
              _!letattr_ ', ' _11izeof_ ', ' _str_', '_.suЬc la!!lshook_ ', ' count ', ' 1ndex ']



               Рис.         14.2.      В кортежах используется меньше функций, чем в списках


                       Результат, выводимый при использовании функции                print () вместе с
                       функцией            dir (),отличается от результата, выдаваемого самой функ­
                       цией           dir () (см. рис. 13.4). Это больше напоминает результаты, получа-
 совЕТ                 емые в других                   IDE,   например      IDLE.         Многие пользователи предпочитают
                       применяемый в Notebook способ, когда названия выводятся построчно,
                       поскольку их легче читать. В то же время комбинированный вывод опре­
                       деленно получается намного более компактным.

              5.       Введите МyTuple                        =МyTuple. _add_ ( ( 'Пурпурный ' , ) ) •
                       Этот код добавляет новый кортеж в                                  MyTuple           и помещает результат в но­
                       вый экземпляр                   MyTuple.        После выполнения инструкции старый экзем­
                       пляр           MyTuple удаляется.

292           ЧАСТЬ               3     Профессиональные методики программирования на                                            Python
                  Функция               add      ( ) в качестве входных данных поддерживает только
                  кортежи. Это означает, что добавляемый элемент следует заключить
                  в круглые скобки. Более того, при создании кортежа с одной записью
ЗАnомни1          после нее следует ставить запятую, как показано в примере. Не забывай­
                  те об этом, иначе получите следующее сообщение об ошибке:

                  TypeError:             сап   only concatenate tuple (not "str") to tuple
         6.       ВведитеМуТuрlе и щеnкните на кнопке Run Cell.
                  В конце кортежа появится новый элемент, расположенный на том же
                  уровне, что и другие элементы (рис.                      14.3).


           In [ 9 ] :           MyТuple    = MyTuple .            add    ( ( 'Пурпурный' , ) )
                                MyTuple

           Ou t   (   Ci J :    ( ' Красный' ,    ' синий '   ,    'Зеленый   ',    'Пурпурный'   )

                               Рис.   14.3. В новом экземпляре MyTuple содержится
                                               дополнительный элемент

         7.       Введите МyTuple                =МyTuple . _add_ ( ( 'Жел'l'ЬIЙ ' ,                  ( 'Оранжевый ' ,
                  'Черный             ')) )•
                  На этом шаге добавляются три элемента: Желтый, Оранжевый и Черный.
                  Однако элементы Оранжевый и Черный становятся вложенным кортежем,
                  образуя иерархию. Они рассматриваются как единый элемент внутри
                  главного кортежа.

                  Функцию_add_                   ()   можно заменить оператором конкатенации. Напри­
                  мер, если нужно добавить элемент Фуксия в начало кортежа, введите
                  МyTuple             = ( "ФухСИJ1 11 ,) + МyTuple.
 СОВЕТ


         8.       ВведитеМуТuрlе[4] и щеnкните на кнопке Run Cell.
                  Python отобразит соответствующий элемент кортежа MyTuple: Желтый.
                  Кортежи, как и списки, используют индексы для получения доступа к от­
                  дельным элементам. При необходимости можно указать диапазон. Все
                  операции, выполняемые с индексом списка, можно выполнять и с индек­

                  сом кортежа.

         9.       Введите МyTuple [ 5] •
                  Отобразится кортеж, содержащий элементы Оранжевый и Черный.

                  Кортежи часто имеют иерархическую структуру. Чтобы выяснить, нахо­
                  дится ли по указанному индексу другой кортеж, нужно выполнить про­
                  верку типа. В данном примере для проверки шестого элемента (с индек-
 совет            сом          5) нужно ввести type (MyTuple [5])                    == tuple. В результате полу­
                  чим значение          True.



                                                                        ГЛАВА 14      Коллекции данных            293
  1 О.      ВведитеМуТuрlе [5] [О].
            На этом этапе отобразится результат Оранжевьм. Индексы всегда указы­
            ваются в порядке своего уровня в иерархии.




                              In [13]:          MyTuple[ S ] [0)

                              Jlt   [1 -1   :   'Оранжевый'



                             Рис. 14.4. Использование индексов
                           для получения доступа к отдельным
                                     элементам кортежа




            С помощью индексов и функции_ add_ () (или оператора конкате­
            нации +) можно создавать гибкие приложения, использующие кор­
            тежи. Например, можно удалить элемент из кортежа, приравняв по­
  СОВЕТ
            следний к диапазону значений. Чтобы удалить кортеж, содержащий
            элементы Оранжевьм и Черньм, введите МуТuрlе                    =МуТuрlе [О : 5] .

Работа со словарями
  Словарь в       Python   организован так же, как и реальные словари, и содержит
пары "ключ    -    значение" (слово и его определение в словаре). Как и списки,
словари можно изменять. Основная идея словаря заключается в ускорении
процесса поиска данных. Благодаря коротким и уникальным ключам компью­
тер быстро находит необходимую информацию.
  В следующих разделах рассматриваются вопросы создания и использования
словарей. Зная, как работать со словарями, можно применять эти знания для
исправления недоработок в языке                 Python.   Большинство языков программиро­
вания включает инструкцию            swi tch,      позволяющую создавать меню из различ­
ных вариантов, среди которых выбирается один. В                    Python   такой инструкции
нет, поэтому для решения соответствующих задач обычно приходится исполь­
зовать инструкцию i f ... elif, которую нельзя считать самым эффективным
решением.



Создание и использование словаря
  Работа со словарем во многом напоминает работу со списком, с той лишь
разницей, что для словаря задается пара, состоящая из ключа и значения. При
создании ключей необходимо соблюдать определенные правила.




294       ЧАСТЬ   3 Профессиональные методики программирования на Python
                  ))   Ключ должен быть уникальным. При вводе дублирующегося клю­
                       ча новая запись получает преимущество над старой, которая просто
                       затирается.

                  ))   Ключ должен быть неизменяемым. Это означает, что в каче­
                       стве ключа можно использовать строки, числа или кортежи, но

                       не списки.



  Ограничения на используемые значения отсутствуют. Значением может
быть любой объект               Python,         благодаря чему с помощью словаря можно полу­
чить доступ к учетной карточке сотрудника или другим сложным данным.
В следующей пошаговой инструкции демонстрируется использование словаря.

 ·1 •    Введите Colors           = {"Сэм":           "Синий", "Эмма": "КрасиъlЙ", "Сара": "Жеп­
        'l'ЫЙ" }.

        Python создаст словарь, содержащий три записи, соответствующие любимым
        цветам трех людей. Обратите внимание на то, как создается пара "ключ - зна­
        чение': Сначала указывается ключ, потом двоеточие и за ним - значение. За­
         писи разделяются запятыми.

 2.      ВведитеСоlоrs и щелкните на кнопке                               Run Cell.
        Отобразится содержимое словаря (рис. 14.5). Во многих случаях записи будут
        отсортированы по ключам. Словарь по возможности автоматически сортиру­
        ет ключи для ускорения доступа, благодаря чему сокращается время поиска
        даже при работе с большими объемами данных. Недостаток словаря заклю­
         чается в том, что его создание отнимает больше времени, чем использование
        того же списка, поскольку компьютер тратит время на сортировку записей.



                  Создание и использование словаря

  In [14):        Colors •       {" Сэ м 11 :   " Синий " ,    ' 'Э~ ":   " Красный. " ,    " Са['а ":    " Желт1.М 11 }
                  Colorsl

      t•t(   4.    { ' Сэм ':   ' Синий ',      ' Эмма ':     ' Красный ',   ' Сара ' :    ' Желтый ' }


                                  Рис.    14.5. Вывод содержимого словаря

 3.      Введите Colors ["Сара"] и щелкните на кнопке Run Cell.
         Отобразится цвет, который нравится Саре. В данном случае это Желтый
         (рис. 14.6). Использование строки в качестве ключа вместо числового индекса
        упрощает чтение кода, который в определенной степени становится самодо­
         кументируемым. Это экономит разработчикам немало времени, что объяс­
         няет высокую популярность словарей. Тем не менее удобство достигается за
         счет дополнительных трат времени и ресурсов, так что нужно взвешивать все

         плюсы и минусы.




                                                                    ГЛАВА 14         Коллекции данных                      295
                                 In [9]:     Colors [ "Capa"J I

                              ou t [ 9 J :   ' желтый '

                        Рис. 14.6. Словари упрощают доступ к значе­
                         ниям и делают их самодокументируемыми

       4.     Введите Colors. keys () и щеnкните на кнопке                 Run Cell.
              Отобразится перечень ключей словаря (рис. 14.7). Эти ключи можно ис­
              пользовать для автоматизации доступа к словарю.




                     In [16]:      Colors . keys ()

                     Онt[lб] :    dict_keys(['Cэм ',       'Эмма',   'Сара'])


                     Рис.   14.7. Можно запросить список ключей словаря

       5,     Введите сnедующий код в бnокноте, посnе чего щеnкните на кнопке
              Run Cell.
              for Item in Colors. keys () :
                 print("IOI любит цвет {11."
                     .format(Item, Colors[Item)))
              Программа выведет список имен пользователей вместе с их любимыми
              цветами (рис.      14.8). Благодаря словарям получение такого рода результа­
              тов существенно упрощается. Использование понятного ключа означает,
ЗАПОМНИ!      что сам ключ легко может стать частью результата.




                      In [15] :     for Item in Colors. keys () :
                                       print ( "{O} любит цвет {1}."
                                           . format (Item, Colors [Item]))

                                    Сэм любит цвет Синий.
                                    Эмма любит цвет Красный.
                                    Сара любит цвет Желтый.


              Рис.   14.8. Благодаря ключам        нужная информация выводится
                                             намного быстрее

 6.   Введите Colors ["Сара"]= "Пурпурный".
      Содержимое словаря обновится, и теперь Саре нравится не желтый, а пурпур­
      ный цвет.

 7.   Введите        Colors. update ( {"Гарри": "ОраЮ1Севый"}).
      В результате в словарь добавится новая запись.




296        ЧАСТЬ З     Профессиональные методики программирования на Python
    8.   Введите   del Colors ["Сэм"].
         Программа удалит из словаря запись Сэма.

    9.   Введите следующий код в блокноте.
         for name, color in Colors.items():
            print("{O) любит цвет {1)."
                .format(name, color))
         Сравните этот код с кодом, рассмотренным в п.           5. В этой версии каждый эле­
         мент обрабатывается последовательно: ключ присваивается переменной
         name, а значение -       переменной    color.   Результат будет тем же. Во многих
         случаях такой вариант проще читать. С точки зрения быстродействия оба ва­
         рианта одинаковы.

1 О.     Щелкните на кнопке Run Cell.
         Обновленный результат представлен на рис.          14.9. Запись для Гарри добавлена
         в конец словаря. Кроме того, для Сары любимый цвет стал пурпурным.


                   In (13] :      del Colors[" Cэм " ]
                                  for name, color in Colors.items():
                                      print (" {O} любит цвет {l}."
                                             .format(name, color))

                                  Эмма любит цвет   Красный.
                                  Сара любит   цвет Пурпурный.
                                  Гарри любит цвет Оранжевый.


                           Рис.   14.9. Словари нетрудно изменить

11.      Введите   len (Colors)      и щелкните на кнопке Run Cell.
         Выводимое значение        3 подтвердит, что теперь словарь содержит три записи
         вместо четырех.

1 2.     Введите Colors. clear ().
1 3.     Введите len (Colors) и щелкните на кнопке Run Cell.
         Программа сообщит, что       Colors содержит О записей,      поэтому словарь пуст.



Замена инструкции                 swi tch словарем
     В большинстве языков программирования имеется инструкция                       swi tch,
которая позволяет создавать меню выбора. Из нескольких предоставляемых
вариантов пользователю разрешается выбрать лишь один. На основе выбора
пользователя программа выполняет определенные действия. Ниже приведен
пример такой инструкции (не пытайтесь его выполнить).

switch (n)
1

                                                    ГЛАВА   14    Коллекции данных       297
   case   О:
      print("Bы выбрали      синий.");
      break;
   case 1:
      print("Bы выбрали желтый.");
      break;
   case 2:
      print("Bы выбрали      зеленый.");
      break;


  Приложение предлагает пользователю сделать выбор, получает от него
номер варианта, после чего активирует соответствующую ветвь инструкции

switch. Это проще и понятнее, чем использовать набор инструкций i f для тех
же целей.
  К сожалению, в     Python нет инструкции swi tch. Ее можно заменить ин­
струкцией i f ... elif, но есть и другой вариант: смоделировать применение
инструкции swi tch с помощью словаря. Ниже показано, как это сделать.

 1.   Введите следующий код в блокноте.

      def PrintBlue ( 1 :
          print("Bы выбрали       синий!\r\n")
      def PrintRed():
         print ("Вы выбрали       красный!   \r\n")
      def PrintOrange():
          priпt ("Вы выбрали      оранжевый 1 \r\п")
      def PrintYellow(}:
          print("Bы выбрали желтый!\r\n")

      Каждая из этих функций реализует соответствующую ветвь выбора цвета. Вы­
      звать можно будет только одну функцию.

 2.   Введите следующий код в блокноте.

      ColorSelect = (
         О: PrintBlue,
         1: PrintRed,
         2: PrintOrange,
         3: PrintYellow


      Здесь мы создаем словарь. Каждый ключ представляет собой ветвь                case   ин­
      струкции   swi tch.   Значение определяет необходимое действие. Иными сло­
      вами, это структура типа     swi tch.   Созданные ранее функции      -   это блоки кода
      в соответствующих ветвях инструкции             swi tch,   т.е. код, находящийся между
      инструкциями    case   и   break.




298    ЧАСТЬ 3    Профессиональные методики программирования на Python
    3.   Введите сnедующий код в бnокноте.

         Selection = О
         while (Selection != 4):
            print("O. Синий")
            print ( "1. Красный")
            print ( "2. Оранжевый")
             print("З.      Желтый")
             print("4. Выход")
             Selection = int(input("Bыбepитe цвет: "))
             if (Selection >= 0) and (Selection < 4):
                ColorSelect [Selection] ()

         По сути, это та часть программы, которая реализует пользовательский интер­
         фейс. Вначале мы создаем переменную         Selection, хранящую результат вы­
         бора. Затем цикл выполняется до тех пор, пока пользователь не введет зна­
         чение    4.
         На каждой итерации цикла программа отображает список вариантов и ожида­
         ет ввода пользовательских данных. Когда данные получены, приложение вы­
         полняет проверку диапазона. Выбор любого значения между О и 3 приводит
         к выполнению одной из функций словаря.

    4.   Щеnкните на кнопке Run Cell.
         Программа отобразит меню (рис.   14.1 О).
    5.   Введите О и нажмите кnавиwу <Enter>.

         Программа сообщит о выборе синего цвета и еще раз отобразит меню
         (рис.   14.11 ).
    6.   Введите 4 и нажмите кnавиwу <Enter>.
         Программа завершит работу.




Создание стеков с помощью списков
     Стек    -    это удобная программная струкrура, которую можно использовать
для хранения среды выполнения приложения (состояния переменных и других
атрибутов программного окружения в любой момент времени). К сожалению,
в   Python   стек не может быть коллекцией. Тем не менее стек можно смодели­
ровать с помощью списка. Ниже показан пример использования списка в каче­
стве стека.




                                               ГЛАВА     14   Коллекции данных    299
                 Замена инструкции                      switch         словарем

   In [*]: def PrintBlue():
                        print (" ВЫ выбрали синий!\r\n" )
                 def PrintRed():
                        print ( "Bы выбрали красный!\r\n" )
                 def Printorange() :
                        print (" Bы выбрали оранжевый!\r\n" )
                 def PrintYellow():
                        print ( "ВЫ        выбрали желтый!   \r\n" )

                 ColorSelect = j
                    О : PrintBlue,
                    1 : PrintRed,
                    2 : Printorange,
                    3 : PrintYellow


                 Selection =           О
                 while (Selection != 4):
                        print ("O. Синий" )
                        print ("l. Красный" )
                        print ( "2. Оранжевый" )
                        print ( " 3. Желтый ")
                        print ( "4. Выход" )
                        Selection = int ( input ( "Быбepитe цвет: "))
                        ~f (Selection >= 0) and (Selection < 4):
                           ColorSelect[Selection] ()

                 о .   Синий
                 1.     Красный
                 2.    Оранжевый
                 3.    Желтый
                 4.     Выход


                 Выберите         цвет:



               Рис.    14.1 О.   Приложение начинает работу с отображения меню

         о .   Синий
         1.    Красный
         2.    Оранжевый
         3.    желтый
         4.    выход

         ВЫберите        цвет:     о
         Вы выбрали         синий!


         о.    СИНИЙ
         1.    Красный
         2.    Оранжевый
         3.    Желтый
         4.    Выход


         Выберите        цвет:




Рис.   14.11.   Если пользователь выбрал цвет, приложение снова отображает меню
       1.   Введите следующий код в блокноте.
            MyStack = [)
            StackSize = 3
            def DisplayStack():
               print("B настоящее время стек                 содержит:")
               for Item in MyStack:
                  print (Item)
            def Push (Value):
               if len(MyStack) < StackSize:
                  MyStack.append(Value)
               else:
                     print("Cтeк nолон 1 ")
            def    Рор () :
                  if len(MyStack) >     О:
                      MyStack. рор ()
                  else:
                         print("Cтeк пуст.")
            Push ( 1)
            Push(2)
            Push ( 3)
            DisplayStack ()
            input ("Нажмите      любую клавишу ...      ")
            Push ( 4)
            Di splayStack ()
            input ("Нажмите      любую клавишу     . .. ")
            Рор ()

            DisplayStack ()
            i npu t ("Нажмите    любую клавишу ...      ")
            Рор ()

            Рор ()

            Рор()

            DisplayStack ()

            В этом примере приложение создает список и переменную для опреде­
            ления максимального размера стека. Как правило, у стека есть ограниче­
            ние по размеру. В данном случае мы имеем дело с маленьким стеком, но
            для демонстрации этого вполне достаточно.

            Принцип работы стека заключается в добавлении новых значений на
            вершину стека и удалении запрашиваемых значений с вершины. Эти две
            задачи решают функции            Push ()   и Рор   ().   В код также включена функция
ЗАПОМНИ!    DisplayStack (),чтобы            можно было быстро просмотреть содержимое
            стека.

            Остальной код тестирует стек (проверяет его функциональность), поме­
            щая в него значения с последующим их удалением.

       2.   Щелкните на кнопке Run Cell (Выполнить ячейку).



                                                       ГЛАВА    14     Коллекции данных      301
                    Приложение заполняет стек данными и затем отображает его содержи­
                    мое (рис.   14.12). В данном случае на    вершине стека находится значение      3,
                    поскольку это последнее добавленное значение.

      Displaystack ()
      input ( "Нажмите          любую клавишу   . . .")
      Push( 4 )
      Displaystack ()
      inрut { "Нажмите любую !Vlавишу .          . . ")
      Рор{)
      Displaystack {)
      input {" Нажмите          любую клавишу ...     ")
      Рор{)
      Рор{)
      Рор      {)
      DisplayStack {)

      В   настоящее       время    стек   содержит:

      1
      2
      3

      нажмите любую клавишу           ...

                         Рис.   14. 12. Стек заносит значения одно за другим

                    В зависимости от используемой            IDE сообщение Нажмите любую кла ­
                    вишу •.. может появиться как в верхней, так и в нижней части области
                    вывода. В   Notebook сообщение и соответствующее поле ввода первона­
=~                  чально появятся вверху, а затем переместятся вниз.

          3.        Нажмите клавишу <Enter>.
                    Приложение попытается занести еще одно значение в стек. Но поскольку
                    стек полон, эту задачу выполнить не удастся (рис.       14.13).

      в   настоящее       время    стек   содержит:

      1
      2
      3
      Нажмите любую клавишу           ...
      стек полон!
      В   на стоящее      время    стек   содержит:

      1
      2
      3

      Нажмите любую клавишу ... 11


          Рис.      14. 13. Заполненный стек больше не может принимать значения

          4.        Нажмите клавишу <Enter>.
                    Приложение удалит значение с вершины стека. Поскольку на вершине
                    стека находилось число       3,   именно оно отсутствует на рис.   14.14.

302       ЧАСТЬ 3         Профессиональные методики программирования на                         Python
      В   настоящее   время   стек   содержит:

      1
      2

      Нажмите   любую клавишу      ...

                       Рис.   14. 14. Удаление значения с вершины стека

 5.       Нажмите клавишу          <Enter>.
          Приложение попытается удалить из стека больше значений, чем в нем содер­
          жится, в результате чего последняя операция не будет выполнена (рис.            14.15).
          В любой модели стека должна предусматриваться возможность обнаруже­
          ния как переполнения стека (слишком много записей), так и его исчерпания
          (слишком мало записей).


                               стек      пуст .

                               В   настоящее      время   стек   содержит:



                         Рис. 14. 15. Убедитесь в том, что реализа­
                         ция стека способна выявить его перепол­
                                           нение и исчерпание




Работа с очередями
  Очередь работает не так, как стек. Представим обычную очередь в мага­
зине: вы становитесь в конец, постепенно продвигаетесь вперед и, когда до­

ходите до кассы, наконец совершаете покупку. Очереди часто используются
для планирования задач и управления выполнением программ. В следующей
инструкции показано, как создать приложение, работающее с очередью.

 1.       Введите следующий код в блокноте.

          import queue
          MyQueue = queue.Queue(3)
          print(MyQueue.empty())
          input 1"Нажмите любую клавишу ... ")
          MyQueue.put(l)
          MyQueue.put(2)
          print(MyQueue.full() 1
          inрut("Нажмите любую клавишу ... ")
          MyQueue.put(3)
          print(MyQueue.full())
          inрut("Нажмите любую клавишу ... ")
          print(MyQueue.get())
          print(MyQueue.empty())


                                                          ГЛАВА   14   Коллекции данных     303
             print(MyQueue.full())
             input ("Нажмите любую         клавишу ...   ")
             print(MyQueue.get())
             print(MyQueue.get())
             Для создания очереди необходимо импортировать пакет                     queue.   В нем
             содержится несколько типов очередей, но в данном примере использу­
             ется лишь стандартная очередь            FIFO.
             Когда очередь пуста, функция            empty ()   возвращает значение     True. Ана­
             логичным образом, когда очередь заполнена, функция                    full () возвра­
             щает значение     True. Указанные две            функции позволяют управлять оче­
             редью. С очередью нельзя работать в цикле                for,   как с другими типами
             коллекций. Вместо этого следует отслеживать ее состояние с помощью
             функций     empty ()   и   full ().
             В   Python имеются две функции, работающие с данными в очереди. Это
             функция     put (),   которая добавляет новые данные, и            get (),   которая их
             удаляет.


             Очереди присущ один серьезный недостаток. При попытке добавить в
             нее большее количество элементов, чем она может вместить, очередь
             просто будет ожидать освобождения места. Как следствие, приложение
ЗАпомни1     может"зависнуть'; если только оно не является многопоточным (т.е. со­
             держит параллельные потоки выполнения).

       2.    Щеnкните на кнопке           Run Cell   (Выпоnнить ячейку).
              Приложение проверит состояние очереди. В данном случае отображает­
             ся результат   True, а это значит,      что очередь пуста.

       3.     Нажмите кnавиwу           <Enter>.
              Приложение добавит в очередь два новых значения, поэтому перестанет
             быть пустой (рис.      14.16).
       4.     Нажмите кnавиwу           <Enter>.
              Приложение добавляет в очередь еще одну, третью запись. Поскольку
             достигнут предельный размер очереди, она становится полной, и резуль­
             татом вызова функции          full ()   будет    True.
       5.     Нажмите кnавиwу <Enter>.

              Чтобы освободить место в очереди, приложение удаляет одну из запи­
             сей, вызывая функцию          get ().   Поскольку первым в очередь было зане­
             сено значение     1,   именно его и вернет функция          get (),   как показано на
              рис.   14.17. Теперь обе функции, empt у () и full (),должны вернуть зна­
              чение   False.
       6.     Нажмите кnавиwу           <Enter>.
              Приложение удалит оставшиеся две записи. В результате отобразятся
              значения    2 и 3 (в том порядке, в котором они заносились в очередь).


304        ЧАСТЬ 3     Профессиональные методики программирования на Python
                Работа с очередями

  In [ *] : i.mport queue
            MyQueue • queue.Queue( З )
            print (MyQueue.empty())
                inрut ( "Нажмите ЛIJбую клавишу ... " )
                MyQueue.put( l )
                MyQueue.put( 2 )
                print (MyQueue.full())
                input ( "Нажмите ЛIJбую к.па вишу ... " )
                MyQueue .put ( 3 )
                print (MyQueue.full())
                input (" Нажмите ЛIJбую клавишу ... " )
                print (MyQueue.get())
                print (MyQueue.empty())
                print (MyQueue.full())
                input (" Нажмите ЛIJбую клавишу ... " )
                print (MyQueue.get())
                print (MyQueue.get())

                тrue
                Нажмите любую =а вишу        ...
                False

                Нажмите любую =а вишу        . ..

         Рис.    74. 76.   После добавления новых записей очередь не будет пустой

     True
     Нажмите любую клавишу            . ..
     1
     False
     False

     нажмите       любую    клавишу   .. .

         Рис.   74. 77.    При работе с очередью важно отслеживать ее состояние




Работа с двухсторонней очередью
  Двухсторот-1яя очередь, или дек,                  -   это очередь, позволяющая добавлять и
удалять элементы с двух сторон. Во многих языках программирования очередь
и стек поддерживают двухстороннюю функциональность, которая ограничива­
ется в приложении в соответствии с его задачами.

  При работе с двухсторонней очередью представляйте ее как горизонталь­
ный ряд. Имеются функции, предназначенные для работы с левым и правым
концами дека, что позволяет добавлять и удалять элементы с обеих сторон.
В следующем примере демонстрируется работа с двухсторонней очередью.




                                                            ГЛАВА   14 Коллекции данных   305
       1.     Введите следующий код в блокноте.

             import collections
             MyDeque = collections.deque("abcdef", 10)
              рrint("Начальное     состояние:")
              for Item in MyDeque:
                 print(Item, end=" ")
             print("\r\n\r\nДoбaвлeниe и расширение вправо")
             MyDeque. append ( "g")
             MyDeque. extend ( "hi")
             for Item in MyDeque:
                print(Item, end=" ")
             print("\r\nMyDeque содержит {О)           элементов."
                    .format(len(MyDeque)) 1
              рrint("\r\nВыталкивание       вправо")
              рrint("Выталкивание     (0)".format(MyDeque.pop()))
              for Item in MyDeque:
                 print(Item, end=" ")
              print("\r\n\r\nДoбaвлeниe и расширение влево")
             MyDeque.appendleft("a")
             MyDeque. extendleft ( "Ьс")
             for Item in MyDeque:
                print(Item, end=" ")
             print("\r\nMyDeque содержит {0)           элементов."
                    .format(len(MyDeque)))
              рrint("\r\nВыталкивание       влево")
              рrint("Выталкивание     {0)".format(MyDeque.popleft()))
              for Item in MyDeque:
                 print(Item, end=" ")
              print("\r\n\r\nYдaлeниe")
              MyDeque.remove("a")
              for Item in MyDeque:
                 print(Item, end=" ")
              Поскольку реализация двухсторонней очереди содержится в пакете
              collections, его     нужно импортировать. При создании дека можно до­
              полнительно задать начальный список итерируемых элементов (эле­
              менты, подвергающиеся циклической обработке) и максимальный раз­
              мер очереди.


             Двухсторонняя очередь различает добавление одного элемента и до­
              бавление группы элементов. В первом случае используются функции
              append ()   и   appendleft   ().Функции    extend ()   и   extendleft ()   позво­
ЗАПОМНИ!     ляют добавлять несколько элементов. Для удаления одного элемента
              используются функции рор       ()   и   popleft   (),которые возвращают уда­
             ляемое значение. Особенность функции               remove ( ) состоит в том, что
              она всегда работает слева и удаляет первый экземпляр запрашивае­
              мых данных.




306        ЧАСТЬ 3   Профессиональные методики программирования на Pythoп
           В отличие от других коллекций, двухсторонняя очередь является полно­
           стью итерируемой. Это означает, что в любой момент можно получить
           содержимое очереди в цикле                    for.
      2.   Щелкните на кнопке        Run Cell (Выполнить ячейку).
           Приложение выведет информацию, представленную на рис.                              14.18.
           Проанализируйте полученные результаты, наблюдая за тем, как меня­
           ется размер очереди. После удаления                            i   в очереди содержится восемь
           элементов. При расширении слева приложение добавляет в очередь еще
вниМАНив   три элемента. Тем не менее она содержит только десять элементов. При
           превышении максимального размера очереди лишние данные просто

           выталкиваются с другой стороны.


                        Начальное        состояние:

                        abcdef

                        Добавление           и       расширение               вправо
                        а Ь с d      е   f g h i
                        MyDeque      содержит                    9    элементов.


                        ВЫталкивание                 вправо

                        выталкивание                 i
                        а Ь с    d   е   f g h

                        Добавление           и расширение                     влево

                        с Ь а    а   Ь с         d       е   f g
                        MyDeque      содержит                    10    элементов.


                        Выталкивание                 влево
                        Выталкивание                 с
                        Ь а    а Ь с     d       е       f   g

                        Удаление

                        Ь а Ь с      d   е       f g

                        Рис.   14.18. Пример использования
                               двухсторонней очереди




                                                                 ГЛАВА 14        Коллекции данных      307
Глава          15

Создание
и использование
классов

 В ЭТОЙ ГЛАВЕ ...

 ))   Определение характеристик класса

 ))   Задание компонентов класса

 ))    Применение класса

 )) Работа с подклассами




в
         предыдущих главах вам уже приходилось работать с классами. Многие
         из примеров книги просты в создании и использовании благодаря тому,
         что основаны на классах   Python.   Впрочем, в предыдущих главах клас­
сы лишь вскользь упоминались, поскольку их обсуждению следует посвятить
целую главу.

      Классы упрощают работу с кодом   Python,   позволяя сделать приложения бо­
лее компактными, наглядными и практичными. Классы служат для создания
программных контейнеров, группирующих код и относящиеся к нему данные.
Для внешнего кода класс является типичным черным ящиком, который полу­
чает данные и выдает данные.



            Рано или поздно вы начнете создавать собственные классы, чтобы
            избежать типичного спагетти-кода, характерного для старых прило­
            жений. Спагетти-код представляет собой хаотичное нагроможде­
 3АПОМНИI
            ние процедурного кода, в котором трудно понять, где заканчивается
              одна задача и начинается следующая. Сопровождать спагетти-код
              практически        невозможно,    и   некоторые организации вынуждены

              были отказаться от такого рода приложений только потому, что ни­
              кто не мог их понять.



   В этой главе вы изучите концепцию классов как программных контейне­
ров, позволяющих избежать спагетти-кода, и создадите свой первый класс.
Вы получите представление о том, как работают классы                  Python       и как сде­
лать ваши приложения более удобными для работы. Исходный код примеров
этой главы находится в файле             BPPD_ 15 _ Creating_and_Using_Classes. ipynb
(см. введение).




Класс как средство упаковки кода
   По сути, класс является контейнером кода. Идея состоит в том, чтобы упро­
стить повторное использование кода, сделать приложения более надежными и
снизить вероятность ошибок. Хорошо спроектированные классы                     -     это чер­
ные ящики, которые получают определенные входные данные и выдают со­

ответствующие выходные данные. Другими словами, класс должен обладать
предсказуемым и согласованным поведением. Не имеет значения, как именно
класс выполняет свою работу. Сокрытие внутренних деталей является хоро­
шей практикой программирования.
   Прежде чем двигаться дальше, следует изучить ряд терминов, характерных
для классов. Их необходимо знать, чтобы понять материал главы. Эти термины
специфичны для            Python.   (В других языках программирования могут исполь­
зоваться иные названия для тех же концепций; иногда те же самые термины
употребляются в другом контексте.)

               >>       Класс. Определяет схему, по которой создаются объекты. Пред­
                        ставьте себе строителя, который хочет построить здание. Строитель
                        использует архитектурный проект, позволяющий гарантировать,
 ЗАПОМНИ!               что здание будет соответствовать требуемым спецификациям. Ана-
                        логичным образом   Python использует классы в качестве чертежей
                        для создания новых объектов.

               >>       Переменная класса. Место хранения, используемое всеми мето­
                        дами экземпляра класса. Переменная класса определяется внутри
                        самого класса, но за пределами любого из его методов. Такие пере­
ВНИМАНИЕ!               менные используются относительно редко, поскольку представля­

                        ют потенциальную угрозу безопасности вследствие того, что каж­
                        дый экземпляр класса имеет доступ к одной и той же информации.




310         ЧАСТЬ   3    Профессиональные методики программирования на                Python
                 Кроме того, они видны как часть определения класса и доступны
                 в обход его методов, что несет дополнительные риски.

                 Использование глобальных переменных всегда считалось плохой
                 практикой программирования, особенно это касается      Python, по­
                 скольку каждый экземпляр может видеть одну и ту же информацию.
                 В отличие от других языков программирования, в    Python не под­
                 держивается сокрытие данных. Каждая такая переменная всегда
                 доступна, что препятствует реализации по-настоящему объектно­
                 ориентированных решений.

            ))   Переменная-член. Переменная класса или переменная экзем­
                 пляра, используемая для хранения данных, связанных с классом и

                 его объектами.

            ))   Перегрузка функции. Создание нескольких версий функции, ка­
                 ждой из которых присуще свое поведение. Основная задача, реша­
                 емая функцией, может оставаться неизменной, но входные данные
                 различаются, а следовательно, потенциально различаются и полу­

                 ченные результаты.

                 Благодаря перегрузке функций обеспечивается гибкость программ­
                 ных решений, когда одна и та же функция работает в приложении
                 по-разному, решая одну и ту же задачу для разных типов входных

                 данных.

            ))   Наследование. Использование родительского класса для созда­
                 ния дочерних классов с одинаковыми характеристиками. Дочерние
                 классы обычно имеют расширенные функциональные возможно­
                 сти либо обеспечивают более специфическое поведение, чем роди­
                 тельский класс.

            ))   Экземпляр. Объект класса, созданный на основе содержащейся
                 в нем спецификации.    Python может создать столько экземпляров
                 класса, сколько запрашивает приложение. Каждый экземпляр уни­
ЗАПОМНИ !        кален.


            ))   Переменная экземпляра. Место хранения, используемое одним
                 методом экземпляра класса. Переменная экземпляра определяется
                 внутри метода. Такие переменные считаются более безопасными,
                 чем переменные класса, потому что только один метод может по­

                 лучить доступ к ним. Метод получает данные через аргументы, что
                 позволяет выполнять проверку входных данных и осуществлять

                 контроль типов.


            ))   Создание экземпляра. Выполнение специальной функции-кон­
                 структора, создающей экземпляр класса. Полученный объект пред­
                 ставляет собой уникальный экземпляр класса, отличающийся от
ЗАПОМНИ!         других экземпляров.




                           ГЛАВА   15   Создание и использование классов       311
           ))   Метод. Функция, являющаяся частью класса. По сути, метод и функ­
                ция    - это одно и то же, но термин "метод" считается более конкрет­
                ным, поскольку методы есть только у классов.

           ))   Объект. Уникальный экземпляр класса. Объект содержит все мето­
                ды и переменные исходного класса, но данные для каждого объекта
                    различаются. Каждый объект хранится отдельно.

           ))       Перегрузка оператора. Создание нескольких версий функции, свя­
                занной с оператором, таким как+,-,/ или*, что приводит к различ­
                    ным вариантам поведения. Назначение оператора может оставать­
                ся тем же, но способ обработки операндов отличается. Благодаря
                    перегрузке операторов обеспечивается гибкость программных ре­
                    шений, когда один и тот же оператор можно применять по отноше­
                    нию к данным разного типа.




Компоненты класса
  Класс имеет четкую структуру. Каждая часть класса служит конкретной
цели, определяя его полезные характеристики. Прежде всего, класс заключа­
ется в контейнер, включающий весь его код. Об этом мы поговорим в следу­
ющем разделе, а затем перейдем к рассмотрению других компонентов класса.


Создание опредеnения класса
  Класс не обязан быть чересчур сложным. Фактически можно создать саму
оболочку контейнера, включить в нее одну переменную и назвать все это клас­
сом. Конечно, полученный таким образом класс будет не слишком полезным,
но все равно вы сможете создать его экземпляр и работать с ним как с любым
другим классом. В следующей пошаговой инструкции демонстрируется созда­
ние простейшего класса.

 1.   Откройте новый блокнот.

      Можете также воспользоваться файлом исходного кода BPPD_ 15 _ Crea ting
      and_Using_Classes. ipynb         (см. введение).

 2.   Введите следующий код в блокноте.

      class MyClass:
         MyVar = О
      В первой строке определяется контейнер класса, который состоит из ключе­
      вого слова     class   и имени класса   MyClass. Каждый   создаваемый класс должен
      начинаться именно так.




312    ЧАСТЬ    3    Профессиональные методики программирования на               Python
     Вторая строка представляет собой содержимое класса. Все элементы, состав­
     ляющие класс, называются его членами. В данном случае вы видите перемен­
     ную класса MyVar, значение которой равно О. Каждый экземпляр класса будет
     включать одну и ту же переменную, имеющую одно и то же начальное значение.

3.   ВведитеМуinstаnсе            =   МyClass    ().
     Вы только что создали экземпляр класса            MyClass с именем Myinstance! Да­
     вайте теперь убедимся в этом.

4.   Введите Мyins tance. MyVar и щелкните на кнопке                 Run Cell (Выполнить
     ячейку).

     Полученный результат О (рис.            15.1) означает, что экземпляр Myinstance дей­
     ствительно содержит переменную класса с именем                MyVar.



                          Компоненты класса

                          Создание определения класса

           In [16):       class MyClass:
                             MyVar   О  =
                          Myinstance = MyClass()
                          1
                          Myinstance.MyVar

           Онt[16]:       О



           In [ 17]:      Myinstance.         class

           Out.[17]:          main    .MyClass

                Рис.   15.1. Созданный экземпляр содержит требуемую
                                            переменную



5.   BвeдитeМyinstance._class_и щелкните на кнопке                       Run Cell (Выпол­
     нить ячейку).

     Python сообщит, какой класс применялся для создания указанного экзем­
     пляра (рис. 15.2). Префикс main  означает, что данный класс включен не­
     посредственно в код приложения и не является частью другого пакета.




                         In [17] :    Myinstaruce.     class

                         Out[17]:       main     .MyClass

                         Рис.   15.2. Данный экземпляр был создан
                                 с помощью класса      MyClass


                                ГЛАВА   15    Создание и использование классов        313
Встроенные атрибуты класса
   В процессе создания класса вам кажется, будто класс содержит только то,
что вы ему назначаете. Но на самом деле это не так, поскольку                                                         Python        добав­
ляет в класс встроенную функциональность. Например, в предыдущем разде­
ле вы применили встроенный атрибут_ class _, который сами не создавали.
Полезно знать о наличии таких атрибутов, чтобы не пытаться добавлять их
самостоятельно. Подобные возможности будут востребованы довольно ча­
сто, поэтому                 Python           включает их в каждый класс. В следующей пошаговой
инструкции показано, как работать со встроенными атрибутами класса. При
этом предполагается, что вы выполнили действия, описанные в предыдущем
разделе.


 1.      Введите print                        (dir (Myinstance)) и щелкните на кнопке Run Cell (Вы­
         полнить ячейку).

         На экране появится список атрибутов, показанный на рис.                                                15.3. Эти         атрибуты
         реализуют универсальную функциональность класса. Они являются общими
         для всех создаваемых классов, поэтому на них всегда можно рассчитывать.



  1,, [-11   р    11;t. ( 11r (Hyinstimcc))

             {' HyYar ' , ' _class_' , '_delattr_', ' _dict_', ' _d i r_ ', ' _ doc_ ' , ' _eq_ ' , ' _ t'oma t _ ', ' 9е_', ' _qetattri
             bute '      ' Qt '   '   hash '  ' i nit '  ' init s ubclass '     ' le '      ' 1t '     ' module '      ' ne '   ' ne..,. '
             , ' !cd.uce ·:-·' rёduce bl '',-; rePr' '',-; 5e'tattr ',"""7 1 siZёot- .;
             ']   -          -      -         - -   -   -     -        -      -       -     .-"t;-
                                                                                            - - :, -;---    subcl:;;shook ·:-·· 1o-eakref
                                                                                                                        -     -         -

      Рис. 15.3. Использование функции dir () для идентификации встроенных
                                    атрибутов

 2.      Введите help ( '_class_').
         Python отобразит информацию об атрибуте    class , как показано на
         рис. 15.4. Подобным образом можно получить справку о любом атрибуте
         класса.




Работа с методами
  Метод               -     это просто функция, определенная в классе. Метод создается и
применяется точно так же, как и функция, за исключением того, что он всегда
связан с классом (не существует автономных методов, вызываемых вне клас­
са). Существуют два вида методов: те, которые связаны с самим классом, и те,
которые связаны с экземпляром класса. Важно не путать их.

Создание методов класса
  Метод класса                          -     это метод, который можно вызвать непосредственно из
класса, не создавая экземпляра. Иногда требуется создавать такие методы,
которые применяются к любым объектам класса. Например, в главе                                                                      1О       мы



314          ЧАСТЬ 3                Профессиональные методики программирования на Python
использовали функцию                str. upper (), которая определена в классе str. В сле­
дующей пошаговой инструкции демонстрируется создание и использование
метода класса.



  In [5]:    help (' _class_ ')

             Help on class module in module builtins:

                  class   = class module(object)
                    module(name[, doc])

                    Create а module object.
                    The narne must Ье а string; the optional doc argurnent   сап   have any type .

                   Methods defined here:

                      delattr (self, name, /)
                        Implement delattr(self, name).

                      dir  ( ... )
                          dir () -> list
                        specialized dir() implernentation

                   _getattribute_(self , name, /)
                      Return getattr(self, name).

                      init    (self, /, *args, **kwargs)
              1         Initialize self.    See help(type(self)) for accurate signature .
              1
              1   new (•args, ••Jcwargs) from bu1lt1ns.type
              1 -   Create and return а new object. See help(type) for accurate signature.
              1
              1 _repr_(self, /)
              1     Return repr(зelf) .
              1
              1   зetattr  (self , name , value, /)
              1     Implement setattr(self, name, value).
              1
              1


      Рис.   15.4. Python предоставляет                справку для каждого атрибута класса


 1.   Введите следующий код в блокноте.

      class MyClass:
         def SayHello () :
                   print     ("Привет   всем 1   ")




      Созданный класс содержит единственный метод                        SayHello (),         который не
      имеет никаких аргументов и не возвращает никаких значений. Он просто вы­
      водит сообщение. Для демонстрационных целей этого вполне достаточно.

 2.   Введите МyClass. SayHello () и щелкните на кнопке Run Cell (Выполнить
      ячейку).

      Программа выведет ожидаемую строку, как показано на рис.                             15.5. Обратите
      внимание на то, что вам не пришлось создавать экземпляр класса, поскольку

      метод вызывается прямо из класса.




                                    ГЛАВА    15       Создание и использование классов               315
                                    Работа с методами

                                    Создание методов класса

                         In [1] :   olass MyClass:
                                       def SayHello () :
                                              рrint ( "Здравствуй ,   мир! ")


                                    MyClass. SayHello()

                                    Здравствуй,      мир!


                  Рис.   15.5. Метод класса выводит простое сообщение

               Метод класса может работать только с данными класса. Он не имеет
              доступа ни к каким данным, связанным с экземплярами класса. Ему
              лишь можно передавать данные в виде аргументов. Таким образом,
 ЗАПОМНИ!
               нужно проявлять осторожность при создании методов класса и сле­

              дить за тем, чтобы они были самодостаточными.


Создание методов экземпляра
   Метод экземпляра является членом отдельного экземпляра класса. Такие
методы применяются для работы с данными, хранящимися в экземпляре. Как
следствие, их нельзя использовать до тех пор, пока не будет создан объект
класса.



               Все методы экземпляра имеют как минимум один аргумент:                     self.
              Он ссылается на текущий экземпляр, из которого был вызван метод.
               Без аргумента self метод не знал бы о том, какие данные исполь­
 ЗАПОМНИ!
              зовать. Значение для self предоставляет сам Python, и его невоз­
               можно изменить при вызове метода. Ниже показано, как создавать и
               использовать методы экземпляра в             Python.

  1.   Введите следующий код в блокноте.

       class MyClass:
          def SayHello (self) :
                рrint("Привет       всем!")


       Созданный класс содержит единственный метод                    SayHello (),   который не
       имеет никаких аргументов и не возвращает никаких значений. Он просто вы­
       водит сообщение. Тем не менее для демонстрационных целей этого вполне
       достаточно.




316         ЧАСТЬ 3   Профессиональные методики программирования на Python
 2.     ВведитеМуinstаnсе         = MyClass ().
        Python создаст экземпляр класса MyClass с именем Myinstance.
 3.     Введите Мyins tance. SayHello () и щелкните на кнопке Run Cell (Выпол­
        нить ячейку).

        На экране появится сообщение, показанное на рис.          15.6.


                                 Создание методов экземпляра

                      In [2]:    c.1.ass MyClass:
                                     def SayHello(self):
                                        рrint ( "Здравствуй,   мир! ")


                                 Myinstance = MyClass()
                                 Myinstance.SayHello()

                                 Здравствуй,   мир!


                Рис. 75.6. Метод экземпляра вызывается по отношению
                к конкретному объекту и выводит простое сообщение


Работа с конструкторами
   Конструктор         -   это особый метод, вызываемый в            Python   при создании
объекта.     Python   использует конструктор для выполнения таких действий, как
и11ициализация (присвоение начальных значений) любых переменных экзем­
пляра, которые понадобятся объекту при запуске. Конструктор также может
проверить, достаточно ли ресурсов для объекта, и выполнить любые другие
начальные действия.

              Имя конструктора всегда одно:           _ init _ ().       Конструктор может
              иметь аргументы, если это необходимо для создания объекта. Ког­
              да создается класс без конструктора,        Python   автоматически создает
 ЗАПОМНИ !
              конструктор по умолчанию, который не выполняет никаких дей­
              ствий. Каждый класс должен иметь конструктор, даже если он прос­
              то вызывает конструктор, заданный по умолчанию. Ниже показано,
              как создать конструктор.



  1.    Введите следующий код в блокноте.

        class MyClass:
           Greeting = ""
           def    init   ( self, Nаmе="мир") :
               self.Greeting = Name + "!"
           def SayHello (self):
               print ("Здравствуй, {О}". format (self. Greeting)}


                                ГЛАВА   15   Создание и использование классов          317
                Это наш первый пример перегрузки функций. В данном случае существу­
                ют две версии конструктора           _ini t _ ( ) . Первый   конструктор не тре­
                бует предоставления входного аргумента, поскольку использует значе­
                ние    Name,   заданное по умолчанию: "мир". Второй конструктор требует
                указать имя. Это имя вместе с восклицательным знаком записывается в
                переменную        Greeting. Метод SayHello (),по сути, такой же,      как и в пре­
                дыдущих примерах.

                В    Python не поддерживается истинная перегрузка функций. Ярые
                приверженцы строгих принципов объектно-ориентированного програм­
                мирования (ООП) считают, что значения, заданные по умолчанию,               -   это
ТТХНИЧЕСКИЕ     совсем не то же самое, что перегрузка функций. Однако результат до­
ПОДРОБНОСТИ
                стигается тот же самый, и это единственная альтернатива, доступная
                в    Python. При истинной перегрузке функций будет создано несколько
                версий одной и той же функции, каждая из которых будет по-разному
                обрабатывать входные данные.

        2.      ВведитеМуinstаnсе               = МyClass ().
                Python создаст экземпляр класса MyClass с именем Myinstance.
        3.      Введите Myinstance. SayHello () и щелкните на кнопке                      Run Cell
                (Выполнить ячейку).

                На экране появится сообщение, показанное на рис.             15.7. В данном случае
                выводится приветствие, заданное по умолчанию.




                          Работа с конструкторами

         In [3]:          class MyClass:
                             Greeting = ""
                             def    init (self, Nаmе="мир ") :
                                 self .Greeting = Name + " ! "
                             def SayHello(self) :
                                 print ( " Здравствуй , {0) ". format (self .Greeting))

                          Mylnstance = MyClass()
                          Myinstance.SayHello()

                          Здравствуй ,   мир!



              Рис.   15. 7. Первая версия конструктора использует имя, заданное
                                                по умолчанию



  4.   ВведитеМуinstаnсе2                 = МyClass ("Эмма").
       Python создаст экземпляр класса MyClass с именем Myinstance2. Он полно­
       стью отличается от экземпляра              Myinstance.
  5.   ВведитеМуinstаnсе2. SayHello ().



318      ЧАСТЬ        3    Профессиональные методики программирования на Python
      Python сформирует сообщение для Эммы, отличающееся от того, которое
      было получено для экземпляра класса          Myinstance.
 6.   BвeдитeМyinstance.Greeting ="Гарри!"·
      Приветствие для экземпляра       Myinstance        изменится, не затрагивая привет­
      ствие для экземпляра       Myinstance2.
 7.   Введите Мyinstance.        SayHello () и щелкните на кнопке Run Cell (Выпол­
      нить ячейку).

      На экране появятся сообщения, показанные на рис.           15.8. Для   каждого экзем­
      пляра выводится свое приветствие. Каждый экземпляр уникален, и можно из­
      менить сообщение для первого экземпляра, не влияя на второй экземпляр.



                       In [4]:   Myinstance2 = MyClass ( "Эмма" )
                                 Myinstance2.SayHello()
                                 Myinstance . Greeting ="Гарри!"
                                 Myinstance . SayHello()

                                 Здравствуй,    Эмма!
                                 Здравствуй,    Гарри!


                   Рис. 15.8. Передавая конструктору имя, можно
                               настраивать сообщение


Работа с переменными
  Как упоминалось ранее, переменные являются контейнерами для хранения
данных. Работая с классами, необходимо учитывать, как хранятся данные и
каким образом ими можно управлять. Класс может включать как переменные
класса, так и переменные экземпляра. Первые создаются как часть самого
класса, а вторые   -    как часть методов. В следующих разделах будет показано,
как использовать оба типа переменных.

Создание переменных класса
  Переменные класса обеспечивают глобальный доступ к данным, которыми
ваш класс каким-либо образом работает. В большинстве случаев глобальные
переменные инициализируются в конструкторе, так как это позволяет гаран­

тировать, что они содержат известное начальное значение. Ниже показано, как
работают переменные класса.

 1.   Введите следующий код в блокноте.

      class MyClass:
         Greeting = ""
         def SayHello (self):
            print ("Здравствуй,       {О)".   format (self. Greeting) )


                            ГЛАВА    15   Создание и использование классов             319
       Это версия программы из предыдущего раздела, только в данном случае она
       не включает конструктор. Обычно конструктор добавляют, чтобы обеспечить
       корректную инициализацию переменных класса. Здесь же показано, что про­
       изойдет, если этого не сделать.

 2.    Введите МyClas s . Greeting           =   "Зе.nьда ! ".
       Переменной        Greeting     будет присвоено значение, отличающееся от значе­
       ния, которое использовалось при создании класса. Конечно, кто угодно может
       сделать подобное изменение. Вопрос в том, произойдет ли оно.

 3.    Введите MyClass. Greeting и щелкните на кнопке Run Cell {Выполнить
       ячейку).

       Вы увидите, что значение переменной            Greeting было изменено (рис. 15.9).

                      Создание переменных класса

       In [10):       сlа.ззMyClass :
                         Greeting = ""
                         def SayHello (self) :
                            print ( "Здравствуй,     {О}" .   format (self. Greeting))

                      MyClass.Greeting =     " Зельда! "
                      MyClass.Greeting
       Out[10]:       'Зельда!'



      Рис.   75.9. Пользователь может изменить значение переменной Gree t i nq

 4.    ВведитеМуinstаnсе             = МyClass ().
       Pythoп создаст экземпляр класса           MyClass с именем Myinstance.
 5.    Введите Мyinstance. SayHello () и щелкните на кнопке Run Cell (Выпол­
       нить ячейку).

       На экране появится сообщение, показанное на рис.               15.1 О. Изменение, внесен­
       ное в переменную          Greeting, отразилось на экземпляре класса. В данном слу­
       чае использование переменной класса не вызвало проблем, но в реальном
       приложении подобная практика может привести к серьезным неприятностям.



                               In [11) : Myinstance = MyClass()
                                         Myinstance.SayHello()

                                        здравствуй,    Зельда!


                          Рис.   75. 7О. Изменение значения переменной
                        Gree t ing отражается на экземпляре класса




320      ЧАСТЬ    3    Профессиональные методики программирования на                     Python
  Это всего лишь простой пример ситуации, в которой переменные класса
могут повлиять на корректную работу программы. Отсюда можно вынести два
урока:


             >>    по возможности не используйте переменные класса, поскольку они
                   могут быть небезопасными;

             »     всегда инициализируйте переменные класса известным значением
                   в коде конструктора.




Соэдание переменных экземпляра
  Переменные экземпляра всегда определяются внутри метода. Аргументы
метода тоже считаются переменными экземпляра, поскольку они существуют

только тогда, когда существует метод. Использовать переменные экземпляра
обычно безопаснее, чем переменные класса, поскольку их легче контролиро­
вать. Вы всегда сможете проверить, что вызывающий код предоставил кор­
ректные данные. Ниже приведен пример работы с переменными экземпляра.

 1.   Введите следующий код в блокноте.

      class MyClass:
         def DoAdd(self, Valuel=O, Value2=0):
             Sum = Valuel + Value2
             print("Cyммa (0) и (1) равна {2)."
                   .format(Valuel, Value2, Sum))
      В данном случае у нас есть три переменные экземпляра. Входные аргументы
      Valuel и Value2 имеют значения, заданные по умолчанию (О), поэтому метод
      DoAdd ( ) не сможет завершиться сбоем только из-за того, что пользователь
      забыл указать значения. Конечно, пользователь еще может передать нечис­
      ловые данные, поэтому в код нужно включить соответствующие проверки.

      Третья переменная экземпляра           -   это   Sum. Ее значение вычисляется по фор­
      муле   Valuel + Value2.     Программа просто суммирует два числа и выводит
      результат.

 2.   ВведитеМуinstаnсе        = MyClass ().
      Python создаст экземпляр класса MyClass с именем Myinstance.
 3.   Введите Мyinstance. DoAdd (1,               4) и щелкните на кнопке Run Cell (Вы­
      полнить ячейку).

      На экране появится сообщение, показанное на рис.               15.11.   В данном случае
      отображается сумма чисел      1 и 4.

Использование методов с переменным числом аргументов
  Время от времени вам будут требоваться методы, которые могут принимать
переменное число аргументов. Обработка подобных ситуаций очень хорошо


                            ГЛАВА   15    Создание и использование классов               321
                                Создание переменных экземпляра

                I n [ З ] : clas.s MyClass :
                               de~ DoAdd(self , Valuel=O, Value2=0 ):
                                   sum = Valuel + Value2
                                   print (" Cyммa (О} и {1} равна {2}. "
                                          .format(Valuel , Value2 , Sum))

                                Myinstance = MyClass()
                                Myinstance.DoAdd( l , 4 )

                                Сумма    1   и   4   равна   5.

              Рис.   15. 11.   Результат представляет собой сумму двух чисел


реализована в        Python. Вот два типа переменных списков аргументов, которые
можно создать:


               >> * args -         список неименованных аргументов;

               »         * * kwargs -    список именованных аргументов.



              Фактические имена аргументов не важны, но в соответствии с об­
              щепринятым соглашением разработчики                         Python используют имена
              *args       и   **kwargs,      давая тем самым понять, что это переменный спи­
 ЗАПОМНИ!
              сок аргументов. В первом случае имя содержит только одну звездоч­
              ку(*), означающую использование неименованных аргументов. Во
              втором случае имя сожержит две звездочки, что означает использо­

              вание именованных аргументов. Ниже показано применение обоих
              типов списков.



  1.   Введите следующий код в блокноте.

       class MyClass:
          def PrintListl (*args) :
             for Count, Item in enumerate(args):
                 print("(O}. (l} ".format (Count , Item))
          def PrintList2(**kwargs}:
             for Name, Value in kwargs.items( ) :
                 print("(O} любит {l}".format(Name , Value))
       MyClass. PrintListl ("Красный", "Синий", "Зеленый" )
       MyClass.PrintList2 ( Джopдж="Kpacный",                     Сью="Синий",
                                        Зара=" Зеленый" )


       В этом примере аргументы реализованы как часть метода класса. Но их так же
       легко можно использовать в методе экземпляра.




322         ЧАСТЬ    3     Профессиональные методики программирования на Pythoп
                      В методе PrintList 1 () продемонстрирован новый способ исполь­
                      зования цикла  for для перебора списка. В данном случае функция
                      enшnerate () возвращает как номер аргумента, так и строку, переданную
    сОВЕТ             вызывающим кодом.

                      Функция     PrintList2 () получает данные в виде словаря. Как и в случае
                      с функцией    PrintListl (),список аргументов может быть любой длины.
                      При этом для получения отдельных значений нужно вызвать функцию
                      i tems   (),извлекающую данные из словаря.

            2.        Щеnкните на кнопке            Run Cell     (Выпоnнить ячейку).
                      Результат выполнения программы показан на рис.                15.12. Попробуйте   по­
                      экспериментировать с кодом, чтобы лучше понять концепцию перемен­
                      ных списков. Например, попробуйте смешать числа и строки в первом
                      списке и посмотрите, что произойдет. Попробуйте также добавить буле­
                      вы значения. Суть в том, что эта методика придает методам невероятную
                      гибкость, если все, что вам нужно,             - это список входных значений.

                 Использование методов с переменными списками аргументов

    rn   [~]:    olaaa MyClass:
                    d.ef PrintListl(•args) :
                        for count , Item in enUП' r•<e (args):
                           print (" {C}. 11}" .format(Count , Item)J
                    d.ef PrintList2(*•kwar9s):
                        for Name, Value in kwar9s.items():
                           print ( "[О} ЛJJби·r 1} " . forrмt {Na.m.. , Value))
                 MyClass. PrintLi.stl\ f "Красиы:й:", "Синий", "~" л~ный",
                 MyClass. PrintList2 (ДЖ0рд1['8 "К'расиый" , сью- ",...ивий" ,
                                         зара•"~'   1еный" )

                 О.    Красный
                 1.    Синий
                 2.    Зелеl!ЫЙ
                 Дzорд:а любит    Красl!ЫЙ
                 Сью любит Синий
                 Зара любит Зелеl!ЫЙ



         Рис.    15.12. Метод может обрабатывать любое количество аргументов


Переrрузка операторов
    Иногда при использовании стандартных операторов, таких как                                +   (сложе­
ние), требуется выполнить что-то нестандартное. Благодаря перегрузке можно
назначить новую функциональность существующим операторам, чтобы они
выполняли то, что нужно вам, а не то, что по умолчанию предполагается

в   Python.       Ниже показано, как выполнить перегрузку оператора и применить
измененный оператор в приложении.




                                         ГЛАВА      15     Создание и использование классов           323
       1.   Введите сnедующий код в бnокноте.

            c lass MyCl a s s :
                def       init (se lf, *a r gs ) :
                     self.Input = args
                def       add (se lf , Ot he r):
                     Out put = MyClass ( )
                     Output .Input = se l f .Input + Ot he r . I nput
                     re tu rn Out put
                de f      str (self ) :
                     Output = ""
                     for Item in sel f. I nput :
                          Output += It em
                          Output += " "
                     r eturn Output
            Va luel       МуСlаss ( " Кра с ный ", " Зеленый", " Синий")
            Va lue 2 = MyCl ass ( " Желт ый ", "П урп урный " , "Г ол убой ")
            Value З = Va luel + Va l ue2
            pri nt ("( O}+ {1)= (21 "
                     . f ormat (Valuel, Va l ue2, Value 3 ))

            В примере демонстрируется несколько новых методик. В частности, в
            конструкторе       _i n i t _ ( )   показано, как создать переменную экзем­
            пляра, связанную с объектом         self. Аналогичным образом можно создать
            произвольное количество переменных.

            Когда создаются новые классы, оператор            + для   них не определяется по
            умолчанию. Его нужно создать самостоятельно. Единственное исключе­
            ние имеет место в случае наследования существующего класса, в кото­
ЗАПОМНИ!    ром данный оператор уже определен (дополнительные сведения по этой
            теме будут приведены далее). Чтобы иметь возможность суммировать
            два объекта      MyClass, нужно определить метод            add     ( ) , который со­
            ответствует оператору + .

            Код метода         add    ()   может показаться немного странным, поэтому
            рассмотрим его построчно. Метод начинается с создания нового объекта
            Output класса MyClass. На данный         момент в объекте      Output   ничего нет,
            он пуст. Два объекта, содержимое которых нужно суммировать,                  self.
            I nput   и   Othe r. Input , в действительности являются      кортежами. (Допол­
            нительные сведения о кортежах были приведены в главе                 14.) Метод по­
            мещает сумму двух кортежей в переменную              Output. Input, после      чего
            возвращает итоговый объект вызывающему коду.

            Вы спросите, почему нельзя просто сложить два входных кортежа? Ответ
            заключается в том, что в результате вы тоже получите кортеж, а не объект
            MyClass. Тип      результирующего значения изменится, и вы не сможете ис­
            пользовать его так, как исходные объекты.




324    ЧАСТЬ    3 Профессиональные методики программирования на Pythoп
        Для корректного вывода содержимого объекта                                                              MyClass      необходимо опре­
        делить метод                         str             ().Он извлекает все аргументы из переменной                                       self.
        Input,           формируя единую строку, разделенную пробелами. В собственных
        классах вы вправе выводить любые строки.

        В основной процедуре создаются два тестовых объекта,                                                             Valuel     и   Value2. Они
        суммируются, и результат помещается в ValueЗ, содержимое которой затем
        ВЫВОДИТСЯ на экран.

 2.     Щеnкните на кнопке                                  Run Cell (Выпоnнить ячейку).
        На рис. 15.13 показан результат сложения двух объектов. Нам пришлось на­
        писать немало кода как для такого простого результата, но зато вы узнали, как

        создавать классы, которые являются автономными и полностью функциональ­
        ными.




             Перегрузка операторов

  In    9J   o.1aJ1s     НуСlазз:
                  сМ.f       init       (5elf, • arQ.!1):
                         зelf . rn{>Ut - argз
                  def        add      ( self , Other):
                         oU'tput-; MyClas.s ()
                         Oцtp~1t .   Input •       зelf .   Input + Other. Input
                         r.turp Output
                  doof       •«  (•elf):
                         OU~put-; ""
                         tor Item in зelf. Input:
                            OUtput +- Item
                             1нtрцr.     +- " "
                         return Output
             Vl!llue l • HyCla.ss        (" Кр"снt.-:й" ,     "~~л~н~"' ,          ""1ntий")
             Vlllue2 • HyCl!155          ("Ж'"' лтый" ,      "f'!.уt_,nурный." ,    "l'с.луt'юй")
             ValueЗ       • Valuel       +   Value2
             J:·Г.ll\t (" {~lj 1     1 \а: (2) "
                         . t'ormat {Valuel, value2,              VllllueЗ))




             Кр•сный Зеленый синий                  +   J<елтый Пурnуркый Гопубод               =   Кр•сный зеленый синий J<ептый Пурпурный Гопубсд



 Рис.   15.13. В результате сложения двух объектов MyClass получается третий
                                                              объект такого же типа




Создание класса
  Весь предыдущий материал главы готовил вас к созданию собственного
класса. Сейчас мы создадим класс, который помещается во внешний пакет,
чтобы к нему можно было получать досrуп из приложений.


Определение класса МyClass
  В листинге                  15.1        приведен код класса. Он содержится в файле BPPD_l5_
MyClass. ipynb                (см. введение).




                                                     ГЛАВА            15           Создание и использование классов                               325
Лис~инг       15.1.      Создание внешнего КJJacca

class MyClass:
   def     init (self, Nаmе="Сэм", Age=32):
        self.Name = Name
        self .Age = Age
   def GetName(self):
       return self.Name
   def SetName(self, Name):
       self.Name = Name
   def GetAge(self):
       return self .Age
   def SetAge(self, Age):
       self .Age = Age
   def     str (self):
       return "{0) в возрасте {l}.".format(self.Name, self.Age)

   Код класса начинается с создания объекта, включающего две переменные
экземпляра: Name и Age. Если пользователь не присвоит им значения, они по
умолчанию получат значения Сэм и            32.

               В этом примере представлена еще одна функциональная особен­
               ность классов: методы доступа. Они обеспечивают доступ к вну­
               тренним переменным объектов. Существуют два типа методов
 ЗАПОМНИ!
               доступа: геттеры (от англ.         "getter" -   получатель) и сеттеры (от
               англ.   "setter" -   установщик). Методы GetName () и GetAge () явля­
               ются геттерами, позволяющими прочитать значение переменной.
               Методы SetName () и SetAge () являются сетrерами, позволяющими
               изменить значение переменной. Подобное разделение методов дает
               возможность проверять корректность входных данных и контроли­

               ровать, имеет ли вызывающий код разрешение на просмотр инфор­
               мации.


   Как и для любого другого создаваемого вами класса, нужно определить ме­
тод_ str_        (),   если вы хотите, чтобы пользователь мог выводить содержимое
объекта на экран. В данном случае класс формирует строку вывода, в которой
содержатся обе переменные экземпляра.


Сохранение класса на диске
   Класс может находиться в том же файле, что и код, предназначенный для его
тестирования, но на практике такое встречается нечасто. Чтобы класс можно
было тестировать в последующих примерах, выполните следующие действия.




326         ЧАСТЬ 3     Профессиональные методики программирования на Python
 1.   Создайте новый блокнот под названием BPPD_ 15_МyClass . ipynЬ.

 2.   Щелкните на кнопке       Run Cell (Выполнить ячейку).
      Если код был введен корректно, Pythoп выполнит его без ошибок.

 3.   Выполните команду         Filec::>Save and Checkpoint (Файлс::>Сохранить и со­
      здать точку восстановления).

      Notebook сохранит файл.
 4.   Выберите команду         Filec::>Download Asi:::>Python (.ру) (Файлс::>Заrрузить
      какс::>Руthоп (.ру)).

      Notebook выведет код в виде файла Pythoп.
 5.   Импортируйте полученный файл в свой блокнот.
      О том, как это сделать, рассказывалось в разделе "Импорт блокнота" главы     4.



Использование класса в приложении
  Чаще всего вы будете использовать внешние классы при работе с               Python.
Класс редко включают в файл приложения, поскольку такой файл быстро ста­
новится слишком большим и неуправляемым. Кроме того, нельзя будет повтор­
но использовать код класса в другом приложении. В следующей пошаговой
инструкции демонстрируется применение класса MyClass, который был создан
в предыдущем разделе.


 1.   Введите следующий код в блокноте.

      import BPPD_l5_MyClass
      SamsRecord = BPPD_l5_MyClass.MyClass()
      AmysRecor-d = BPPD_l5_MyClass.MyClass("Эммa", 44)
      print(SamsRecord.GetAge())
      SamsRecord.SetAge(33)
      print(AmysRecord.GetName())
      AmysRecord. SetName ( "Эйми")
      print(SamsRecord)
      print(AmysRecord)
      Программа начинается с импорта пакета      BPPD_ 15_ MyClass. Имя пакета -   это
      не имя класса, а имя файла, содержащего код класса. Один пакет может содер­
      жать несколько классов, поэтому всегда думайте о пакете как о фактическом
      файле, который используется для хранения одного или нескольких классов.

      Далее приложение создает два объекта MyClass. Обратите внимание на
      то, что сначала указывается имя пакета, а затем
                                                   - имя класса. Первый объ­
      ект,
         SamsRecord, создается с настройками по умолчанию. Второй объект,
      AmysRecord, содержит данные, полученные от пользователя.


                              ГЛАВА 15   Создание и использование классов          327
       С момента создания приложения Сэм стал старше на год. Сначала приложе­
       ние сообщает его текущий возраст, а затем, получив новые данные, обновляет
       возраст Сэма.

        Каким-то образом сотрудник отдела кадров неправильно записал имя Эйми.
       Оказывается, Эмма        -   это неправильное написание. Опять-таки, сначала при­
       ложение сообщает текущее имя, после чего вносит исправления в объект
       ArnysRecord. Последний шаг заключается в выводе на экран обеих записей.
 2.     Щелкните на кнопке          Run Cell (Выполнить ячейку).
       Приложение выводит сообщения, генерируемые классом               MyClass, как пока­
       зано на рис.       15.14. Теперь вы знаете, как создавать собственные классы.


                   Использование класса в приложении

      In [1]:      import BPPD_lS_MyClass
                   SamsRecord = BPPD_lS_MyClass . MyClass()
                   AmysRecord = BPPD_lS_MyClass . MyClass ( "Эмма" , 44 )
                   print (SamsRecord . GetAge())
                   SamsRecord . SetAge( 3З )
                   print (AmysRecord.GetName())
                   AmysRecord.SetName(" Эйми" )
                   print (SamsRecord)
                   print (AmysRecord)

                   32
                   Эмма
                   Сэм в    возрасте    33.
                   эйми в    возрасте    44.

      Рис.   15. 14.   Полученные результаты говорят о том, что класс полностью
                                               функционален



Расширение классов для
создания новых классов

  В профессиональных приложениях, применяемых в производственной сре­
де, создание классов отнимает много времени, так как необходимо запрограм­
мировать множество задач. К счастью, в                Python   поддерживается механизм на­
следования, с помощью которого можно получить нужную функциональность
из родительского класса при создании дочернего класса. Переопределяя мето­
ды, которые вам не нужны, и добавляя новые методы, вы сможете создавать
новые классы относительно быстро и с гораздо меньшими усилиями. Кроме
того, поскольку родительский код уже протестирован, вам не придется при­
лагать много усилий, чтобы гарантировать корректную работу нового класса.
Далее будет показано, как создавать и использовать дочерние классы.


328      ЧАСТЬ 3          Профессиональные методики программирования на             Python
Создание дочернеrо класса
  Родительские классы обычно являются супермножествами чего-либо. На­
пример, можно создать родительский класс           car,   а затем определить дочерние
классы, описывающие различные типы автомобилей. В следующем примере
создается родительский класс     Anirnal (Животное), на основе которого опреде­
ляется дочерний класс Chicken (Курица). Можно легко добавить и другие до­
черние классы, например    Gorilla    (Горилла), но мы ограничимся только одним
родительским и одним дочерним классом (листинг              15.2).   Чтобы класс можно
было использовать далее, его нужно сохранить на диске, как описывалось ра­
нее. Назовите файл   BPPD_ 15 _ Anirnals. ipynb.

Лис~ин~   15.2.   Создание роди~епьсхо~о и дочерне~о JCJiaccoв

class Animal:
   def     init (self, Name="", Age=O, Туре=""):
       self.Name = Name
       self .Age = Age
       self. Туре = Туре
   def GetName(self):
       return self.Name
   def SetName(self, Name):
       self.Name = Name
   def GetAge(self):
       return self.Age
   def SetAge(self, Age):
       self .Age = Age
   def GetType(self):
       return self. Туре
   def SetType(self, Туре):
       self. Туре = Туре
   def     str (self):
       return "{О} будет (1) в возрасте {2}".format(self.Name,
                                                    self. Туре,
                                                    self .Age)

class Chicken(Animal):
   def     init (self, Name="", Age=O):
       self.Name = Name
       self.Age = Age
       self.Type = "курица"
   def SetType(self, Туре):
       print ("Извините, {О} всегда будет {1}"
              .format(self.Name, self.Type))
   def MakeSound(self):
       print("{Of говорит ко, ко, кo!".format(self.Name))



                         ГЛАВА   15    Создание и использование классов           329
    Класс   Animal     отслеживает три характеристики:      Name, Age   и Туре. Произ­
водственное приложение, вероятно, будет отслеживать больше характеристик,
но для данного примера этого вполне достаточно. Класс также включает не­
обходимые методы доступа для каждой из характеристик. Метод                 _str_ ()
выводит на экран простое сообщение с указанием характеристик животного.
    Класс   Chicken наследуется от класса Animal. Имя родительского класса ука­
зывается в скобках после имени дочернего класса. Это подсказывает              Python,
что класс    Chicken    производный от класса   Animal,   т.е. наследующий его харак­
теристики.

    Заметьте, что конструктор класса Chicken получает только значения Name
и   Age. Пользователю не нужно указывать значение Туре, поскольку вы и так
знаете, что это курица. Новый конструктор переопределяет конструктор класса
Animal. Все три атрибута остаются на месте, но атрибут Туре инициализирует­
ся непосредственно в конструкторе Chicken.
    Кто-то может забавы ради поменять атрибут Туре, выставив, например,
свою курицу гориллой. Учитывая это, класс        Chicken также переопределяет ме­
тод-сеттер    SetType ().   Если кто-то попытается изменить тип класса   Chicken,
то получит соответствующее сообщение. Обычно проблема такого рода реша­
ется с помощью исключения, но сообщение делает код более компактным
и понятным.

    Наконец, класс Chicken добавляет новый метод MakeSound (). Если кто-то
захочет услышать звук, издаваемый курицей, то сможет вызвать этот метод,
чтобы реализовать свою мечту.


Тестирование класса в приложении
    Тестирование класса
                      Chicken также в определенной степени позволяет про­
верить работу класса Animal, который является родительским для различных
классов животных. Это позволит нам увидеть, как работает наследование.

    1.   Введите следующий код в блокноте.

         import BPPD_15_Animals
         MyChicken = BPPD_l5_Animals.Chicken("Caлли", 2)
         print(MyChicken)
         MyChicken. Set:Age (MyChicken. GetAge () + 1)
         print(MyChicken)
         MyChicken. Set:Type ("Горилла")
         print(MyChicken)
         MyChicken.MakeSound ()
         Первый шаг заключается в импорте пакета    Animals.    Помните, что вы всегда
         указываете имя файла, а не класса. Файл пакета в действительности содержит
         два класса:   Animal   и   Chicken.


330       ЧАСТЬ   3    Профессиональные методики программирования на           Python
     В этом примере создается курица                         MyChicken по имени Салли, которой 2 года.
     Затем мы проверяем различные способы работы с классом MyChicken. На­
     пример, сегодня у Салли день рождения, поэтому программа увеличивает
     возраст Салли на один год. Обратите внимание на совместное использование
     методов         setAge () и GetAge ().После каждого изменения программа выводит
     содержимое объекта. Последний шаг заключается в том, чтобы позволить Сал­
     ли сказать несколько слов.

2.   Щеnкните на кнопке Run Cell (Выпоnнить ячейку).

     Результаты работы программы показаны на рис.                           15.15.   Как видите, исполь­
     зование наследования позволяет существенно упростить задачу создания

     новых классов в ситуации, когда несколько классов имеют общую функцио­
     нальность. Вы создаете родительский класс, который содержит общий код,
     используемый в дочерних классах.



             Расширение классов для создания новых классов

             Тестирование класса в приложении

 In [ 1] :   :tnч;>ort BPPD 15 Animal3
             MyChicken --BPPD_lS_Animals.Chicken( "Caлли" , 2 )
             print (MyChicken)
             MyChicken.SetAge(MyChicken.GetAge() + t )
             print (MyChicken)
             MyChicken.SetType(" Гopиллa" )
             print (MyChicken)
             MyChicken . мakesound()

             Салли будет   курица      в    возрасте    2
             Салли будет   курица      в    возрасте    З
             Иэеините,   Салли    всегда      будет    курица
             Салли будет   курица      в    возрасте    З
             Салли   говорит   ко ,   ко,    ко!



 Рис.    15. 15.   Сегодня у Салли день рождения, и она хочет кое-что сказать нам




                                      ГЛАВА        15       Создание и использование классов        331
~ешение
ело   ных задач
В ЭТОЙ ЧАСТИ •.•


))   Долговременное хранение данных на диске

))   Создание, чтение, изменение и удаление данных
     в файлах

))   Написание, отправка и просмотр сообщений
     электронной почты
Глава           16

Хранение данных
в файлах

 В ЭТОЙ ГЛАВЕ ...

 >> Принципы работы долговременного хранилища

 >> Использование содержимого долговременного
    хранилища


 >> Создание, чтение, изменение и удаление данных в файлах




д ли информацию на экран. Но в действительности приложения больше
            о сих пор мы разрабатывали приложения, которые в основном выводи­


            ориентированы на работу с данными. Данные   -   это сердцевина любо­
го приложения, поскольку именно они больше всего интересуют пользователя.
   Будучи основой приложений, данные требуют самого тщательного подхода
к организации долговременного хранения. Данные могут храниться на таких
устройствах, как жесткие диски, SSD-накопители, USВ-флешки и пр. (Попу­
лярное решение      -   облачные хранилища данных, но они в книге не рассматри­
ваются, поскольку требуют иных подходов к программированию.) Данные, на­
ходящиеся в оперативной памяти, являются временными: они хранятся лишь
до тех пор, пока работает компьютер. Долговременное хранилище позволяет
запоминать данные даже после выключения компьютера и использовать их во

время следующей сессии.

              В этой главе рассматриваются вопросы, связанные не только с дол­
              говременным хранением, но и с основными операциями с фай­
              лами: создание, чтение, изменение и удаление     (CRUD -   Create,
 ЗАПОМНИ!
              Read, Update, and Delete).   Акроним   CRUD   известен многим раз-
          работчикам. Независимо от способа хранения данных приложение
         должно поддерживать вышеперечисленные четыре операции, чтобы
          быть полезным для пользователя. Безусловно, методы     CRUD    долж­
          ны быть надежными, безопасными и управляемыми. В этой главе
          будет показано, как осуществлять безопасную работу с файлами,
          чтобы гарантировать целостность данных. Исходный код примеров
          этой главы находится в файле BPPD_lб_Storing_Data_in_Files.
          ipynb   (см. введение).




Принципы работы
доnrовременноrо хранилища

  Для работы с долговременными хранилищами вовсе не обязательно изучать
их детально. Например, вам не важно, как крутится жесткий диск (и крутится
ли он вообще). Тем не менее необходимо понимать ряд общих правил, на ко­
торых основаны такие хранилища. Эти правила были сформулированы еще на
заре компьютерной эры, в эпоху мейнфреймов.
  Данные преимущественно хранятся в файлах. Думаю, каждый пользователь
знает, что такое файлы, ведь практически любое приложение работает с ними.
Например, открывая документ в текстовом редакторе, мы, по сути, открываем
файл данных, содержащий введенные кем-то слова.
  У файла обычно есть расширение, определяющее его тип. Расширение от­
деляется от имени файла точкой, например   MyData. txt. Здесь . txt -   это рас­
ширение имени файла, и в вашем компьютере наверняка есть приложение
(и не одно) для открытия файлов такого типа.
  Файлы структурируют хранимые данные определенным образом, чтобы
упростить их чтение и запись. Любое создаваемое приложение должно пони­
мать используемую структуру файлов, чтобы правильно взаимодействовать
с данными, которые хранятся в файлах. Файловые структуры бывают довольно
сложными, но в примерах этой главы используется простая файловая структу­
ра, позволяющая максимально упростить код доступа к данным.

  Если бы все файлы хранились на жестком диске в полном беспорядке, то
найти нужный файл было бы невозможно, поэтому файлы организованы в
виде каталогов. (В современных компьютерных системах используется также
термин папка.) Устройства долговременного хранения ориентируются на ка­
талоги как на способ упорядочения файлов, упрощающий поиск отдельных
файлов. Чтобы найти файл, необходимо знать, в каком каталоге он находится.




336   ЧАСТЬ 4     Решение сложных задач
    Каталоги имеют определенную иерархическую структуру, которая начина­
ется на верхнем уровне жесткого диска. Например, файлы исходных кодов для
этой книги находятся в каталоге BPPD. В моей системе           Windows структура    ката­
логов выглядит следующим образом: С: \Users\John\BPPD. В системах Мае и
Linux тот же    каталог BPPD будет включен в другую иерархию. В вашей системе,
скорее всего, местоположение файлов кода тоже будет другим.

              Заметьте, что я использовал обратную косую черту         (\) для   разделе­
              ния каталогов. В некоторых системах аналогичной цели служит ко­
              сая черта    (/).   В данной книге используется обратная косая черта, но
 ЗАПОМНИ!
              вы должны проверить, какой вариант соответствует вашей системе.

    В   Python структура каталогов называется путем. Этот термин уже встречал­
ся вам ранее, поскольку    Python должен находить любые ресурсы на основании
предоставленного пути. Например, с: \Users \John \BPPD -             это полный путь к
файлам исходного кода данной главы в моей Windows-cиcтeмe. Путь, охваты­
вающий весь маршрут следования              Python,   называется абсолютным. Неполный
путь к ресурсу, использующий в качестве отправной точки текущий каталог,
называется от11осителы-1ым.



              Для поиска файла с помощью относительного пути в качестве от­
              правной точки обычно используется текущий каталог. Например,
              BPPD\_pycache _будет относительным путем, ведущим к кеш-па­
ТЕХНИЧЕСКИЕ
ПОДРО6НОСП1   мяти   Python.      Обратите внимание на отсутствие в начале пути буквы
              диска или обратной косой черты. Тем не менее иногда относитель­
              ный путь начинается со специальных обозначений, которые пере­
              числены ниже.


               >>    \.Корневой каталог текущего диска. Диск является относительным,
                     и путь начинается с корня этого диска.


               » . \.Текущий каталог. Это сокращение используется для обозначения
                    текущего каталога, если его имя неизвестно. Например, определить
                     местонахождение кеш-памяти        Python можно следующим образом:
                     . \__pycache _.
               » .. \. Родительский каталог. Это сокращение используется, если имя
                     родительского каталога неизвестно.

               >>    •• \ •• \.   Родитель родительского каталога. При необходимости
                     можно подниматься вверх по структуре каталогов для нахождения

                     нужной стартовой точки, от которой потом спускаются по структуре
                     каталогов вниз к новому местоположению.




                                          ГЛАВА   16 Хранение данных в файлах        337
Создание содержимого для
долговременного хранения

   Файл может содержать структурированные либо неструкту рированные
данные. Примером структурироваиных данных может служить база данных,
в которой каждая запись несет в себе определенную информацию . База дан­
ных сотрудников компании содержит поля для имени, адреса, идентификатора
исполнителя и т.п. Каждая запись относится к отдельному сотруднику, и ка­
ждая запись сотрудника содержит поля для имени , адреса и идентификатора.
Примером неструктурировштых данных служит файл текстового редактора,
который может содержать любой текст в произвольном порядке. Дл я содержи­
мого абзаца нет обязательного порядка, а предложения могут включать любое
количество слов. Тем не менее в обоих случаях приложение должно знать, как
выполнять операции           CRUD   с файлом. Это означает, что содержимое файла
должно быть подготовлено таким образом , чтобы приложение могло осущест­
влять чтение из файла и запись в файл.
   Даже в файлах текстового редактора хранение текста организовано в соот­
ветствии с определ енными правилами. Предположим, что файлы             -   это про­
стой текст. Каждый абзац должен иметь что-то вроде символа-разграничителя ,
определяющего начало нового абзаца. Приложение читает абзац до тех пор,
пока не встретит разграничитель, после чего начинает чтение нового абзаца .
Чем больше форматирования предлагает текстовый редактор, тем более струк­
турированным получается результат.


               Разметка, подготавливающая содержимое для записи в дол говремен­
               ное хранилище, зачастую невидима . Все , что мы видим в файле ,   -
               это сами данные. Разметка скрывается по ряду причин, перечислен­
 ЗАПОМНИ!
               ных ниже.



                ))    Маркер разметки   -   это управляющий символ, например символ
                      возврата каретки или перевода строки, который обычно скрыт по
                      умолчанию на платформенном уровне.

                ))    Для разделения записей приложение использует специальные
                      комбинации символов, например запятые и двойные кавычки. Эти
                      специальные комбинации символов скрываются самим приложени­
                      ем при выводе текста.


                ))    В процессе вывода некоторые символы преобразуются в дру­
                      гую форму, как, например, при форматировании содержимого
                      файла в текстовом редакторе. На экране отображается результат




338         ЧАСТЬ 4    Решение сложных задач
                      форматирования, а специальные символы, реализующие формати­
                       рование, скрываются.

                ))    Файл фактически имеет альтернативный формат, например     XML
                       (eXtensiЬle
                                 Markup Language - расширяемый язык разметки). До­
                       полнительные сведения об XML доступны по следующему адресу:

                       http://www.wЗschools.com/xml/default.ASP

                      Альтернативный формат интерпретируется и отображается на экра­
                       не в понятном для пользователя виде.



               Могут существовать и другие nравила форматирования данных.
               Наnример, компания          Microsoft    в действительности исnользует ZIР­
               файл для хранения файлов nоследней версии текстового редактора
ТЕХНИЧЕСКИЕ
ПОДРО6НОСТИ    (таких, как    . docx).   Исnользуя сжатую nanкy, можно сохранить боль­
               ший объем информации в хранилище того же размера. Всегда инте­
               ресно изучать, как другие разработчики управляют своими хранили­
               щами, так как это позволяет находить более эффективные и безоnас­
               ные сnособы хранения данных в своих собственных nриложениях.

    Теnерь, когда вы nредставляете себе общие nринципы nодготовки данных к
хранению на диске, настало время рассмотреть nример. В данном случае стра­
тегия форматирования довольно nроста. Программа nолучает входные данные,
форматирует их для nоследующего сохранения и выводит отформатированную
версию на экран (не сохраняя их nока что).

  1.   Откройте новый блокнот.

       Можете использовать файлы исходного кода                  BPPD _ 16 Storing_ Data _ in
       Files. ipynb (содержит код приложения)              и   BPPD_ 16_FormattedData. ipynb
       (содержит код класса FormatData).

  2.   Введите следующий код в блокноте.

       class FormatData:
          def     init (self, Name="", Age=O, Married=False):
              self.Name = Name
              self .Age = Age
              self.Married = Married

              def      str (self):
                    OutString = "'(0}', (11,     (2)".format(
                       self.Name,
                       self .Age,
                       self .Married)
                    return OutString




                                           ГЛАВА   16    Хранение данных в файлах        339
      Это компактный вариант класса. Обычно в него еще добавляются методы
      доступа (геттеры и сеттеры) и код перехвата ошибок. (Вспомните, что ме­
      тод-геттер обеспечивает чтение данных класса, а метод-сеттер -               их за­
      пись.) Но для целей демонстрации этого вполне достаточно.

      Главный элемент, на который следует обратить внимание,          -     это метод   _
      str_ (),определенным образом форматирующий выходные данные. Строка
      self. Name заключена в одинарные кавычки, а все значения разделены запя­
      тыми. По сути, это стандартный формат CSV (Comma-Separated Value -            зна­
      чения, разделенные запятыми), который широко применяется на всех плат­
      формах, поскольку легко преобразуется в простой текст и не требует сложной
      обработки.

 3.   Сохраните файл под именем BPPD_lб_Forma.ttedData. ipynЬ.
      Чтобы класс можно было использовать в последующих примерах, необходи­
      мо сохранить его на диске, как описывалось в главе      15. Необходимо также со­
      здать файл   BPPD_ lб_FormattedData. ру,      что позволит импортировать класс
      в приложение.

 4.   Откройте еще один блокнот.
 5.   Введите следующий код в блокноте.
      from BPPD_lб_FormattedData import FormatData
      NewData = [FormatData ("Джордж", 65, True),
                  FormatData("Caлли", 47, False),
                  FormatData("Дyг", 52, True))
      for Entry in NewData:
         print (Entry)

      Программа начинается с импорта класса   FormatData из пакета BPPD _ 16
      FormattedData. Этого можно было и не делать, поскольку на данный момент
      пакет BPPD_ lб_FormattedData содержит лишь один класс, но в дальнейшем
      мы планируем расширить его, так что о подобном приеме следует помнить.

      Чаще всего при сохранении данных на диск мы имеем дело с множеством
      записей. В данном случае создается список записей, которые помещаются в
      объект   NewData. Этот объект,   по сути, и есть наш документ. В реальном прило­
      жении данные будут представляться по-другому, но идея в целом та же самая.

      Любое приложение, сохраняющее данные, проходит через так называемый
      цикл вывода. В нашем цикле данные просто выводятся на экран. В последую­
      щих примерах данные будут записываться в файл.

 6.   Щелкните на кнопке Run Cell (Выполнить ячейку).
      Результаты показаны на рис.      16.1. В данном случае все записи   разделены ком­
      бинацией символов возврата каретки и перевода строки, т.е. записи Джордж,
      Салли и Дуг   -   это отдельные строки в файле. Все поля (элементы данных)
      разделены запятыми. Чтобы отличать текстовые поля от других типов данных,
      они взяты в кавычки.




340    ЧАСТЬ 4     Решение сложных задач
  In [ 1 J ·   from BPPD 16    Format'ted~ta     iq>ort FormatData
               NewData .-(F0rmatDa~a.("Дz; рд:а" , б , 'l'rue) ,
                            FormatDat.a ( ''Ca."VIИ" , 4 7 , False},
                            fOrmAtDaф ("Ду"" , ''" • True)]
               tor Entry in NewData:
                  pr int (Entry)

               'Да:ордz',   65, True
               'Салли',    41, False
               'Дуг',   52 , True

                                        Рис.    16. 1. Данные в формате CSV



Создание файла
  Любые данные, с которыми пользователь хочет работать в более чем одном
сеансе, должны сохраняться на каком-то устройстве, предназначенном для по­
стоянного хранения. Создание файла и сохранение в нем данных                              -   это клю­
чевые операции в               Python.       В следующей пошаговой инструкции показано, как
создать код. который будет записывать данные на жесткий диск.

 1.    Откройте файn исходноrо кода BPPD_ 1 б_ Fоrша ttedData. ipynЬ.

        На экране отобразится код, созданный в предыдущем разделе. Мы добавим
        в пакет новый класс, позволяющий сохранить файл на диске.

 2.     Введите сnедующий код в бnокноте.

        import csv

       class Forma tData2:
          def     init (self, Name="", Age =O, Marr ied=False ):
              se lf.Name = Name
              s elf .Age = Age
              self.Married = Married

               def      str (self):
                     OutSt ring = "'{0)', (1 ) , {2)".fo rmat{
                        self. Name,
                        se l f .Age,
                        self .Married)
                     return OutString

               def SaveData{Filename -- 1111 , DataList = []) :
                  with open (Fil e name, "w", пewline='\ n ' ) a s csvfile:
                     DataWriter = csv .wri te r(
                        csv file,
                        de limit e r = ' \n ',
                        quotechar=" ",
                        quoting=csv.QUOTE_NONNUMERIC)



                                                        ГЛАВА      16 Хранение данных в файлах    341
                   DataWriter.write row (DataList )
                   csvfile. cl ose ()
                   рrint("Данные    сохранены'")


            Модуль    csv содержит все необходимое для     работы с файлами   CSV.
            Python   поддерживает огромное количество типов файлов, и существует
            множество сторонних библиотек, предлагающих дополнительную под­
            держку. Если вам нужно работать с каким-то типом файла, который не
3АЛОМНИ!    поддерживается стандартными средствами          Python, вы всегда найдете
            для этого стороннюю библиотеку. К сожалению, не существует универ­
            сального списка поддерживаемых в       Python типов файлов, поэтому ин­
            формацию о том, как в      Python реализована поддержка необходимого
            вам типа файла, придется искать в Интернете. Например, описание всех
            архивных форматов можно найти по следующей ссылке:

            https://docs.python.org /3 /library/ archiving.html
            Описание прочих форматов файлов доступно по следующему адресу:

            https:/ / docs.python.org / 3/ library/ file forma ts.html
            В данном примере используется такой же код форматирования текста,
            как и в классе   FormatData, только теперь добавлен     метод   SaveData ( )
            для сохранения отформатированных данных на диске. Использование
 СОВЕТ      нового класса сигнализирует о новых возможностях. По сути, класс
            FormatData2 является      расширенной версией класса    Format Data.
            Метод    SaveData ()   получает два аргумента : имя файла, используемого
            для хранения данных, и список элементов для записи в файл. Это метод
            класса, а не метод экземпляра. Далее вы увидите, в чем преимущество
            такого подхода. Аргумент     DataList по умолчанию содержит пустой спи­
            сок, чтобы при отсутствии входного значения программа не генерирова­
            ла исключение. Вместо этого будет просто создан пустой выходной файл.
            При желании можно добавить код для обнаружения пустого списка, что­
            бы сообщать пользователю об ошибке.

            Инструкция wi th дает Python указание выполнить ряд действий с кон­
            кретным ресурсом   - открытым файлом csvfile (его именем будет
            TestFile. csv). Аргументы функции open ( ) зависят от способа работы
ЗАПОМНИ!    с файлом. В этом примере файл открывается в режиме записи (обозна­
            чается аргументом      "w"). Аргумент newline означает, что Python должен
            воспринимать управляющий символ         \ n (перевод строки) как символ но­
            вой строки.

           Для записи выводимых данных нужно создать объект записывающего
           устройства. Объект  DataWriter конфигурируется таким образом, чтобы
            csvfile стал файлом вывода, в качестве разделителя записей использо­
            вался символ \n, поля записей разделялись пробелом, а в кавычки бра­
           лись только нечисловые значения. Результаты применения этих настроек



342      ЧАСТЬ 4    Решение сложных задач
     будут приведены позже, а пока предположим, что это именно те результаты,
     которые нам нужны.

     Собственно запись данных осуществляется проще, чем вы думаете. Все, что
     нам нужно,- это вызвать метод DataWriter. writerow (),передав ему спи­
     сок DataList в качестве аргумента. По окончании работы с файлом рекомен­
     дуется его закрывать. При закрытии файла данные сбрасываются на диск (вы­
     полняется подтверждение записи данных). В конце выводится сообщение
     о том, что данные сохранены.


3.   Сохраните файл под именем BPPD_lб_FormattedData. ipynЬ.
     Чтобы созданный класс можно было использовать в последующих примерах,
     сохраните его на диске, как описывалось в главе  15. Необходимо также заново
     создать файл   BPPD _ 16 _FormattedData. ру, с помощью которого класс будет
     импортироваться в приложение. Если не сделать этого, клиентский код не
     сможет импортировать класс     FormatData2. Только убедитесь в том, что преж­
     няя версия файла BPPD_lб_FormattedData.pyyдaлeнa из репозитория кода,
     прежде чем импортировать новую версию (можно также попросить        Notebook
     перезаписать старый экземпляр).

4.   Введите следующий код в блокноте.

     from BPPD 16 FormattedData import FormatData2
     NewData = [FormatData2("Джopдж", 65, True),
                FormatData2("Caлли", 47, False),
                FormatData2("Дyг", 52, True)]
     FormatData2.SaveData("TestFile.csv", NewData)
     Это напоминает пример, созданный в предыдущем разделе. Мы снова соз­
     даем объект  NewData в виде списка. Только теперь информация не отобра­
     жается на экране, а записывается в файл с помощью вызова FormatData2.
     SaveData ().Это одна из тех ситуаций, когда использование метода экзем­
     пляра будет неуместно. В случае метода экземпляра нам пришлось бы сначала
     создать экземпляр   FormatData2,   который не представляет никакого интереса
     для пользователя.


5,   Перезапустите ядро, выполнив команду        Kernelq Restart (Ядроq Переза­
     пуск) или щелкнув на    кнопке Restart the Kernel (Перезапуск ядра).

     Этот шаг необходим для выгрузки предыдущей версии пакета            BPPD 16
     FormattedData.      В противном случае пример не будет выполняться, даже
     несмотря на появление новой версии файла BPPD_lб         FormattedData.py
     в каталоге кода.

6.   Щелкните на кнопке     Run Cell (Выполнить ячейку).
     После завершения работы приложения появится сообщение об успешном со­
     хранении данных. Впрочем, это ничего не говорит нам о самих данных. В пап­
     ке исходного кода появится новый файл с именем     TestFile. csv.   На каждой
     платформе есть приложения, которые по умолчанию открывают такие файлы.



                                  ГЛАВА 16    Хранение данных в файлах        343
      В Windows можно воспользоваться программами Excel и WordPad. На рис. 16.2
      показан результат открытия этого файла в Excel, а на рис. 16.3 -                                                                               в WordPad.
      В обоих случаях результат совпадает с тем, который был показан на рис. 16.1.




                                                                                                           --
                 ".               Г.~ эвн а я       Вставка        Разметха стран11цы             Формулы                  Данные



                   _)
                            i.    Вырезать
                                                              Calibri                   • 11       .   А •       А
                                                                                                                     .
                           -;.!   Коn11роватъ       •
               Бстав11тъ
                            .J Формат по образцу
                        6~·фер_ оом• на_
                                                               ж     к         ~   .
                                                                                   Шр11·~
                                                                                                  ~-
                                                                                                         - • А       .
                                                                                                                           -=
                            Al                                          fx         'Джордж ',      65, True
                                                               т
                                                А                                  в                                       с

                  1        1      'джорджj, 65, True
                  2               'Салли' 1                   47 False 1


                  з               'Дуг',                52, True

                               Рис.      16.2.      Отображение данных в Ехсе/




  о                                                                                                                                             ~K~"ltHi
                 ж к ~ .ь. х. х' ,,1 • д                 ·    li :;;    ~ =         Г    Изобрi> tH~~ Р14С}'\'40К Дifi 11
                                                                                                           Pt11nt
                                                                                                                                BCfillC.i
                                                                                                                         врtм~ о61't1СТ1
                                                                                                                                                     Вы6рi~   ICt
                                                                            ...,                         8 ••

                                  З · •·2 • 1 ·l · 1 · е · •                            ' · 2 · 1 . 3 . 1 . 4. 1                    S·      1    ·   б   ·1·7·




                                                                           ' Дж ор дж ' ,          65 , True
                                                                           ' Са лли ',            47 , False
                                                                           ' Д уг ' ,          52 , True


                           Рис. 16.З. Отображение данных в                                       WordPad



Чтение содержимого файла
  На данном этапе информация содержится на жестком диске. Там она в безо­
пасности, но пока бесполезна для пользователя, поскольку скрыта. Чтобы ото­
бразить данные, нужно сначала загрузить их в память. Ниже демонстрируется,
как прочитать данные с жесткого диска и отобразить их на экране.



344    ЧАСТЬ 4     Решение сложных задач
1.   Откройте ранее сохраненный файn BPPD_lб_Forшa.ttedData. ipynЬ.

     На экране отобразится код, созданный в разделе "Создание содержимого для
     долговременного хранения': В этом примере мы добавим в пакет новый класс,
     позволяющий прочитать файл с диска.

2.   Введите сnедующий код в бnокноте.

     import csv

     class FormatDataЗ:
        def     init (self, Name="", Age=O, Married=False) :
            self.Name = Name
            self.Age = Age
            self.Married = Married

        def      str (self):
              OutString = "'{0}', {1}, {2}".format(
                 self .Name,
                 self.Age,
                 self .Married)
              return OutString

        def SaveData(Filename - "" , DataList = []) :
           with open(Filename, "w", newline='\n') as csvfile:
              DataWriter = csv.writer(
                 csvfile,
                 delimi ter=' \n',
                 quotechar=" ",
                 quoting=csv.QUOTE NONNUMERIC}
              DataWriter.writerow(DataList)
              csvf ile. close ()
                 рrint("Данные   сохранены!")


        def ReadData(Filename = ""):
           with open(Filename, "r", newline='\n') as csvfile:
              DataReader = csv.reader(
                 csvfile,
                 delimiter="\n",
                 quotechar=" ",
                 quoting=csv.QUOTE NONNUMERIC)
              Output = []
              for Item in DataReader:
                 Output.append(Item[O])
              csvfile. close ()
                 рrint("Данные прочитаны!")
                 return Output
     Файл открывается для чтения той же функцией       open (),что   и для записи. Раз­
     ница лишь в том, что вместо аргумента       "w" ("write" -   запись) указывается


                                    ГЛАВА 16    Хранение данных в файлах          345
             аргумент" r"     ("read" -   чтение). Остальные аргументы одинаковы идей­
             ствуют так же.

             Важно помнить, что СSV-файл содержит простой текст с разделителями.
             При загрузке данных в память необходимо подготовить соответствую­
             щую структуру Pythoп. В этом примере мы начинаем с пустого списка
ЗАПОМНИ!     Output.
             В файле содержатся три записи, разделенные управляющим симво­
             лом \n. Все записи считываются в цикле      for. Обратите внимание на нео­
             бычное использование выражения          Item [О J. В процессе чтения записей
             Python трактует нефинальные записи (те, которые не являются последни­
             ми в файле) как два элемента списка. Первый элемент содержит данные,
             а второй пуст. Нам нужен только первый элемент. Все данные добавляют­
             ся в переменную      Output,   в результате чего формируется полный список
             записей, содержащихся в файле.

             Как уже упоминалось, по окончании работы с файлом следует закрыть
             его. Метод выводит сообщение об успешном получении данных и воз­
              вращает список    Output    вызывающему коду.

       3.    Сохраните файл под именем BPPD_ 16_ Forma ttedDa ta. ipynЬ.

              Чтобы созданный класс можно было использовать в последующих при­
             мерах, сохраните его на диске, как описывалось в главе 15. Необходимо
             также заново создать файл       BPPD_ lб_FormattedData. ру,    с помощью ко­
             торого класс будет импортироваться в приложение. Если не сделать это­
              го, клиентский код не сможет импортировать класс FormatDataЗ. Только
             убедитесь в том, что прежняя версия файла      BPPD 16 FormattedData. ру
             удалена из репозитория кода, прежде чем импортировать новую версию.

       4.     Введите следующий код в блокноте.

              from BPPD 16 FormattedData import FormatDataЗ
              NewData = FormatDataЗ.ReadData("TestFile.csv")
              for Entry in NewData:
                 print(Entry)
              Программа начинает работу с импорта класса FormatDataЗ. Затем
              создается список      NewData,   возвращаемый методом FormatDataЗ.
              ReadData   ().Как и в предыдущем примере, это метод класса, что позво­
             ляет сократить и упростить код. Далее выполняется цикл        for для   отобра­
              жения содержимого списка        NewData.
       5.     Перезапустите ядро и щелкните на кнопке               Run Cell   (Выполнить
              ячейку).

              Результат выполнения программы можно увидеть на рис.             16.4. Он ана­
              логичен результату, показанному на рис.      16.1,   при том что данные сна­
              чала были записаны на диск, а затем прочитаны обратно. Именно так и
              должны работать приложения, осуществляющие чтение и запись данных.



346        ЧАСТЬ 4   Решение сложных задач
      После считывания данные должны быть получены в таком же виде, в каком
      они были на момент их записи на диск. В противном случае приложение рабо­
      тает некорректно, внося неконтролируемые изменения в данные.




                      Чтение содержимого файла

          In [9]:     from BPPD_lб_FormattedData irnport FormatDat aЗ
                      NewData = FormatDataЗ.ReadData(" TestFile.csv" )
                      for Entry in NewData:
                         print (Entry)

                      Данные    прочитаны!
                       'ДЖорд:ж ' , 65 , True
                       ' Салли ',  47, False
                       'Дуг',   52 , True

                     Рис.   76.4. Данные приложения после обработки



Изменение содержимого файла
  Некоторые разработчики считают, что изменение файла            -    это сложная за­
дача. Она может стать таковой, если рассматривать ее как единую операцию.
Но в действительности это три последовательные операции:

 1)   считывание содержимого файла в память;
 2)   изменение представления данных в памяти;
 3)   запись полученного содержимого в долговременное хранилище.

  Чаще всего второй этап дробится на несколько шагов. В процессе модифи­
кации данных приложение может выполнять некоторые или все из нижепере­

численных действий:

           ))   отображение данных на экране;

           ))   добавление данных в список;

           ))   удаление данных из списка;

           ))   внесение изменений в существующие данные, что может быть реа­
                лизовано путем добавления новой записи с измененными данными
                и удаления старой записи.

  До сего момента мы сталкивались почти со всеми операциями, перечислен­
ными в этих списках, кроме одной. Мы осуществляли чтение и запись файла,
добавляли данные в список и отображали их на экране. Единственное, что мы
еще не делали,   -     не удаляли данные из списка . Изменение данных обычно


                                        ГЛАВА 16   Хранение данных в файлах      347
реализуется в два этапа: сначала на основе старой записи создается новая за­
пись, а после ее добавления в список старая запись удаляется.

               Не стоит полагать, будто все эти действия выполняются в каждом
               приложении. К примеру, программа-регистратор никогда не удаляет
               и не изменяет имеющиеся записи, а только создает новые записи.
 ЗАЛОМНИI
               Приложение электронной почты позволяет создавать новые письма
               и удалять старые, но не изменять полученные или отправленные.

               С другой стороны, в текстовом редакторе реализуются все вышеу­
               помянутые операции. Все это зависит исключительно от типа созда­
               ваемого приложения.


   Важно отделить пользовательский интерфейс от тех действий, которые к
нему не относятся. В следующем примере наглядно показано, что именно нуж­
но отделить от пользовательского интерфейса, чтобы внести изменения в файл,
созданный в разделе "Создание файла". Вы увидите, каким образом выполня­
ются операции чтения, модификации и записи файла в процессе его обновле­
ния. Операция модификации предусматривает добавление, удаление и изме­
нение данных. Чтобы пользователь мог выполнять приложение неоднократно,
обновления записываются в другой файл.

  1.   Введите следующий код в блокноте.

       from BPPD 16 FormattedData import          FormatDataЗ
       import os.path

       if not os.path.isfile("TestFile.csv"):
             рrint("Выполните   пример,   в   котором создается файл   TestFile.csv 1 ")
             quit ()

       NewData = FormatDataЗ.ReadData("TestFile.csv")
       for Entry in NewData:
          print(Entry)

       рrint("\r\nДобавление записи для Гарри.")
       NewRecord = "'Гарри', 23, False"
       NewData.append(NewRecord)
       for Entry in NewData:
          print(Entry)

       print("\r\nYдaлeниe записи Дуга.")
       Location = NewData.index("'Дyг', 52, True")
       Record = NewData[Location]
       NewData.remove(Record)
       for Entry in NewData:
          print(Entry)


348         ЧАСТЬ 4    Решение сложных задач
           рrint("\r\nИзменение    записи Салли.")
           Location = NewData.index("'Caлли', 47, False")
           Record = NewData[Location)
           Split = Record.split(",")
           NewRecord = FormatDataЗ(Split[O].replace("'", ""),
                                    int(Split[l)),
                                    bool (Split (2)))
           NewRecord.Married = True
           NewRecord.Age = 48
           NewData.append(NewRecord. str ())
           NewData.remove(Record)
           for Entry in NewData:
              print(Entry)

           FormatDataЗ.SaveData("ChangedFile.csv",      NewData)
           Пример содержит достаточно много кода. Сначала проверяется наличие
           файла   TestFile. csv. Такого   рода проверки всегда нужно выполнять
           при работе с существующими файлами. В данном случае мы не создаем
           новый файл, а лишь обновляем существующий. При отсутствии файла
           приложение завершает работу.

           Далее мы загружаем данные в список      NewData.   Этот фрагмент аналоги­
           чен тому, что мы уже рассматривали ранее.

           В главе   13 мы познакомились с функциями для работы со списками.
           В этом примере мы вновь прибегнем к ним. Функция        append ()   добавля­
           ет новую запись в список   NewData. Только учтите,   что данные добавляют­
ЗАПОМНИ!   ся в виде строки, а не объекта FormatDataЗ. На диске данные хранятся
           в виде строк и в таком же виде считываются обратно. Можно либо до­
           бавить новые данные в виде строки, либо создать объект FormatDataЗ
           и затем использовать метод      str   ().
           Следующий шаг заключается в удалении записи из списка        NewData. Для
           этого необходимо сначала найти нужную запись. Подобное действие
           можно выполнить и вручную, ведь у нас всего четыре записи (напомним,
           что список   NewData теперь включает запись для    Гарри). Но когда записей
           много, поиск записей лучше выполнять с помощью функции              index ().
           Она возвращает число, соответствующее позиции записи в списке. Это
           число мы используем для выборки самой записи. Полученную запись
           можно удалить с помощью функции       remove ().
           Код, связанный с изменением записи Салли, кажется пугающим, но в ос­
           новном он посвящен обработке строк, которые хранятся на диске. Из­
           влекаемая из списка   NewData запись представляет собой единую строку,
           содержащую все три значения. Функция      spli t ( ) возвращает список,
           содержащий три строковых элемента, но этого недостаточно. К тому же
           имя Салли заключено как в двойные, так и в одинарные кавычки.



                                   ГЛАВА   16 Хранение данных в файлах              349
      Самый простой способ управления записью                       -     создание объекта    Format
      DataЗ и занесение в него содержимого строкового списка. Это означает уда­
      ление из имени лишних кавычек, преобразование второго значения в тип                          int
      и преобразование третьего значения в тип                    bool.   Класс FormatDataЗ не со­
      держит методов доступа, поэтому мы изменяем поля                        Married   и   Age   напря­
      мую. Правильнее было бы воспользоваться методами-сеттерами.

      Далее приложение присоединяет новую запись к списку                        NewData     и удаляет
      из него существующую запись. Обратите внимание на использование метода
      NewRecord.          str   ()   для преобразования объекта FormatDataЗ в строку.

      Последнее действие        -    сохранение измененного файла. Обычно данные со­
      храняются в том же файле, но в данном случае мы записываем полученный
      результат в другой файл, что позволяет просмотреть как старые, так и новые
      данные.

 2.   Щелкните на кнопке            Run Cell   (Выполнить ячейку).

      На рис.   16.5 показаны результаты работы программы. После каждого этапа
      программа выводит список записей, что позволяет следить за изменением
      списка    NewData. Это полезная          методика отладки. Разумеется, код, выводящий
      информацию на экран, следует удалить перед созданием финального релиза.


                                данные     прочитаны!
                                ' ДЖордж ',    65 , True
                                ' Салли ',    47 , False
                                ' Дуг •,   52 , True

                                Добавление       записи     для    Гарри.
                                ' ДЖордж ',  65 , True
                                ' Салли ', 47, False
                                ' Дуг ', 52 , True
                                'Гарри ', 23 , False


                                Удаление       записи    Дуга .
                                ' ДЖордж ',     65 , True
                                ' Салли ',     47 , False
                                ' Гарри ',     23 , False

                                И зменение      записи    Салли .

                                ' ДЖордж ',     65 , True
                                ' Гарри ',     23 , False
                                ' Салли ',     48 , True
                                Данные     сохранены!



           Рис.   16.5.   Программа пошаzово отображает все изменения


 3.   Откройте файл Chanqed.File.               csv в соответствующем редакторе.
      Содержимое файла, открытое в программе                  WordPad, показано на рис. 16.6.




350    ЧАСТЬ 4      Решение сложных задач
                           о                      Cour1er Ne w

                       Вставить                   Ж К           :!     ak        Х, Х '       ,,,J • Д .             Абзац Встаsить Пpasr.a


                       Б

                   '   ~   '    1 '   1 '   1 '   2 '   1 '   3 '    1 '   4 '   1 '   5 '   1 '   6 '   1 '   7 '   1 '   8 '   1 '   9 '   '1:1'   1 '




                               ' ДЖордж ',               65, True
                               ' Гарри ',               23 , False
                               ' Салли ',               48 , True




                               Рис.     16.6. Содержимое файла ChangedFile. csv



Удаление файла
   В предыдущем разделе демонстрировалось, как добавлять, удалять и изме­
нять записи в файле. Ниже будет показано, как удалить ненужный файл.

        1.      Введите следующий код в блокноте.

                import os
                os. remove 1"ChangedFile. csv" 1
                print("Фaйл удален!")


                Все довольно просто. Для удаления файла вызовите функцию
                os. remove                  (),указав имя файла и путь к нему (если файл находится в те­
                кущем каталоге, то путь можно не указывать). Есть еще несколько функ-
вниМАНИЕJ       ций, связанных с удалением файлов и каталогов.

            •   os. rmdir                   ().Удаляет заданный каталог. Каталог должен быть пустым,
                иначе          Python выдаст сообщение об исключении.
            •   shutil. rmtree                          ().Удаляет заданный каталог, включая все подкаталоги
                и все файлы. Эта функция особенно опасна, поскольку удаляет все под­
                ряд без проверки                              (Python предполагает, что пользователь отдает отчет
                в своих действиях). Проявляйте особую осторожность, чтобы не потерять
                важные данные.


       2.       Щелкните на кнопке Run Cell (Выполнить ячейку).
                Появится сообщение Файл удален!. Заглянув в каталог, в котором изна­
                чально находился файл                                      ChangedFile. csv,                               вы увидите, что этого файла
                там уже нет.




                                                                           ГЛАВА             16      Хранение данных в файлах                              351
Глава         17
Отправка сообщений
                                           v
электроннои почть1


 В ЭТОЙ ГЛАВЕ •..

 >> Последовательность событий при отправке
     электронной почты

 »   Создание приложения электронной почты

 »   Тестирование приложения электронной почты




в
        этой главе рассматривается процесс рассылки электронных писем
        с использованием   Python.   Вы сможете понять, что происходит в про­
        цессе дистанционного общения. Несмотря на то что глава посвящена
электронной почте, в ней излагается универсальный материал, который мож-
но применять для решения других задач. Например, при работе с внешними
службами часто требуется создавать пакеты того же типа, что и для электрон­
ной почты. Таким образом, информация, изложенная в этой главе, поможет вам
создавать самые разные коммуникационные приложения.

     Электронная почта была фактически смоделирована на основе реальной по­
чты. Первоначально термин "электронная почта" использовался для любого
вида передачи электронных документов, и в некоторых приложениях отправи­

тель и получатель должны были находиться в сети одновременно. Это привело
к тому, что в Интернете появилась масса невразумительной информации о про­
исхождении и развитии электронной почты. В данной главе электронная почта
рассматривается в том виде, в каком она существует сегодня,   -   как механизм

обмена документами различных типов.
   Примеры этой главы рассчитаны на использование сервера             SMTP (Simple
Mail Transfer Protocol -    простой протокол передачи почты). Если этот термин
вам незнаком, обратитесь к приведенной ниже врезке. Исходный код примеров
этой главы находится в файле     BPPD_ 1 7_ Sending_an _ Ernail. ipynb (см. введение).


   SMTP (ПРОСТОЙ ПРОТОКОЛ ПЕРЕДАЧИ ПОЧТЫ)

   Имея дело с электронной почтой, вы будете постоянно встречать упоминание
   SMTP. Конечно, этот термин звучит довольно загадочно, но разбираться в тех­
   нических деталях вовсе не обязательно, достаточно лишь знать, для чего при­
   меняется данный протокол. С другой стороны, полезно немного разобраться
   в принципах работы SМТР-сервера, чтобы не воспринимать его на уровне
   "черного ящика'; который принимает письмо от отправителя и пересылает
   получателю. Рассмотрим отдельные компоненты, образующие аббревиатуру
   SMTP, начав с конца.
   •   Protocol (Протокол). Это стандартный набор коммуникационных пра­
       вил. Работа с электронной почтой требует соблюдения общепринятых
       правил, в противном случае почтовая система станет ненадежной.

   •   Mail Transfer (Передача почты). Электронные документы пересылаются
       из одного места в другое почти так же, как письма между почтовыми отде­

       лениями. В случае электронной почты процесс передачи основан на корот­
       ких командах, которые ваше почтовое приложение выдает SМТР-серверу.
       Например, команда МAIL     FROM сообщает серверу имя отправителя      элек­
       тронной почты, а команда    RCPT то указывает, куда ее отправлять.
   •   Simple (Простой). Означает, что доставки почтовых отправлений выполня­
       ется с наименьшим количеством возможных усилий. Это позволяет повы­
       сить надежность процесса в целом.


   Если вы изучите правила передачи информации, то обнаружите, что они вовсе
   не такие простые. Например,   RFCl 123 -   это стандарт, который определяет, как
   должны работать интернет-хосты       (http://www. faqs. org/rfcs/rfcll23.
   html).   Подобные правила лежат в основе многих интернет-технологий, что
   объясняет, почему большинство из них работает примерно одинаково (несмо­
   тря на внешние различия).

   Другой стандарт,   RFC2821, описывает, каким образом в SMTP реализуются пра­
   вила, описанные в    RFC1123 (http://www.faqs.org/rfcs/rfc2821.html).
   Иными словами, существует множество всевозможных правил, написанных на
   языке, который понятен лишь узкому кругу специалистов (и то не всегда). Если
   хотите получить более внятное объяснение принципов работы электронной
   почты, обратитесь по адресу   https: / /ru. bmstu. wiki/SMTP_ (Simple _ Mail
   Transfer Protocol).


354     ЧАСТЬ 4    Решение сложных задач
Что происходит при отправке
                       v
эnектроннои почты

  Электронная почта стала настолько надежной и обыденной, что большин­
ство людей даже не представляют, какое это чудо. В сущности, то же самое
можно сказать и о реальной почтовой службе. Если задуматься, то вероятность
того, что одно конкретное письмо будет доставлено именно туда, куда нужно,
кажется мизерной. Но на самом деле это не так. И электронная почта, и ее фи­
зический эквивалент имеют несколько общих особенностей, которые резко по­
вышают их надежность. В следующих разделах объясняется, что происходит,
когда вы пишете электронное письмо, щелкаете на кнопке Отправить и письмо
доставляется получателю. Вы удивитесь тому, сколько там всего интересного.


Структура электронного письма
  Лучше всего рассматривать электронную почту как ее физический аналог.
Когда вы пишете письмо, вам нужны как минимум две бумажки: первая               -
само письмо, вторая    -   конверт. Если почтовая служба работает честно, то со­
держимое письма никогда не просматривается никем, кроме получателя. То
же самое можно сказать и об электронной почте. Она содержит следующие
компоненты.


            ))   Сообщение. Содержимое электронного письма, которое факти­
                 чески состоит из двух частей.

                 •   Заголовок. Включает тему, список получателей и другие атрибу­
                     ты, такие как срочность сообщения.

                 •   Тело. Фактическое сообщение. Может быть представлено в фор­
                     мате простого текста или    HTML   и содержать вложенные доку­
                     менты.

            ))   Конверт. Контейнер для сообщения. Содержит информацию об от­
                 правителе и получателе так же, как и конверт, пересылаемый обыч­
                 ной почтой. Только на него не клеится почтовая марка.

  При работе с электронной почтой вы создаете сообщение с помощью почто­
вого приложения. В процессе конфигурирования приложения вы также задаете
информацию о своей учетной записи. После щелчка на кнопке Отправить вы­
полняются следующие действия.

 1.   Приложение электронной почты упаковывает ваше сообщение, содержащее
      заголовок, в конверт, который включает в себя информацию как об отправи­
      теле, так и о получателе.




                     ГЛАВА    17   Отправка сообщений электронной почты        355
 2.   Приложение электронной почты использует информацию учетной записи,
      чтобы связаться с SМТР-сервером и отправить сообщение получателю.

 3.   SМТР-сервер считывает только ту информацию, которая найдена в конверте
      сообщения, и перенаправляет вашу электронную почту получателю.

 4.   Приложение электронной почты получателя подключается к локальному сер­
      веру, загружает электронную почту и отображает сообщение пользователю.

   В действительности все происходит немного сложнее, чем здесь описано,
но вам главное понять суть. Это примерно то же самое, что происходит с физи­
ческими письмами. В случае обычной почты приложение электронной почты
заменяется отправителем письма на одном конце и получателем письма              -    на

другом. SМТР-сервер заменяется почтовым отделением и работающими в нем
сотрудниками (включая почтальонов). В обоих случаях кто-то пишет письмо,
кто-то его доставляет, а кто-то    -   получает.



Компоненты конверта зnектронноrо сообщения
   Есть разница в том, как сконфигурирован конверт для электронной почты
и как он фактически обрабатывается. Когда вы просматриваете конверт элек­
тронного письма, он выглядит подобно реальному письму в том смысле, что он
содержит адрес отправителя и адрес получателя, т.е. те же самые компоненты,

что и физический конверт. В реальном письме указываются имя отправителя,
его почтовый адрес, город, область и почтовый индекс, и то же самое         -       для
получателя. Эти элементы определяют адрес, по которому почтальон должен
доставить письмо или вернуть письмо, если оно не может быть доставлено.
   SМТР-сервер, обрабатывая конверт электронной почты, должен проанали­
зировать адреса, и здесь аналогия с физическим конвертом начинает немного
нарушаться. Адрес электронной почты содержит совсем не ту информацию,
которую мы привыкли видеть в физическом адресе. Ниже описано содержимое
электронного адреса.


           ))    Хост. Подобен городу и области, указанным на почтовом конверте.
                 Адрес хоста   -   это адрес, используемый сетевой картой, которая
                 физически подключена к Интернету и обрабатывает весь сетевой
                 трафик для этого конкретного компьютера. Пользователь компью­
                 тера может взаимодействовать с различными интернет-ресурсами,
                 но адрес хоста во всех случаях будет одинаков.

           ))    Порт. Напоминает адрес квартиры, указанный на почтовом конвер­
                 те. Он определяет, какая часть почтовой системы должна получить
                 сообщение. Например, SМТР-сервер, обрабатывающий исходящую
                 почту, обычно использует порт 25. В то же время сервер РОРЗ, обра­
                 батывающий входящие сообщения, использует порт       11 О. Браузер,


356    ЧАСТЬ 4    Решение сложных задач
                      как правило, взаимодействует с веб-сайтами через порт       80. Одна­
                      ко для защищенных веб-сайтов (в адресе которых указан протокол
                     https, а не http) используется порт 443. Список типичных портов
                     можно просмотреть по следующему адресу:

                      https://ru.wikipedia.org/wiki/Cпиcoк_пopтoв_TCP и         UDP
             ))       Имя nокаnьноrо хоста. Это комбинация хоста и порта. Например,
                      имя веб-сайта http://www. myplace. com разрешается в адрес
                      55. 225 .163. 40: 80 (где первые четыре числа - это адрес хоста, а
                      номер после двоеточия - порт). Python заботится об этих деталях в
                     фоновом режиме, поэтому вы о них не будете знать.

   Теперь, когда вы получили представление о том, как формируется адрес,
рассмотрим его подробнее.

Хост
   Адрес хоста         -    это идентификатор подключения к серверу. Точно так же,
как адрес на конверте не является фактическим местоположением, так и адрес
хоста не является фактическим сервером. Он просто указывает на местополо­
жение сервера.



            Объект подключения, соответствующий комбинации адреса хоста
            и порта, называется сокетом. С помощью сокета можно получить
            всю информацию, полезную для понимания работы электронной
 ЗАПОМНИ!
            почты. В следующей пошаговой инструкции показано, как узнать
            используемые имена и адреса хостов. Благодаря этому вы начнете
            понимать всю идею конверта электронной почты и адресов, которые
            он содержит.



  1.   Откройте новый бnокнот.
       Можете также воспользоваться файлом исходного кода BPPD _ 1 7             Sending
       an _ Email. ipynb, содержащим           код приложения (см. введение).

 2.    Введите import socket.
       Прежде чем начать работать с сокетами, следует импортировать библиотеку
       сокетов. Она содержит множество интересных функций, которые помогут нам
       увидеть, как работают интернет-адреса.

  3.   Введитерrint (socket. qethostЬyname ("localhost")).
       На экране отобразится адрес хоста. В данном случае вы должны увидеть
       127. О.   О   .1,   поскольку    localhost -   это стандартное имя локального хоста,
       которому всегда соответствует адрес            127. О.   О   .1.
 4.    Введитерrint (socket. qethostЬyaddr                  ("127. О. О .1")) и щеnкните на
       кнопке     Run Cell    (Выпоnнить ячейку).



                           ГЛАВА   17    Отправка сообщений электронной почты          357
       Приготовьтесь к сюрпризу. Результатом работы функции будет кортеж
       (рис.       17.1). Вместо localhost в качестве имени хоста вы увидите имя своего
       компьютера. Имя           localhost - это универсальное обозначение локально­
       го компьютера, но если вы указываете адрес, то получаете имя компьютера.

       Учтите, что имя вашего компьютера будет отличаться от имени, показанного
       на рис.       17.1.


                   Хост

  In [ 1] :        import socket
                   print (socket.gethostbyname( "localhost" ))
                   print (socket.gethostbyaddr( "127 . 0.0.1 "))

                   127.0.0.1
                   ( ' Маiл', [ ] ,   [ ' 127. О.   О   . 1 ' ])


  In [2]:          print   (socket.gethostbyname( "www.johIUПuellerbooks.com" ))


                   166.62.109.105


       Рис.   77. 7. Адрес локального хоста соответствует вашему компьютеру

 5.    Введите prin t ( socket. qethos tbyname ( "www. j ohnmuellerbooks.
       com"))         и щеnкните на кнопке                  Run Cell.
       На экране появится результат, показанный на рис.                 17.2. Это адрес   моего сайта.
       Он остается одинаковым, где бы вы ни находились, точно так же, как и адреса
       почтовых отправлений. Почтовая служба использует адреса, которые являют­
       ся уникальными во всем мире. То же самое касается и Интернета.



      In (2] :        print (socket .gethostbyname ( "www. joh!Ut\uellerbook5. сот" ))

                      166.62.109.105

       Рис.       77.2. Адреса,   используемые для отправки электронных сообщений,
                                          уникальны в Интернете



порт

  Порт        -     это точка входа на сервер. Адрес хоста указывает местоположение,
а порт определяет, как именно осуществляется досrуп к серверу. Даже если вы
не указываете порт при обращении к адресу хоста, подставляется стандартный
порт. Досrуп всегда предоставляется с использованием комбинации адреса
хоста и порта. В следующей пошаговой инструкции показано, как работать с
портами для получения досrупа к серверу.




358      ЧАСТЬ 4             Решение сложных задач
1.   Введите     import socket.
     Помните о том, что сокет предоставляет адрес хоста и информацию о порте.
     Именно с помощью сокета создается объект подключения, содержащий оба
     элемента.


2.   Введите     socket. getaddrinfo ("localhost", 110)                        и щелкните на кноп­
     ке   Run Cell (Выполнить ячейку).
     Первое значение          -   это имя хоста, о котором вы хотите получить информа­
     цию. Второе значение          -   порт на указанном хаете. В данном случае вы запра­
     шиваете информацию о порте             11 О локального хоста.
     Результат показан на рис.  17.3. Выходные данные состоят из двух кортежей:
     один   - для протокола IP версии 6 (IPvб), второй - для протокола IP версии 4
     (1Pv4). Каждый из этих кортежей содержит пять записей, о четырех из которых
     вам действительно не нужно беспокоиться, потому что они вам, вероятно, ни­
     когда не понадобятся. А вот самая последняя запись,                       ( ' 12 7 . О. о. 1' , 11 О),
     содержит адрес и порт локального хоста.




             Порт

 In [3]:      import socket
              socket .getaddr info( "localhost " , 110 )

 ut..~[!J.    [(<AddressFamily.AF_INET6: 23> , О ,            О,        ('::1', 110 , О , 0)) ,
               (<AddressFamily. AF_INET: 2>, О, 0 ,            ",   ( '1 27.0.0.1 ', 110)))

             Рис. 17.3. Хост localhost поддерживает адреса /Рvб и /Pv4

3.   Введите     socket. getaddrinfo ("johnmuellerbooks. com", 80).
     Результат показан на рис.         17.4. В данном случае предоставляется только адрес
     1Pv4,   которому соответствует порт         80. Метод socket. getaddrinfo () позво­
     ляет определить, можно ли получить доступ к определенному интернет-ре­

     сурсу. Протокол IPvб обеспечивает значительные преимущества по сравне­
     нию с    1Pv4,   но большинство веб-сайтов в настоящее время реализуют только
     поддержку        1Pv4.


 In [ 4] :   socket .get:addrinfo ( " joh'1I!luellerbooks. cvm" ,       ВС )


 о   t[4].   ( (<AddressFamily .AF_INET : 2>,       о,   о,   ",    ( '16 6 . 62 . 109 . 105 ', 80))]

      Рис. 17.4. Большинство веб-сайтов поддерживает только адреса fPv4

4.   Введите     socket. getservbyport (25).
     Результат показан на рис.                  Метод
                                         socket. getservbyport () позволяет
                                        17.5.
     определить, как используется заданный порт. Порт 25 всегда зарезервиро­
     ван для поддержки SMTP. Поэтому, обратившись по адресу 127. О. О .1: 25, вы



                       ГЛАВА      17   Отправка сообщений электронной почты                             359
        запрашиваете доступ к SМТР-серверу на локальном хаете. Другими словами,
        порт обеспечивает доступ к конкретной службе.



                          In [5]:     socket.getservbyport( 25 )

                          Out [5]:    'smtp'

                   Рис.       Стандартные порты служат для доступа
                          17.5.
                          к конкретным службам на каждом сервере

                Некоторые пользователи думают, будто информация о порте пре­
               доставляется всегда. Однако это не совсем так.          Python   предоставит
                порт, заданный по умолчанию, если вы явно не укажете номер пор­
 ЗАЛОМ НИ!
               та, но полагаться на такой порт не стоит, ведь вы не будете точно
                знать, с какой службой он связан. Кроме того, некоторые системы
                используют нестандартные номера портов исходя из соображений
               безопасности. Выработайте привычку всегда указывать номер порта
                и проверять, что работаете с корректным портом.


Имя локального хоста

   Имя хоста       - это текстовая форма адреса хоста. Люди              плохо понимают
смысл адреса       127.0.0.1 (адреса 1Pv6 еще менее понятны). А          вот имя хоста по­
нятно всем. Есть специальная служба, отвечающая за перевод понятных чело­
веку имен хостов в адреса, но в этой книге мы не будем затрагивать данную
тему.

   В разделе "Хост" для определения имени хоста применялся метод                   socket.
gethostbyaddr (),          в качестве аргумента которого задавался сетевой адрес.
Мы также выполняли и обратное преобразование с помощью метода                      socket.
gethostbyname () . В        следующей пошаговой инструкции показано, как работать
с именем хоста.


  1.    Введите    import socket.
  2.    Введите    socket. gethostname () и щелкните на кнопке Run Cell (Выпол­
        нить ячейку).

        Отобразится имя локального компьютера (рис.            17.6). В вашем случае имя на­
        верняка будет другим.


                        In [ 7] :    impo:rt socket
                                     socket.gethostname()

                        Jut[7]:      'Alex'

                Рис.   17.6. Иногда нужно знать имя локального компьютера

360          ЧАСТЬ 4    Решение сложных задач
  3.     Введите socket. qethostЬyname (socket. gethostname ()) и щелкните
         на кнопке   Run Cell.
         Вы увидите IР-адрес локальной системы, как показано на рис.     17.7. Опять   же,
         ваши настройки наверняка отличаются от настроек автора книги, поэтому бу­
         дет отличаться и результат. Данный прием можно использовать в приложе­
         ниях для определения адреса отправителя, когда это необходимо. Поскольку
         здесь не используются жестко заданные значения, прием будет работать
         в любой системе.



  In [ 7] :   sccket. gethoзtbyname        зocket.   gethostname ()

  ~:~         ' 192 . 168 . 0 . 101 '

  Рис.   17.7. По возможности избегайте жестко заданных значений для локальной
                                                системы




Компоненты сообщения
    Конверт электронной почты используется SМТР-сервером для маршрутиза­
ции сообщения. Он не включает собственно содержимое, находящееся в пись­
ме. Многие разработчики путают эти два элемента, потому что письмо также
содержит информацию об отправителе и получателе. Эти сведения появляются
в письме подобно адресной информации, включаемой в деловое письмо, и слу­
жат исключительно для удобства пользователя. Когда вы отправляете деловое
письмо, почтальон не будет вскрывать конверт, чтобы увидеть информацию
об адресе внутри. Для него имеют значение только сведения, указанные на
конверте.


              Из-за того что информация в электронном письме отделена от ин­
              формации, указанной в конверте, злоумышленники могут подделать
              адреса электронной почты. В результате конверт будет содержать
ТЕХНИЧЕСКИЕ
ПОДРОБНОСТИ   корректную информацию об отправителе и получателе, а письмо              -
              нет. (Когда вы получаете электронное сообщение, вы видите само
              письмо, но не конверт         -    он удаляется приложением электронной
              почты.)

    Сообщение электронной почты состоит из нескольких компонентов, как
и конверт. Ниже приведен краткий обзор трех компонентов сообщения.

               ))   Отправитель. Информация об отправителе сообщения. Включает
                    только адрес электронной почты отправителя.

               ))   Получатель. Информация о получателе сообщения. В действи­
                    тельности это список адресов получателей. Даже если вы хотите



                         ГЛАВА 17       Отправка сообщений электронной почты           361
                   отправить сообщение только одному человеку, нужно добавить
                   один адрес в список.


              ))   Сообщение. Информация, которую должен увидеть получатель.
                   Может включать следующие элементы.

                   •   От. Информация об отправителе в текстовом виде.

                   •   Кому. Информация о получателе в текстовом виде.

                   •   Копия. Отображаемые получатели, которым тоже адресуется со­
                       общение, даже если они не указаны как основные получатели.

                   о   Тема. Назначение сообщения.

                   •   Документы. Один или несколько документов, включая тексто­
                       вое сообщение, которые прилагаются к письму.

  Электронные письма могут быть довольно сложными и длинными и вклю­
чать множество дополнительных элементов. Но чаще всего они содержат лишь
вышеперечисленные простые компоненты, требуемые для отправки письма из
почтового приложения. В следующих разделах процесс создания письма и его
компонентов будет описан более подробно.

Структура сообщения
  Можно, конечно, успешно отправить кому-либо пустой конверт, но вряд
ли в этом есть смысл. Чтобы от письма была польза, оно должно содержать
сообщение. В       Python   поддерживается несколько способов создания сообще­
ний. Самый простой и надежный способ           -   воспользоваться средствами   MIME
(Multipurpose Internet Mail Extensions -           многоцелевые расширения интер­
нет-почты).
  Как и многие другие протоколы электронной почты,            MIME    стандартизиро­
ван, поэтому работает одинаково вне зависимости от платформы. Существуют
многочисленные форматы          MIME,                    email .mime, который
                                          включенные в модуль
описан по адресу        https://docs.python.org/3/library/email.mime. html.
Чаще всего вам понадобятся следующие форматы             MIME.
              ))   MIМEApplication. Позволяет отправлять и получать входные
                   и выходные данные приложения.

              ))   MIМEAudio. Содержит звуковой файл.

              ))   MIМEimaqe. Содержит файл изображения.

              ))   МIМЕМul tipart. Позволяет создавать сообщения, состоящие из не­
                   скольких частей, например текстовой и графической.

              ))   MIМEText. Содержит текстовые данные в формате      ASCll, HTML   или
                   другом стандартизированном формате.




362    ЧАСТЬ 4         Решение сложных задач
   Несмотря на то что с помощью           Python   можно создавать сообщения любого
типа, проще всего начать с сообщения, содержащего обычный текст. Отсут­
ствие форматирования позволит нам сосредоточиться на создании самого со­
общения, а не его содержимого. В следующей пошаговой инструкции показа­
но, как создается сообщение электронной почты, которое пока что никуда не
отправляется.


         1.   Введите следующий код в блокноте.

              from email.mime.text import MIMEText
              msg = MIMEText("Hello there")
              msg['Teмa') ="А Test Message"
              msg['Oт') = 'John Mueller <John@JohnMuellerBooks.com>'
              msg['Koмy'] = 'John Mueller <John@JohnMuellerBooks.com>'

              Это простое текстовое сообщение, поэтому для него нужно импортиро­
              вать класс   MIMEText.   Если бы создавался какой-то иной контент, нужно
              было бы импортировать другие классы или же весь модуль      email. mime.
 ЭАЛОМНИ I
              Конструктору    MIMEText () нужно передать текст сообщения. Это тело
              сообщения, которое может быть довольно длинным. В данном случае
              сообщение относительно короткое и представляет собой простое при­
              ветствие.


              Далее мы присваиваем значения стандартным атрибутам. В примере по­
              казаны три универсальных атрибута, которые определяется всегда: тема,
              От и Кому. Два поля адреса, От и Кому, содержат как текстовое имя, так
              и адрес электронной почты. Обязательным является только адрес элек­
              тронной почты.

         2.   Введите     msg. as_string ()   и щелкните на кнопке   Run Cell (Выпол­
              нить ячейку).

              Результат показан на рис. 17.8. Вот как на самом деле выглядит сообще­
              ние. Если вы когда-либо просматривали исходное содержимое сообще­
              ний, создаваемых вашим почтовым приложением, то подобная структура
              будет вам знакома.

              Параметр     Content-Type определяет тип сообщения, которое    в данном
              случае является текстовым. Параметр  charset сообщает о том,   какой на­
              бор символов используется в сообщении, чтобы получатель знал, как их
              обрабатывать. Параметр МIME-Version задает версию       MIME, использу­
              емую для создания сообщения. Наконец, параметр      Context-Transfer-
              Encoding определяет,     каким образом сообщение преобразуется в бито­
              вый поток перед отправкой получателю.




                      ГЛАВА 17     Отправка сообщений электронной почты           363
  ln   1~   :   fr0111 emAil.mi.me.text :l.JllPO.rt MIМETen
                msq •   НIМЕТехt(" Н• 1 :...ht-r~'" )
                ms9[   'Tt!~'   J •    "А   тезt   Нf~5511')е"
                П131iJ( 'Of'J•'.Jo11n MLH~la:r-        Johr1ffJ,.пMuc1l~1в     k. ••   ~·
                msg( •К.ему') -        '.J.~hn M·t~l.Ler <Jchni,Jol":"toШйl   "'rr1ook~. с-:т~·


                mз9 .aз_зtrinQ        ()
                'Content-Type: text/plain; charзet= " u5-asci i " \ nМIМE-Ver5i on : l . O\nContent -Tr-anзfer--En codiл9 : 7Ыt\nТема: А Тезt Кеsза
                9е\nот: John Mueller- <JohлlJJohnмuellerвooic:s.com>\nKowy: John Mueller <JohnlJJohnм:uellerBookз.ccn>\n\nHello tt'W!re'




 Рис.       17.8. Python добавляет служебную                                          информацию, необходимую для создания
                                                                                  сообщения


процесс передачи сообщения
   Выше уже говорилось о том, каким образом конверт используется для пере­
дачи сообщения из одного места в другое. При отправке сообщения необходи­
мо определить способ передачи.                                                   Python           создает сам конверт и выполняет пе­
редачу сообщения, но именно пользователь определяет особенности передачи.
В следующей пошаговой инструкции демонстрируется самый простой подход
к отправке сообщения в                                       Python.          У вас не получится отправить письмо, если вы
не внесете коррективы в соответствии с конфигурацией вашего почтового сер­
вера. Прочитайте приведенную ниже врезку "Знакомство с SМТР-сервером"
для получения дополнительной информации.

                1.      Введите следующий код в блокноте.

                        irnport srntplib
                        s = srntplib. SMTP ( 'localhost')

                        Модуль               smtplib содержит                           все, что нужно для создания и отправки кон­
                        верта сообщения. Первым шагом в этом процессе является создание
                        подключения к SМТР-серверу, который указывается в строковом виде
                        в конструкторе. Если заданного вами SМТР-сервера не существует, при­
                        ложение аварийно завершится, сообщив, что хает отказал в установке
                        соединения.

                2.      Введите s. sendmail ( 'адрес_о!l'праам!l'еля', [ 'в.дрес_пол;уvа!l'е­
                        ля']           , msg. as_string О)                              и щелкните на кнопке      Run Cell (Выполнить
                        ячейку).

                        Чтобы этот код был работоспособным, нужно заменить адрес_ отпра                                                               -
                        вителя и адрес_ получателя реальными адресами. На этот раз не ис­
                        пользуйте описательные имена, поскольку серверу нужен только адрес.
вниМАНие1               Если не указать реальный адрес, будет выдано сообщение об ошибке.
                        Другие возможные причины появления сообщения об ошибке: почто­
                        вый сервер временно отключен от сети, произошел сетевой сбой или
                        случилась какая-то другая нештатная ситуация. Если вы уверены, что
                        ввели корректную информацию, попробуйте отправить сообщение еще
                        раз, прежде чем начинать паниковать. Для получения дополнительной




364             ЧАСТЬ 4                     Решение сложных задач
          информации обратитесь к приведенной ниже врезке"Знакомство с SМТР-сер­
          вером':

          На этом шаге Python создает конверт, упаковывает сообщение электронной
          почты и отправляет его получателю. Обратите внимание на то, что информа­
          ция об отправителе и получателе указывается отдельно от сообщения, кото­
          рое SМТР-сервер не читает.


подтипы сообщений
   Выше рассматривались основные типы сообщений электронной почты.
Если бы электронная почта полагалась только на эти типы, то передавать со­
гласованные сообщения было будет затруднительно. Проблема в том, что одно­
го типа недостаточно. Когда вы отправляете текстовое сообщение, вы должны
знать, что это за текст, прежде чем сможете его корректно обработать. Тек­
стовое сообщение может быть отформатировано как обычный текст или как
НТМL-страница. Вы не узнаете этого, просто прочитав метку типа, поэтому
для сообщений требуется указывать подтип. Тип сообщения              -   текст, а под­
тип   - HTML,       если вы отправляете кому-либо НТМL-страницу. Тип и подтип
разделяются косой чертой, поэтому вы увидите          text/html,   если просмотрите
исходное содержимое сообщения.

               Теоретически количество подтипов не ограничено, если для плат­
               формы определены их обработчики. Но на практике все пользовате­
               ли должны прийти к соглашению о подтипах, иначе обработчики не
 ЗАПОМНИ!
               появятся (если только вы не имеете дело с пользовательским прило­
               жением, для которого обе стороны заранее договорились насчет соб­
               ственного подтипа). Вы сможете найти список стандартных типов
               и подтипов на сайте     http://www. freeformatter. com/mime-types-
               list. html.   Приятной особенностью опубликованной там таблицы
               является то, что в ней приведены стандартные расширения файлов,
               связанные с каждым подтипом, и даны ссылки для получения до­

               полнительной информации.




Создание электронного сообщения
   До сих пор конверт и сообщение рассматривались по отдельности. Теперь
пришло время соединить их и посмотреть, как работает электронная почта.
В следующих разделах будет показано, как создать два сообщения. Первое из
них   -     текстовое, а второе использует форматирование   HTML.    Оба сообщения
должны поддерживаться большинством клиентов электронной почты.



                      ГЛАВА 17    Отправка сообщений электронной почты            365
Работа с текстовым сообщением
  Текстовые сообщения          -   это наиболее эффективный и наименее ресурсо­
емкий способ передачи информации. С другой стороны, в них содержится
меньше всего информации. Да, можно использовать смайлики для выражения
эмоций, но отсутствие форматирования в определенных ситуациях становится
проблемой. Ниже описано, как создать простое текстовое сообщение, исполь­
зуя   Python.
        1.   Введите сnедующий код в бnокноте.

             from email.mime.text import MIMEText
             import smtplib
             msg = MIMEText("Hello There!")
             msg['Teмa'] = 'А Test Message'
             msg['Oт'] = 'SenderAddress'
             msg['Koмy'] = 'RecipientAddress'
             s = smtplib.SMTP('localhost')
             s.sendmail('SenderAddress',
                         ['RecipientAddress' ],
                        msg.as_string())
             рrint("Сообщение      отправлено!")


             Этот пример представляет собой квинтэссенцию всего, что было рассмо­
             трено в главе. Мы впервые свели все вместе. Заметьте, что сначала мы
             создаем сообщение, а затем    -   конверт (как и в реальной жизни).

             Программа выдаст ошибку, если не заменить         SenderAddress       и   Reci
             pientAddress     реальными адресами. Эти записи используются только
             в качестве заполнителей. Как и в примере из предыдущего раздела,
вниМАние1    ошибки могут возникать по разным причинам, поэтому всегда пытайтесь
             отправить сообщение как минимум дважды, если видите ошибку впер­
             вые. Для получения дополнительной информации по этой теме обрати­
             тесь к врезке "Знакомство с SМТР-сервером':

        2.   Щеnкните на кнопке       Run Cell (Выпоnнить ячейку).
             Приложение уведомит о том, что сообщение было отправлено получа­
             телю.



Работа с НТМL-сообщением
      НТМL-сообщение     -    это текстовое сообщение со специальным форматиро­
ванием. В следующей пошаговой инструкции показано, как создать электрон­
ное письмо в формате         HTML   и отправить его.




366      ЧАСТЬ 4     Решение сложных задач
ЗНАКОМСТВО С       SMTP-CEPBEPOM

Если вы попробовали выполнить пример этой главы, не внеся никаких изме­
нений, то, скорее всего, у вас ничего не получилось. Маловероятно, чтобы
имеющийся в вашей системе SМТР-сервер был подключен к сайту         localhost.
Причина, по которой в примерах используется адрес       localhost, заключается
в предоставлении заполнителя, который позже должен быть заменен реаль­
ным адресом в соответствии с конфигурацией конкретной системы.

Для того чтобы пример был работоспособным, нужны SМТР-сервер и реаль­
ная учетная запись электронной почты. Можете установить все программ­
ное обеспечение, необходимое для создания такой среды, в своей системе,
и некоторые разработчики, которые интенсивно работают с почтовыми при­
ложениями, именно так и поступают. В большинстве платформ имеется пакет
электронной почты, доступный для установки, или же можно воспользовать­
ся бесплатной альтернативой     -   открытым пакетом   Sendmail, который можно
скачать по следующей ссылке:

https://downloads.tomsguide.com/SendMail,0301-2037.html
Самый простой способ заставить пример заработать        -   использовать тот же
самый SМТР-сервер, с которым взаимодействует ваше почтовое приложение.
Когда вы конфигурировали приложение электронной почты, вы либо про­
инструктировали его обнаруживать SМТР-сервер, либо задали SМТР-сервер
самостоятельно. Параметры конфигурации вашего почтового приложения
должны содержать необходимую информацию. Где именно находится эта ин­
формация сильно зависит от конкретного приложения, так что сверьтесь с
документацией.

Независимо от того, какой тип SМТР-сервера в конечном итоге будет использо­
ван, в большинстве случаев необходимо иметь учетную запись на этом серве­
ре, чтобы работать с ним. Используйте в примерах адрес вашего SМТР-сервера,
например    smtp. myisp. сот,   и укажите ваш адрес электронной почты для от­
правителя и получателя. В противном случае пример работать не будет.



1.   Введите следующий код в блокноте.

     from email.mime.text import MIMEText
     import smtplib
     msg = MIMEText(
         "<hl>A Heading</hl><p>Hello There </p>", "html")
                                             1


     msg['Teмa'] = 'А Test HTML Message'
     msg['Oт'] = 'SenderAddress'
     msg['Koмy'] = 'RecipientAddress'
     s = smtplib.SMTP('localhost')
     s.sendmail('SenderAddress',

                 ГЛАВА 17   Отправка сообщений электронной почты              367
                                ['RecipientAddress'],
                                msg.as_string())
           рrint("Сообщение                  отправлено!")


                     Это фактически тот же пример, что и пример текстового сообщения
                     в предыдущем разделе. Но обратите внимание на то, что сообщение
                     теперь содержит НТМL-теги. Мы создаем только тело НТМL-сообщения,
                     а не всю страницу. Сообщение содержит заголовок <hl> и абзац <р>.

                     Наиболее важной частью примера является текст, который следует за
                     сообщением. Аргумент                   "html"        изменяет подтип с               text/plain на text/
                     html, давая            получателю понять, что сообщение нужно обрабатывать как
 ЗАПОМНИ!            НТМL-содержимое. Если не внести это изменение, получатель не увидит
                     НТМL-контент.

                2.   Щелкните на кнопке Run Cell (Выполнить ячейку).

                     Приложение уведомит о том, что сообщение было отправлено получа­
                     телю.




Просмотр электронного сообщения
      На данный момент в вашей папке Входящие должно находиться от одного
до трех сообщений, сгенерированных приложением. Чтобы вы могли просмо­
треть сообщения, созданные в предыдущих разделах, ваше почтовое приложе­
ние должно получить их от сервера                                     -   так же, как и любую другую электрон­
ную почту. На рис.                    17.9    показан пример НТМL-версии сообщения.

                                                д   Test НТМl Message • Mess.ige     (НТМLJ




                                                    .~ 029~ . BtQlnn1n                     "~ ~. l4rk. Unrt&d
                                                     "То   M•nagor                                Cattoor1zt •
                                                                                                                  aif>               \
                     Roply   Reply Foiw!td                                   t1o~r   1J.                         franslatf        Zoom
     - · Dtl<te               All                   .)J TeJm f m•ll                           "   follow Up •                ".
 l      О•!Ш                                                                   Mov"               1 )Q~             f·Фt1no       l >O

 ( fron"
 1 ra
 f Се
     Subj•c:t
 1


       А He~нli11g
       Hello Th ere!



                         Рис.       17.9.   НТМL-сообщение содержит заголовок и абзац




368             ЧАСТЬ 4         Решение сложных задач
   Если почтовое приложение позволяет просмотреть источник сообщения, вы
обнаружите, что сообщение содержит ту информацию, которую вы уже видели
ранее. Ничего не поменялось, поскольку сообщение не подвергается никаким
изменениям в процессе передачи получателю.



            Создавать собственное приложение для отправки и получения элек­
            тронной почты неудобно   -   гораздо лучше использовать готовое
            приложение. Целью примеров, приведенных в этой главе, было
 ЗАПОМНИ!
            продемонстрировать гибкость   Python.   При создании собственного
            приложения вы контролируете каждый аспект сообщения.       Python
            скрывает большую часть деталей, давая вам возможность сконцен­
            трироваться на том, как создать и передать сообщение, используя
            корректные аргументы.




                   ГЛАВА 17   Отправка сообщений электронной почты       369
Вели
В ЭТОЙ ЧАСТИ ..•


))   Продолжаем изучать   Python

))   Упрощаем работу с   Python   с помощью утилит


))   Расширяем возможности    Python   с помощью
     библиотек
Глава         18

Десять ценнь1х
ресурсов для
программистов


 В ЭТОЙ ГЛАВЕ ...

 >> Источники дополнительной информации о Python

 >> Создание веб-приложений с помощью Python

 >> Расширение программной среды Python
 >>   Улучшение производительности приложений
      и самих разработчиков




э Python,
        та книга способна дать хороший старт вашей карьере программиста на
               но в какой-то момент вам потребуются дополнительные ресур­
        сы. В данной главе вашему вниманию будут представлены десять по­
лезных ресурсов, которые можно использовать для улучшения своих навыков

программирования. Они помогут вам экономить время и усилия при создании
великолепных приложений      Python.
            Эта глава содержит лишь краткий обзор ресурсов    Python. В Ин­
            тернете имеется огромное количество    документации по Python и
            буквально горы готового кода. Можно написать целую книгу (и не
 ЗАПОМНИ!
            одну), посвященную исключительно библиотекам    Python.   Так что не
            останавливайтесь в своих поисках и относитесь к главе как к началу
            большого пути.
Онnайн-документация                                  Python
   Работая с       Python,    важно знать, что доступно в базовом языке и как его мож­
но расширить для решения других задач. В документации                   Python,   доступной
на сайте     https: / /docs .python. org/3/         (создана для версии 3.7.х на момент вы­
хода книги; со временем может быть обновлена), содержится гораздо больше,
чем просто описание средств языка, которые вы получаете в составе загружае­

мого дистрибутива. Фактически в документацию включено следующее:

               >>       новые функции текущей версии языка;

               »        полноценный учебник по Pythoп;

               >>       полное справочное руководство по библиотекам;
               »        полное справочное руководство по языку;

               »        пошаговая инструкция по установке и конфигурированию Pythoп;

               »        описание способов решения отдельных задач на Python;
               »        справка по установке внешних модулей, выступающих в качестве
                        средств расширения    Python;
               »        справка по распространению пользовательских модулей        Python;
               »        инструкция по расширению Python с помощью С/С++ и внедрению
                        новых функций;

               »        полное руководство для разработчиков на С/С++, которые хотят
                        расширить свои приложения с помощью       Python;
               »        страницы с ответами на часто задаваемые вопросы           (Frequently
                        Asked Questioпs -   FAQ).

              Вся эта информация приведена в простой и доступной форме. В до­
              полнение к привычному оглавлению можно воспользоваться различ­

              ными поисковыми индексами. Например, если нужно найти опре­
 ЗАПОМНИ!
              деленный модуль, класс или метод, можно воспользоваться                 Global
              Module lndex       (глобальный индекс модулей).

   На сайте можно также сообщить о проблемах, возникших при работе с
Python (https: / /docs .python. org/3/bugs. html). Как             и в любом другом языке
программирования, в Python есть ошибки. Обнаружив                  и устранив их, вы помо­
жете сделать Python лучше.

              С документацией можно работать по-разному. В левом верхнем углу
              страницы доступны два раскрывающихся списка. В первом из них
              можно выбрать предпочитаемый язык (на данный момент можно
  СОВЕТ




374         ЧАСТЬ   5    Великолепные десятки
          выбрать английский, французский, японский, корейский и китай­
          ский). С помощью второго списка обеспечивается доступ к доку­
          ментации по более ранним версиям      Python,   включая версию    2.7.



Руководство на сайте                    LearnPython. org
  Существует много прекрасных учебных пособий по            Python,   но в них нет
главного, что предлагается на сайте   LearnPython. org: интерактивности. Здесь
вы можете не только прочитать о различных средствах       Python,   но и опробовать
их самостоятельно в интерактивном режиме.

  Уровень простых примеров вы уже прошли в данной книге. Если вам
интересно, попробуйте теперь освоить более сложные примеры на сайте
LearnPython. org. Они охватывают следующие темы.

           >> Generators (Генераторы). Специализированные функции,          возвра­
               щающие итераторы.

           »   List comprehensions    (Списковые включения). Технология созда­
               ния новых списков на основе существующих.


           >> Multiple function arguments     (Функции с переменным числом
               аргументов). Та же самая идея применительно к методам описыва­
               лась в главе   15.
           »   Regular expressions (Регулярные выражения). Используются для
               создания поисковых шаблонов, используемых, например, при рабо­
               те с телефонными номерами.

           »   Exception handling (Обработка исключений). Данная тема рассма­
               тривалась в главе1О.
           »   Sets (Наборы). Особый вид списка, не содержащий повторяющихся
               записей.

           »   Serialization (Сериализация). Методология хранения данных
               на основе JSON (JavaScript Object Notation - нотация объектов
               JavaScript).
           »   Partial functions (Частичные функции). Методика создания
               специализированных версий функций, которые являются произ­
               водными от более сложных функций. Например, если есть функция
               mul tiply (),которая требует двух аргументов, то для частичной
               функции douЫe () может требоваться только один аргумент, кото­
               рый всегда умножается на 2.




               ГЛАВА   18 Десять ценных ресурсов для программистов                 375
           ))   Code introspection     (Интроспекция). Возможность исследовать
                 классы, функции и ключевые слова, чтобы определить их назначе­
                 ние и возможности.

           ))   Closures   (Замыкания). Функции, которые ссылаются на внешние
                 переменные, объявленные в их области видимости.

           ))    Decorators    (Декораторы). Шаблоны, применяемые для внесения
                 простых модификаций в вызываемые объекты.




Веб-программирование на                           Python
  Эта книга посвящена основам программирования, поэтому мы ориентиро­
вались на настольные приложения в силу их простоты. Тем не менее многие
разработчики специализируются на создании веб-приложений с использовани­
ем Python. Сайт Web Programming in Python (https: / /wiki. python. org /moin/
WebProgramming) поможет вам перейти от настольных к веб-приложениям. На
сайте рассмотрены практически все виды веб-приложений. Учебные пособия
разделены на следующие категории.


           ))    Серверное программирование.

                 •   Разработка серверных фреймворков для приложений.

                 •   Создание скриптов CGI (Common Gateway lnterface -   общий ин­
                     терфейс шлюза).

                 •   Предоставление серверных приложений.

                 •   Разработка систем управления контентом   (Content Management
                     Systems - CMS).
                 •   Разработка методов доступа к данным с помощью веб-служб.

           ))    Клиентское программирование.

                 •   Взаимодействие с браузерами и браузерными приложениями.

                 •   Создание клиентов, основанных на использовании браузеров.

                 •   Разработка методов доступа к данным с помощью веб-служб.

           ))    Дополнительные темы.

                 •   Создание общих решений для интернет-вычислений на основе
                     Python.
                 •   Взаимодействие с системами управления базами данных (СУБД).

                 •   Разработка шаблонов приложений.

                 •   Построение интранет-решений.




376    ЧАСТЬ 5       Великолепные десятки
Дополнительные библиотеки
  На сайте   Pythonware (http: //www.pythonware.com/)          размещены ссылки для
доступа к ряду сторонних библиотек   Python.
  В первую очередь просмотрите ссылку            Downloads    (downloads.effЬot.org). Вы
получите доступ к следующим библиотекам.

             ))   aggdraw. Библиотека, упрощающая создание сглаженных рисунков.
             ))   celementtree. Дополнение       к библиотеке   elementtree,   которое
                  обеспечивает более эффективную и быструю обработку данных
                  XML.
             )) console. Интерфейс для Windows, позволяющий         создавать консоль­
                  ные приложения.


             )) effbot.     Коллекция полезных дополнений и утилит, включая про­
                  грамму чтения новостей EffNews.

             ))   elementsoap.     Библиотека, позволяющая создавать подключения
                  SOAP (Simple Object Access Protocol -    простой протокол доступа к
                  объекту) к провайдерам веб-служб.

             )) elementtidy. Дополнение       к библиотеке   elementtree, которое    по­
                  зволяет создавать более привлекательные и функциональные ото­
                  бражения дерева    XML, чем стандартные средства Python.
             )) elementtree. Библиотека,      которая позволяет взаимодействовать с
                  данными     XML более эффективно, чем стандартные средства Python.
             )) exemaker. Утилита,     которая создает исполняемую программу на ос­
                  нове сценария    Python, чтобы сценарий можно было выполнять так
                  же, как и любое другое приложение.

             ))   ftpparse.    Библиотека для работы с FТР-сайтами.

             ))   grabscreen.    Библиотека для создания экранных снимков.

             ))   imaging.    Предоставляет исходный код для библиотеки изображе­
                  ний Python (Python lmaging Library - PIL), которая позволяет добав­
                  лять возможности обработки изображений в интерпретатор Python.
                  Благодаря исходному коду можно настроить библиотеку PIL под
                  свои потребности.

             )) pil. Двоичные установщики для PIL,        которые упрощают получение
                  нужной инсталляции для системы. (Существуют и другие библиоте­
                  ки на основе   PIL, такие как pilfont, предназначенная для добавле­
                  ния расширенных шрифтовых средств в РIL-приложения.)

             )) pythondoc.       Утилита, предназначенная для создания документа­
                  ции на основе комментариев в коде        Python (работает так же, как
                  JavaDoc).

                  ГЛАВА   18 Десять ценных ресурсов для программистов               377
               »      squeeze.   Утилита, предназначенная для преобразования Руthоn­
                      приложения, содержащегося в нескольких файлах, в одно- или двух­
                     файловый дистрибутив, который будет выполняться интерпретато­
                      ром   Python.
                >>    tkinterЗOOO. Библиотека создания виджетов для          Python, которая
                      включает несколько модулей. Виджеты       -    это фрагменты кода, соз­
                     дающие элементы управления, например кнопки, для графических
                      приложений. Существует ряд надстроек, таких как        wckgraph,   кото­
                      рые помогают добавить в приложение поддержку графики.




Быстрое создание приложений
спомощьюlDЕ
   Интерактивная среда разработки                  (IDE)   помогает создавать приложе­
ния на определенном языке программирования. Редактор                       IDLE (lntegrated
DeveLopment Environment),              входящий в состав   Python,   удобен для выполнения
экспериментов, но через некоторое время его возможностей может оказаться
недостаточно. Например,               IDLE   не предоставляет расширенных функций от­
ладки, к которым привыкли многие разработчики. Кроме того, с помощью
IDLE   создание графических приложений может оказаться непростой задачей.
   Ограничения в    IDLE являются причиной, по которой в книге вместо IDl~E
используется   Jupyter Notebook. Тем не менее возможностей Jupyter Notebook
тоже   порой оказывается недостаточно. Если вы пообщаетесь с 50 разработчика­
ми и   попробуете выяснить, какую IDE они предпочитают, то получите множе­
ство разных ответов. У каждого разработчика есть своя любимая среда разра­
ботки, и его нелегко заставить попробовать что-то другое. Разработчики тратят
много времени на изучение конкретной               IDE   и ее расширение под свои задачи.

              Зачастую заменить ранее выбранную             IDE невозможно, поэтому
               важно попробовать несколько           различных IDE, прежде чем оста­
               новиться на одной из них. (Самая распространенная причина, по
 ЗАПОМНИ!
               которой невозможно перейти на другую              IDE, -    это несовмести-
               мость типов проектов. Вам придется повторно создавать проекты
               каждый раз, когда выбирается другой редактор. Существуют и дру­
               гие причины, список которых можно найти в Интернете.) В статье
               PythonEditors,     доступной по адресу       https://wiki.python.org/
              moin/PythonEditors, приводится обширный перечень IDE, которые
               можно попробовать в работе. В соответствующей таблице приведе­
               ны подробные сведения о каждом редакторе, которые помогут вам
              сразу же исключить некоторые неподходящие варианты.



378         ЧАСТЬ 5    Великолепные десятки
Удобная проверка синтаксиса
  Редактор    IDLE   реализует базовую подсветку синтаксиса, что полезно при
поиске ошибок. Например, если неправильно ввести ключевое слово, то его
цвет не изменится на цвет, используемый для выделения ключевых слов в ва­
шей системе. Увидев, что он не изменился, вы сможете сразу же исправить
ошибку, вместо того чтобы запускать приложение и потом выяснять, что же
пошло не так.

  Среда   Jupyter Notebook    также обеспечивает подсветку синтаксиса и пре­
доставляет расширенные средства проверки ошибок, которые отсутствуют в
стандартной   IDE.   Тем не менее для некоторых разработчиков этого тоже может
оказаться недостаточно, поскольку для просмотра информации об ошибках
придется выполнять ячейки. Многие разработчики предпочитают интерактив­
ную проверку синтаксиса, при которой       IDE   немедленно выделяет ошибку, еще
до того, как разработчик покинет строку с ошибочным кодом.
   Утилита python. vim (http://www. vim. org/ scripts/script. php?script _
id=7 90) обеспечивает улучшенную подсветку синтаксиса, которая упрощает
поиск ошибок в сценарии      Python.   Эта утилита работает как сценарий, что де­
лает ее быстрой и эффективной для использования на любой платформе. Кро­
ме того, можно настроить исходный код утилиты под свои потребности.



Использование                 XML
  В настоящее время расширяемый язык разметки             (XML)    применяется для
хранения данных любых типов в большинстве приложений. Возможно, в ва­
шей системе есть ХМL-файлы, а вы даже не знаете об этом, потому что они
имеют другие расширения. Например, многие файлы              . config,   используемые
для хранения настроек приложения, основаны на         XML.   Так что при написании
приложений на   Python   вы рано или поздно столкнетесь с      XML.
  XML   имеет ряд преимуществ перед другими форматами хранения данных.
Например он не зависит от платформы. Вы сможете использовать               XML   в лю­
бой системе, и созданный на компьютере файл можно будет прочитать на лю­
бом другом компьютере. Благодаря тому что          XML   не зависит от платформы,
он применяется во многих технологиях, например в веб-службах. Кроме того,
XML   относительно прост в изучении, а поскольку это текстовый формат, воз­
никающие проблемы можно достаточно легко устранять.




                ГЛАВА 18    Десять ценных ресурсов для программистов              379
                Чтобы освоить    XML,       можно воспользоваться учебным пособием,
                доступным на сайте WЗSchools по адресу ht tp: / /www. wЗschools.
                com/xml/default .ASP. Некоторые разработчики пренебрегают изу­
ЗАПОМНИ!
                чением   XML,   в потом обнаруживают, что не в состоянии разобрать­
                ся в специфичном коде        Python,   предполагающем наличие навыков
                по созданию базовых ХМL-файлов. Сайт WЗSchools удобен тем, что
                процесс обучения разбивается на главы, так что можно осваивать
                XML    постепенно:

                 ))   базовый курс   XML;
                 ))   валидация файлов XML;

                 ))   использование   XML совместно с JavaScript;
                 ))   обзор технологий, связанных с     XML;
                 ))   использование расширенных методик        XML;
                 ))   работа с примерами XML, чтобы увидеть XML в действии.

     После того как вы ознакомитесь с основами, вам понадобится ресурс, где
демонстрируется совместное использование                XML    и   Python.   Одним из лучших
мест, где можно найти соответствующую информацию, является сайт                      Tutorials
оп   XML Processing with Python,        который доступен по следующему адресу:

https://wiki.python.org/moin/Tutorials%20on%20XML%20processing
%20with%20Python

     Благодаря этим двум ресурсам вы сможете быстро получить необходимые
знания по       XML, что    позволит вам начать создавать приложения              Python,   ис­
пользующие       XML.


     ВОСПОЛЬЗУЙТЕСЬ РЕСУРСАМИ WЗSCHOOLS


     Одним из самых популярных веб-ресурсов, используемых для изучения ком­
     пьютерных технологий в Интернете, является WЗSchools               (www. wЗschools.
     сот). Этот сайт поможет вам освоить все веб-технологии, необходимые для
     создания любого современного приложения, которое только можно себе
     представить. На этом ресурсе доступны следующие темы:

     •   HTML;
     •   CSS;
     •   JavaScript;
     •   SQL;
     •   JQuery;


380        ЧАСТЬ 5     Великолепные десятки
   •   РНР;

   • XML;
   •   ASP.NET.
   Следует понимать, что это лишь отправная точка для разработчиков Python.
   Используйте материалы сайта WЗSchools, чтобы получить представление о ба­
   зовой технологии, а затем обратитесь к ресурсам, специфичным для Pythoп.




Устранение типичных ошибок,
присущих новичкам

   Абсолютно все допускают ошибки при программировании, даже крутые
профессионалы с более чем 30-летним опытом. Конечно, никто не любит оши­
баться и тем более признавать это, но от ошибок не застрахован никто. Поэ­
тому не стоит слишком переживать, допустив ошибку. Просто исправьте ее
и двигайтесь дальше.

              Есть разница между непредсказуемой ошибкой и ошибкой типич­
              ной, которую можно и нужно было избежать. Безусловно, даже про­
              фессионалы иногда допускают ошибки, которых можно избежать,
 ЗАПОМНИ!
              но это гораздо менее вероятно, поскольку они уже сталкивались с

              такого рода ошибками и приучили себя не допускать их. Вы сможе­
              те получить преимущество перед конкурентами, научившись избе­
              гать ошибок новичков, о которых каждый должен знать. Для этого
              просмотрите следующий ресурс из двух частей.

               ))   Python: Соттоп Newble Mistakes, Part 1.
                    http://Ьlog.amir.rachum.com/Ьlog/2013/07/06/
                    python-common-newbie-mistakes-part-1/
               ))   Python: Соттоп Newble Mistakes, Part 2.
                    http://Ьlog.amir.rachum.com/Ьlog/2013/07/09/
                    python-common-newbie-mistakes-part-2/

   Для новичков в       Python   доступно множество других сайтов, но указанные
ресурсы достаточно краткие и простые для понимания. Вы сможете ознако­
миться с ними за относительно короткое время, сделать для себя выводы и на­
чать наконец избегать тех неприятных ошибок, которых не следует допускать.




                    ГЛАВА 18 Десять ценных ресурсов для программистов         381
Знакомство с              Unicode
  В этой книге мы постарались обойти стороной непростую тему                    Unicode,
но вы неизбежно с ней столкнетесь, когда начнете создавать серьезные прило­
жения. К сожалению, до сих пор не существует единого определения                 Unicode,
поскольку работа над стандартом продолжается непрерывно.
  Вы столкнетесь с множеством вариантов             Unicode,    когда начнете работать с
многоязычными приложениями           Python,   поскольку для каждого языка стандар­
тизируется своя таблица символов. Если хотите изучить             Unicode,   обратитесь к
следующим ресурсам.


           ))   The Absolute Minimum Every Software Developer Absolutely, Positively
                Must Know About Unicode and Character Sets (No Excuses!).
                http://www.joelonsoftware.com/articles/Unicode.html
           ))   The Updated Guide to Unicode оп Python.
                http://lucumr.pocoo.org/2013/7/2/the-updated-guide- to-
                unicode/
           ))   Python Encodings and Unicode.
                http://eric.themoritzfamily.com/python-encodings-an d-
                unicode.html
           ))   Explain it like /'т five: Python and Unicode?
                http://www.reddit.com/r/Python/comments/
                lg62eh/expla1n it 11ke_1m_f1ve_python_and unicode/
           ))   Unicode Pain.
                http://nedbatch26elder.com/text/unipain.html



Учимся создавать быстродействующие
приложения

   Ничто так не раздражает пользователя, как медленное приложение. В по­
добном случае велика вероятность того, что с приложением вообще никто не
будет работать. Низкая производительность является основной причиной про­
вала приложений в корпоративных средах. Организация может потратить кучу
денег на создание красивого приложения, которое делает все что угодно. но

оно в итоге окажется никому не нужным, поскольку работает слишком медлен­
но или имеет другие серьезные проблемы, связанные с производительностью.



382   ЧАСТЬ 5     Великолепные десятки
            Производительность приложения   -   это сочетание его надежности,
            безопасности и скорости работы. Этот "треугольник производитель­
            ности" описывается в блоге автора по следующему адресу:
 ЗАПОМНИ!

            http://Ьlog.johnmuellerbooks.com/2012/04/16/considering-the­
            performance-triangle/

   Многие разработчики фокусируются только на быстродействии и в итоге
не достигают поставленных целей. Важно рассмотреть вес аспекты исполь­
зования ресурсов вашим приложением и убедиться в том, что применяются
оптимальные приемы программирования.

   Доступны многочисленные ресурсы, которые помогут вам изучить вопро­
сы производительности применительно к приложениям         Python.   Рекомендую
прочитать статью   "PythonSpeed Performance Tips",   доступную по следующему
адресу:


https://wik1.python.org/moin/PythonSpeed/PerformanceTips




                ГЛАВА 18   Десять ценных ресурсов для программистов        383
Глава        19

Десять утилит,
улучшающих
работу с                           Python
 В ЭТОЙ ГЛАВЕ ...

 >> Отладка, тестирование и развертывание приложений

 »   Ведение документации и управление версиями
     приложений

 »   Написание кода приложения

 » Работа в интерактивной среде




р
      ython, ~ак и бол:шинство яз:1ков программирования, располагает се­
       рьезнои внешнеи поддержкои, которая доступна в виде различных ути­

      лит. Утилита     -   это любая программа, которая расширяет возможности
Python   в плане создания приложений. Таким образом, отладчик является ути­
литой, поскольку это отдельная программа, а вот библиотеки не относятся к
утилитам. Тем не менее библиотеки помогают создавать более качественные
приложения. (О некоторых из них будет рассказываться в главе    21.)
  Для    Python   имеется множество универсальных и специализированных ути­
лит. На сайте     https: //wiki .python. org/moin/DevelopmentTools, утилиты
разбиты на следующие       13   категорий:

            ))    AutomatedRefactoringTools    (автоматизированные утилиты ре­
                  факторинга);

            ))    BugTracking (отслеживание ошибок);
           ))   ConfigurationAndBuildTools             (утилиты конфигурирования и
                сборки);

           ))   DistributionUtili ties       (дистрибутивные утилиты);

           ))    DocumentationTools       (утилиты документирования);

           ))    IntegratedDevelopmentEnvironments             (интегрированные среды
                разработки);

           ))    PythonDebuggers    (отладчики   Python);
           ))    PythonEdi tors   (редакторы   Python);
           ))    PythonShells   (командные оболочки        Python);
           ))   SkeletonBuilderTools        (утилиты   -   построители каркасов прило-
                жений);

           ))    TestSoftware   (тестовое ПО);

           ))    UsefulModules    (полезные модули);

           ))   VersionControl     (контроль версий).

  Отметим, что это далеко не полные списки. В Интернете можно найти мно­
го других списков.

  Все это многообразие невозможно охватить в одной главе, поэтому мы рас­
смотрим лишь наиболее интересные утилиты, заслуживающие вашего внима­
ния. После ознакомления с данной главой желательно поискать в Интернете
и другие утилиты. Может оказаться, что утилита, которую вы планируете со­
здать, уже существует, причем в нескольких вариантах.




Отслеживание ошибок с помощью
Roundup lssue Tracker
  Существует целый ряд сайтов, помогающих отслеживать ошибки в при­
ложениях   Python,   среди которых    -
                                      Github (https: //github. com/), Google
Code (https: / / code. google. com/), BitBucket (https: / /Ьi tbucket. org /) и
Launchpad (https: //launchpad. net/). Это общедоступные сайты, но, как
правило, они не столь удобны в использовании, как специализированное про­
граммное обеспечение. Одним из наилучших инструментов является               Roundup
lssue Tracker (http: / /roundup. sourceforge. net/). Он работает            на любой
платформе, где поддерживается Python, и предлагает следующие                основные
возможности:


           ))    отслеживание ошибок;

           ))    управление списком запланированных действий.



386    ЧАСТЬ 5    Великолепные десятки
   Приложив чуть больше усилий в процессе установки программы, вы сможе­
те получить доступ к расширенным возможностям, которые делают программу

особенно полезной. Для этого вам придется установить несколько дополни­
тельных программ, в частности, СУБД (система управления базами данных).
В инструкции указано, что именно следует установить и какие сторонние при­
ложения являются совместимыми. Вот перечень расширенных возможностей,
которые вы получите.


            >>   Служба поддержки клиентов, предлагающая следующие услуги:

                 о   мастер ответов по телефону;

                 •   сетевые ссылки;

                 •   трекеры системных и других ошибок.

            »    Управление проблемами для рабочих групп       IETF (lnternet Engine-
                 ering Task Force).
            »    Отслеживание потенциальных клиентов.

            »    Представление материалов для конференций.

            »    Двойной "слепой" метод управления лицами, принимающими ре­
                 шения.

            »    Ведение блога (простейшие возможности, которые со временем
                 будут усложняться).




Создание виртуальной среды
с помощью VirtualEnv
   Существует много причин для создания виртуальных сред, но главная из
них при работе с     Python -   обеспечение более безопасной и надежной среды
тестирования. Применяя одинаковую среду тестирования, можно обеспечивать
стабильность работы приложения до тех пор, пока оно не будет достаточно
готово для тестирования в производственной среде. Программа              VirtualEnv
(ht tps: / /pypi. python. org /pypi / virt ualenv)   предоставляет инструменты для
создания виртуальной среды        Python,   которую можно использовать на началь­
ных этапах процесса тестирования или при диагностике проблем, связанных
с программной средой. Следует помнить, что существуют как минимум три
стандартных уровня тестирования, которые нужно выполнять.


            »    Отсnеживание ошибок. Проверка приложения на наличие ошибок.

            »    Производитеnьность. Проверка соответствия приложения требо­
                 ваниям быстродействия, надежности и безопасности.



                 ГЛАВА 19    Десять утилит, улучшающих работу с Python           387
              ))   Ю:sабиnити (удобство исnоnь:sования). Проверка того, что при­
                   ложение соответствует требованиям пользователя и реагирует на
                   ввод данных предсказуемым образом.


             Большинство приложений      Python   не следует запускать в виртуаль­
             ной среде после того, как они были развернуты в производственной
             системе. Это связано с тем, что большинству приложений          Python
ЗАПОМНИ!
             требуется доступ к внешнему миру, а изоляция в виртуальной среде
             препятствует этому.




  НЕ ПРОВОДИТЕ ТЕСТИРОВАНИЕ НА ПРОИЗВОДСТВЕННОМ СЕРВЕРЕ


  Некоторые разработчики допускают серьезную ошибку, проводя тестирова­
  ние еще незаконченного приложения на производственном сервере, к кото­

  рому получают доступ пользователи. Основная причина, по которой не следу­
  еттестировать приложение на рабочем сервере,      - возможная потеря данных.
  Если предоставить пользователям доступ к тестовой версии вашего приложе­
  ния, то ошибки, связанные с некорректным обращением к базам данных или
  другим источникам данных, могут привести к безвозвратной потере данных.

  Следует понимать, что у вас есть лишь один шанс для того, чтобы произвести
  впечатление на пользователей. Многие программные проекты терпят неудачу
  из-за того, что пользователям не нравится конечный результат. Программа го­
  това, но оказывается ненужной пользователям, которые считают ее плохой по
  тем или иным причинам. У пользователя одна цель: выполнить поставленную
  задачу и заняться другими делами. Если они видят, что приложение отнимает
  у них время, они стараются его избегать.

  У незавершенных приложений также могут быть уязвимости, через которые
  недобросовестные пользователи смогут получить доступ к вашей сети. Не
  важно, насколько хорошо работает защитное ПО, если вы оставляете дверь
  открытой для любого, кто проходит мимо. Избавиться от непрошенных гостей
  практически невозможно, и даже если вы перекроете обнаруженные "дыры';
  данные уже будут скомпрометированы. Восстановление после взлома        -   до­
  статочно непростая задача, порой слишком болезненная . Короче говоря, ни­
  когда не тестируйте приложение на производственном сервере, поскольку
  риски слишком высоки .




388        ЧАСТЬ 5   Великолепные десятки
Инсталляция приложений
с помощью Pylnstaller
   Пользователям не хочется тратить много времени на инсталляцию прило­
жения, каким бы полезным оно ни было. В некоторых случаях недостаточ­
но опытный пользователь может вообще не суметь установить приложение.
Короче говоря, необходим надежный способ передачи приложения из вашей
системы в систему пользователя. Для этого существуют установщики, такие
как   Pylnstaller (http://www.pyinstaller.org/). Они     преобразуют приложение
в пакет, который может быть легко инсталлирован пользователем.
  Утилита    Pylnstaller работает   на всех платформах, поддерживающих   Python,
поэтому является универсальным решением. Кроме того, при необходимости
можно подключать инструменты, характерные для конкретной платформы.
Например, в    Windows   можно создавать подписанные исполняемые файлы.
Разработчики Мае оценят то, что        Pylnstaller   гарантирует поддержку паке­
тов. С другой стороны, подобных вещей лучше избегать. Если задействуются
специфичные для платформы средства, установка пройдет успешно только на
этой конкретной платформе.

            Многие утилиты-установщики, доступные в Интернете, зависят от
            платформы. Если вы ищите установщик, который создает исполня­
            емые файлы, убедитесь в том, что они не будут зависеть от приме­
ВНИМАНИЕ!
            няемой платформы (или, по крайней мере, будут соответствовать
            целевой платформе). Важно получить продукт, который будет рабо­
            тать везде, где вы хотите. Универсального языка программирования
            недостаточно, если установочный пакет фактически препятствует
            процессу установки.




   НЕ ИСПОЛЬЗУЙТЕ ПРОГРАММЫ, ЛИШЕННЫЕ ПОДДЕРЖКИ


   Некоторые инструменты Python, доступные в Интернете, являются орфан­
  ными, т.е. перестали активно поддерживаться их создателями. Разработчики
   приложений Python могут продолжать пользоваться этими инструментами,
   поскольку им нравятся реализованные в них функции. Но поступать так слиш­
   ком рискованно, поскольку нет гарантии, что программа будет совместима
  с последней версией    Python. Лучше выбирать те инструменты, которые пол­
   ностью поддерживаются их создателями.


   Если вам абсолютно необходим такой инструмент (например, только он по­
  зволяет решить поставленную задачу), убедитесь в том, что он хотя бы имеет


                ГЛАВА 19   Десять утилит, улучшающих работу с Python        389
  поддержку со стороны сообщества пользователей. Вы по крайней мере смо­
  жете получить нужную информацию, когда вам понадобится поддержка.
  В противном случае можно потратить много времени в бесплодных попытках
  добиться результата от программы, которая никогда не будет работать долж­
  ным образом.




Создание документации для разработчиков
с помощью утилиты pdoc

  С приложениями обычно связаны два вида документации: пользователь­
ская и разработчика. Первая содержит информацию об использовании прило­
жения, тогда как вторая демонстрирует, каким образом устроено и работает
приложение. Для библиотеки требуется только документация разработчика, а
для настольного приложения может понадобиться лишь пользовательская до­
кументация. Сервисная служба может потребовать оба вида документации в
зависимости от того, кто ее использует и как она была создана. Большая часть
документации относится к разработчикам, и утилита
                                               pdoc помогает ее сформи­
ровать(https: / /github. com/BurntSushi/pdoc).
  Работа утилиты pdoc основана на информации, которая включается в код в
виде строк документации и комментариев. На выходе формируется текстовый
файл или НТМL-документ. Можно также подключить ее к веб-серверу, чтобы
можно было просматривать документацию непосредственно в браузере. По
сути, это замена старой утилиты   epydoc,   которая больше не поддерживается.



  СТРОКИ ДОКУМЕНТАЦИИ


  Это особый вид комментария, который берется в тройные кавычки, например:

   """Это   строка документации."""


  Строки документации связываются с различными элементами кода, такими как
  пакеты, функции, классы и методы. Любой объект, создаваемый в Pythoп, мо­
  жет включать строку документации, которая описывает его назначение.


  Самый простой способ увидеть строку документации -         указать после име­
  ни объекта специальный метод        doc    ().   Например, если ввести   print
   (МyClass ._doc_O), отобразится строка документации для класса Му
  Class. Доступ к строке документации можно также получить с помощью мето­
  да help (),например help (MyClass). Хорошие строки документации содер­
  жат сведения о том, что именно делает объект, а не как он это делает.




390      ЧАСТЬ   5   Великолепные десятки
  Сторонние утилиты также могут задействовать строки документации. Имея
  подходящую утилиту, можно составить документацию для всей библиотеки,
  не написав ни одного дополнительного предложения. Утилита найдет строки
  документации в коде библиотеки и сформирует из них документацию. Следо­
  вательно, несмотря на то что строки документации и комментарии использу­

  ются для разных целей, они одинаково важны в коде           Python.



Разработка кода приложения
с помощью Komodo Edit
  В книге рассматривалась работа в интерактивных средах разработки                  (IDE),
но не было дано конкретных рекомендаций (если не считать описания возмож­
ностей      Jupyter Notebook).    Выбор   IDE   зависит от задач, стоящих перед разра­
ботчиком, уровня его навыков и типов создаваемых приложений. Одни                     IDE
предпочтительнее, чем другие, если речь идет о конкретных видах приложе­

ний. Одно из наилучших универсальных решений для начинающих разработ­
чиков   -     редактор   Komodo Edit,     который можно загрузить по следующему
адресу:


http://komodoide.com/komodo-edit/

  Программа доступна бесплатно. Она включает множество инструментов,
которые упростят процесс программирования по сравнению с                  IDLE.   Ниже пе­
речислены основные преимущества программы:


                >>   поддержка множества языков программирования;

                >>   автоматическое дополнение ключевых слов;

                »    проверка отступов;

                »    поддержка проектов, благодаря чему приложения частично коди­
                     руются еще до того, как пользователь приступит к программиро­

                     ванию;


                »    превосходный уровень поддержки.

   Главная особенность, отличающая              Komodo Edit   от других   IDE, заключает­
ся в наличии расширенного варианта среды. Если окажется, что                 Komodo Edit
не соответствует стоящим перед вами задачам, можно обновиться до уровня
Komodo IDE (http: / /komodoide. сот/).            Это среда, которая содержит множе­
ство инструментов уже профессионального уровня, таких как профилирова­
ние кода (проверка скорости работы приложения) и обозреватель баз данных
(упрощает работу с источниками данных).



                     ГЛАВА    19 Десять утилит, улучшающих работу с Python             391
Отладка приложения с помощью
утилиты pydЬgr

   Профессиональная среда разработки, такая как           Komodo IDE, поставляется с
полноценным отладчиком . Даже в редакторе              Komodo Edit имеется простой от­
ладчик . Но если вы используете среду попроще, то отладчика может вообще не
оказаться . Отладчик          -   это программа, которая помогает обнаруживать ошиб­
ки в приложении и исправлять их . Чем лучше отладчик, тем меньше усилий
потребуется для выявления и устранения ошибок. Если применяемая среда не
содержит отладчик, воспользуйтесь сторонним решением, например утилитой
pyd.Ьgr, доступной по следующему адресу:

ht t ps : //code.goog le .com/ p/pydbgr /

              Это достаточно хороший отладчик, который обеспечивает стандарт­
              ные возможности , такие как цветовая разметка кода (выделение
              цветом определенных элементов синтаксиса , например ключевых
 ЗАПОМНИ!
              слов) , но также поддерживает ряд нестандартных функций , которые
              присущи только ему. Ниже перечислены ключевые преимущества
              отладчика pyd.Ьgr, которые делают его хорошим выбором , если ваш
              редактор не поставляется с отладчиком .


               ))       Улучшенная команда     eval. Команда eval   позволяет увидеть, что
                        произойдет при выполнении строки кода, еще до того, как она бу­
                        дет запущена . Это дает возможность выполнять анализ "что, если" в
                        процессе отладки приложения.

               ))       Внепроцессная отладка. Обычно отладка приложений выполня­
                        ется на одном компьютере . Фактически отладчик является частью
                        процесса приложения, т.е . потенциально может влиять на сам про­

                        цесс отладки . Использование внепроцессной отладки означает, что
                        отладчик не влияет на приложение, и вам не нужно запускать при ­

                        ложение на одном компьютере с отладчиком.

               ))       Тщательная проверка байт-кода. Просмотр того, как написанный
                        вами код приложения превращается в байт-код (который, соб­
                        ственно, и обрабатывается интерпретатором    Python), иногда помо­
                        гает в решении сложных проблем.

               ))       Фильтрация и отслеживание событий. При запуске приложения
                        в отладчике генерируется ряд событий, помогающих отладчику
                        ориентироваться в происходящем . Например, при переходе к сле­
                        дующей строке кода генерируется одно событие, при возврате из




392         ЧАСТЬ   5     Великолепные десятки
                  функции возникает другое событие и т.п. Это позволяет контролиро­
                  вать, каким образом отладчик выполняет трассировку приложения
                    и на какие события он реагирует.




Переход в интерактивную
среду с помощью                          IPython
   Стандартная оболочка           Python отлично     подходит для решения большого чис­
ла интерактивных задач. Но, поработав с ней, вы поймете, что она имеет ряд
недостатков. Самый большой недостаток заключается в том, что она является
чисто текстовой средой, в которую нужно вводить команды. Усовершенство­
ванная оболочка, такая как           IPython (ht tp: / / ipython. org /),   предлагает более
дружественную интерактивную среду с графическим интерфейсом, что позво­
ляет не запоминать синтаксис сложных команд.



            IPython -         это не просто оболочка, а среда, в которой можно взаи­
            модействовать с         Python   по-новому, например отображать графики с
            результатами работы созданных с помощью                Python    формул. Кроме
 3АПОМНИI
            того,   IPython     разработана как интерфейс для взаимодействия с дру­
            гими языками программирования. Фактически                  IPython   отправляет
            команды реальной оболочке в фоновом режиме, поэтому можно ис­
            пользовать оболочки для других языков программирования, таких
            как   Julia   и   Haskell.

   Одной из наиболее интересных особенностей                IPython является    возможность
функционировать в параллельных вычислительных средах. Обычно оболочка
является однопоточной, поэтому выполнять параллельные вычисления невоз­
можно, нельзя даже сформировать многопоточную среду. Одно это делает обо­
лочку   IPython заслуживающей            внимания.



Тестирование приложений
Python с помощью PyUnit
   Рано или поздно вы обязательно столкнетесь с тестированием приложений,
ведь необходимо убедиться в том, что они работают так, как задумано. Тести­
рование можно выполнять, поочередно вводя команды и проверяя результа­

ты либо автоматизировав весь процесс. Очевидно, что автоматизированный
подход предпочтительнее, ведь это намного быстрее. Программные продукты,


                  ГЛАВА 19        Десять утилит, улучшающих работу с Python             393
такие как     PyUnit (https: / /wiki .python . org / moin / PyUnit), значительно упро­
щают процесс модульного тестирования.

   Интересной особенностью          PyUnit является то, что в данном случае для тес­
тирования фактически         создается код Python. Получаемый в результате сцена­
рий   -     это специализированное приложение, которое проверяет основное при­
ложение на наличие ошибок.

               Казалось бы, именно сценарии, а не профессионально написанные
               приложения, должны содержать ошибки. Однако сценарий тести­
               рования спроектирован чрезвычайно просто, благодаря чему даже
 3АЛОМНИI
               незначительные ошибки сценария достаточно заметны. Конечно,
               ошибки могут быть и в самом сценарии (что случается крайне ред­
               ко) , поэтому, если проблему нельзя соотнести с приложением, необ­
               ходимо проверить сценарий.




Приведение кода в порядок
с помощью утилиты isort

   Код на      Python   может стать слишком запутанным, особенно если не вклю­
чать инструкции импорта в верхней части файла. В некоторых ситуациях до­
вольно трудно выяснить, что же происходит с кодом, если не привести его

в порядок. Утилита         is o rt,   доступная по адресу   http: / /t i mo th ycro s l e y .
github.io /i sort /, выполняет, казалось бы, скромную задачу по сортировке
инструкций импорта, собирая их в верхней части файла исходного кода. Такое
незначительное усовершенствование может существенно улучшить понимание

исходного кода.

   Знание того , какие именно модули необходимы для конкретного модуля.
упрощает выявление потенциальных проблем. Например, если у вас каким-то
образом оказалась более старая версия необходимого модуля, понимание того,
какие именно модули нужны приложению, поможет упростить поиск необхо­
димого модуля.

   Кроме того, информация о том , какие модули требуются приложению, важ­
на при распространении приложения среди пользователей. Сведения о том, что
пользователь располагает необходимыми модулями, помогает обеспечить пра­
вильную рабоrу приложения.




394         ЧАСТЬ   5 Великолепные десятки
Управление версиями с помощью                                        Mercurial
   Приложения, которые вы создавали в процессе работы с книгой, не слиш­
ком сложны. Для них управление версиями вряд ли понадобится. Но когда вы
начнете работать в корпоративной среде, создавая реальные пользовательские
приложения, управление версиями станет необходимым. Управление верси­
ями   -     это процесс отслеживания изменений, происходящих в приложении
между релизами в производственной среде. Когда вы говорите, что использу­
ете программу Му Арр         1.2,   вы ссылаетесь на версию    1.2   программы Му Арр.
Контроль версий позволяет понять, какая именно версия приложения исполь­
зуется после внесения очередных изменений.
   Для Pythoп доступны многочисленные системы управления версиями. Одно
из наиболее интересных решений-             Mercurial (www.mercurial-scm.org).     Эта
программа доступна практически для любой платформы, на которой будет вы­
полняться     Python,   поэтому не придется беспокоиться о смене продукта при
смене платформы. (Если для платформы нет исполняемой версии, всегда мож­
но создать ее из исходных кодов, предоставляемых на сайте программы.)
   В отличие от многих других систем,           Mercurial   распространяется бесплат­
но. Даже если впоследствии вам понадобится более продвинутая система, вы
получите полезный опыт, поработав с          Mercurial   над одним-двумя проектами.

              Хранение каждой версии приложения в отдельном месте для того,
              чтобы изменения в случае необходимости можно было откатить или
              повторить, называется управлением исходным кодом            (Source Code
 ЗАПОМНИ!
              Management -      SCM).   Взаимодействие с любой версией исходного
              кода для конкретного приложения крайне важно, если необходимо
              возвращаться назад для устранения проблем, которые возникли
              в новой версии.

   Удобно то, что пользователям          Mercurial   предоставляется превосходное он­
лайн-руководство, доступное по следующему адресу:

https://www.mercurial-scm.org/wiki/Tutorial

   Желательно самому выполнить упражнения, приведенные в этом руковод­
стве, чтобы лучше изучить процесс управления версиями, но даже просто
прочитать такое пособие будет полезным. Конечно, первый урок посвящен
установке     Mercurial.   Затем описывается процедура формирования хранилища
(места, где хранятся версии приложений), а также использования хранилища в
процессе разработки приложения. В результате вы получите четкое представ­
ление о том, как должна функционировать система управления версиями и за­
чем ее используют при разработке приложений.


                  ГЛАВА    19   Десять утилит, улучшающих работу с        Python   395
Глава              20

Десять (или около
того} библиотек,
о которь1х стоит знать

:' в   этой гЛдвЕ ...

  ))   Защита данных с помощью криптографии

  ))   Управление данными и их отображение

  )) Работа с графикой
  ))   Поиск необходимой информации

  ))    Получение доступа к коду    Java




р обычных приложений. Но многие приложения нуждаются в расширен­
           ython   предоставляет пользователю обширную поддержку при создании


           ных средствах, и здесь на помощь приходят библиотеки, которые рас­
ширяют функциональные возможности            Python.   Если, допустим, вам нужно по­
строить статистический график или воспроизвести звук, то такого рода задачи
требуют применения одной или нескольких библиотек.

              Один из наилучших сайтов для поиска библиотек в Интернете          -
              UsefulModules:
   совет      https: / /wiki. python. org /moin/UsefulModules

       Найти библиотеки можно и в других местах. Например, в статье        "7 Python
Libraries you should know about",      доступной по указанному ниже адресу, при­
водится относительно полное описание семи библиотек:
http://www.lleess.com/2013/03/7-pythonlibraries-you-should-
know-about.html

   Есть сайты, посвященные конкретным платформам, например                Unofficia\
Windows Binaries for Python Extension Packages:
http://www.lfd.uci.edu/-gohlke/pythonlibs/

   По большому счету списки библиотек можно найти где угодно.
   Задача данной главы не сводится к тому, чтобы расширить уже имеющийся
у вас список библиотек. Вашему вниманию предлагаются десять библиотек,
которые работают на всех платформах и предлагают базовые средства, необ­
ходимые любому пользователю. Будем считать, что эта глава         -   источник све­
дений об основных группах библиотек, которые вам понадобятся в будущем.



Создание безопасной среды
с помощью PyCrypto

   Защита данных          -   важный аспект программирования. Приложения полез­
ны тем, что позволяют легко манипулировать данными любых типов. Поэтому
приложение должно защищать данные, с которыми работает, иначе все усилия
будут напрасными. Именно данные имеют наибольшую ценность для бизнеса,
а приложение        -   это всего лишь инструмент. Защита данных предполагает пре­
дотвращение кражи или несанкционированного использования данных. Здесь
на помощь придут криптографические библиотеки типа           PyCrypto,   которая до­
ступна по следующему адресу:


https://www.dlitz.net/software/pycrypto/

              Основная задача этой библиотеки     -   преобразование данных таким
              образом, чтобы ни у кого не было возможности получить к ним до­
              ступ до тех пор, пока они находятся в долговременном хранилище.
 ЗАПОМНИ!
              Такой способ целенаправленной модификации данных называется
              шифрованием. При считывании данных в память подпрограмма-де­
              шифровщик преобразует зашифрованные данные в их оригиналь­
              ную форму, чтобы дать возможность приложению поработать с
              ними. Главным элементом этого процесса является ключ, исполь­
              зуемый для шифрования и дешифрования. Обеспечение безопасно­
              сти ключа также должно учитываться при разработке приложения.
              Пользователь, у которого есть ключ, сможет прочитать данные, но
              кроме него никто не получит к ним доступа.




398         ЧАСТЬ   5   Великолепные десятки
Взаимодействие с базами данных
с помощью SQLAlchemy
   База данных            -   это способ хранения повторяющихся или структурирован­
ных данных на диске. К примеру, записи (отдельные строки в базе данных)
клиентов относятся к разряду повторяющихся в силу одинаковой структуры
информации по каждому клиенту (имя, адрес, номер телефона и т.п.). Точный
способ хранения данных зависит от типа используемой базы данных. Одни
базы данных хранят информацию в текстовом виде, другие                 -    в табличном,
третьи      -        в неструктурированном. Для этого может использоваться древовид­
ная структура или плоский файл. В процессе знакомства с технологией СУБД
(система управления базами данных) вы столкнетесь с множеством новых, не­
знакомых терминов. Большая их часть понятна только администраторам баз
данных и не должна волновать рядового пользователя.



                     Самый распространенный тип баз данных        -   это реляционные
                     СУБД. В них используются таблицы, содержащие записи и поля.
                     Каждое поле   -   это часть столбца с однотипной информацией, на­
 ЗАПОМНИ!
                     пример с именем клиента. Таблицы связываются между собой раз­
                     ными способами, в результате чего возможно создание сложных
                     межтабличных отношений. Например, в таблице заказов у каждого
                     клиента может быть одна или несколько записей, поэтому таблица
                     клиентов и таблица заказов взаимосвязаны.

   В реляционных СУБД используется               SQL (Structured Query Language -   язык
структурированных запросов), который обеспечивает доступ к отдельным за­
писям. Для работы с СУБД нужны специальные инструменты, и здесь на по­
мощь приходит библиотека               SQLAlchemy (www. sqlalchemy. org).   Благодаря ей
упрощается создание различных запросов к базам данных, таких как получе­
ние данных конкретного клиента, создание записи для нового клиента, обнов­
ление записи существующего клиента и удаление записи о старом клиенте.




Смотрим на мир с помощью                                   Google Maps
   Геокодирование (нахождение географических координат, таких как широта
и долгота, на основе географических данных, таких как адрес объекта) в со­
временном мире имеет множество применений. Эту информацию можно ис­
пользовать, например, для поиска ближайшего ресторана, пропавшего в горах




 ГЛАВА          20    Десять (или около того) библиотек, о которых стоит знать      399
альпиниста и т.п. Для работы с географическими данными предназначено при­
ложение    Google Maps,   досrупное по следующему адресу:

https://pypi.python.org/pypi/googlemaps/

  Google Maps       используется не только для прокладывания маршрутов, но и
в геоинформационных системах          (Geographic lnformation System -    GIS).   По
большому счеrу задача     GIS   сводится к поиску местоположения того или иного
объекта и анализу карт местности. Другими словами,        Google Maps     позволяет
приложению видеть внешний мир.




Добавление rрафическоrо интерфейса
пользователя с помощью Tklnter
  Пользователи предпочитают работать с графическим интерфейсом в силу
его удобства и простоты по сравнению с интерфейсом командной строки. Гра­
фические интерфейсы в       Python   можно создавать с помощью различных про­
дуктов. Один из наиболее популярных инструментов        -Tklnter, досrупный       по
следующему адресу:


https://wiki.python.org/moin/Tkinter

  Этот пакет полюбился разработчикам за простоrу. В действительности это
интерфейс к библиотеке      Tcl/Tk (Tool Command Language -     Tool kit),   которая
доступна на сайте     www.tcl.tk.    Во многих языках Тс\/Тk служит основой для
создания графического интерфейса пользователя.

            Вряд ли вы воздержитесь от соблазна добавить графический ин­
            терфейс в свое приложение. Пользователям нравятся графические
            интерфейсы, и если вы хотите, чтобы ваше приложение завоевало
  СОВЕТ
            популярность, вам придется учитывать пожелания пользователей.
            Но помните о том, что разработка таких интерфейсов        -      это дли­
            тельный процесс, а кроме того, производительность графического
            приложения может оказаться ниже.




Создание презентации с табличными
данными с помощью PrettyTaЫe
  Табличные данные важно отображать так, чтобы они были понятны поль­
зователям. Из примеров, приведенных в книге, вы уже знаете, что табличные



400       ЧАСТЬ   5 Великолепные десятки
данные хранятся в формате, удобном для целей программирования. Однако
пользователям нужно что-то наглядное и визуально привлекательное. Библио­
тека PrettyTaЬ\e, которая доступна по адресу       https: / /pypi.python.org/pypi/
PrettyTaЬle, позволяет создавать красивые табличные презентации в прило­
жениях командной строки.




Добавление звука с помощью                                  PyAudio
  Звук   -   это удобный способ передачи информации определенного рода. Но
его следует применять с осторожностью, поскольку глухонемые его не слышат,

а тех, кто слышит, обилие звукового сопровождения зачастую просто раздра­
жает. Как бы там ни было, звук порой оказывается важным средством комму­
никации (или просто добавляет в приложение определенную изюминку).
  Одной из наилучших межплатформенных библиотек, предназначенных для
работы со звуком в приложениях        Python,   является   PyAudio:
http://people.csail.mit.edu/hubert/pyaudio/

  Эта библиотека позволяет записывать и воспроизводить звуки. Например,
можно записать аудиозаметки для выполняемых задач и затем при необходи­
мости воспроизвести список заметок.




   МЕТОДИКИ РАБОТЫ СО ЗВУКОМ В               PYTHON

  Со звуком можно работать по-разному. Основные мультимедийные службы
  Python (см. документацию, доступную по адресу https: / /docs. python.
   org / 3/ library /rom. html)   реализуют базовую функциональность воспроиз­
   ведения звука. Можно также записывать определенные типы аудиофайлов,
  хотя выбор файловых форматов ограничен. Кроме того, некоторые пакеты
  типа   winsound (https://docs.python.org/3/library/winsound.htm l)
  являются платформенно-зависимыми, из-за чего не могут использоваться в
  универсальных приложениях.


  Более продвинутый вариант, предлагающий расширенную функциональность
  работы со звуком,   - библиотеки типа PyAudio. Перечень таких библиотек до­
  ступен по следующей ссылке:

  https://wiki.python.org/moin/Audio
  Эти библиотеки обычно ориентируются на коммерческие приложения, обе­
  спечивая, например, запись и воспроизведение голосовых заметок. В их зада­
   чу не входит воспроизведение высококачественного звука.




 ГЛАВА 20    Десять (или около того) библиотек, о которых стоит знать         401
   Для геймеров важна поддержка звуковых эффектов, таких как шаги приближа­
   ющегося монстра. Соответствующие инструменты содержатся в библиотеках
   типа     PyGame (http://www. pygame. org/news. html).     Их использование пред­
   полагает наличие высококлассного оборудования, а кроме того, вам придется
   потратить немало времени на разработку аудиофункций приложения. Пере­
   чень таких библиотек можно найти по следующему адресу:

   https://wiki.python.org/moin/PythonGameLibraries


              Работа со звуком имеет свои плюсы и минусы. Например, платфор­
              менно-независимая библиотека не сможет задействовать специаль­
              ные инструменты, предлагаемые той или иной платформой. Более
  СОВЕТ
              того, она может не поддерживать многие файловые форматы, ис­
              пользуемые конкретными платформами. Задача платформенно-не­
              зависимой библиотеки сводится к обеспечению базовой поддержки
              звука на всех системах, с которыми она может взаимодействовать.




Построение графиков с помощью                                     PyQtGraph
   Мы привыкли воспринимать информацию визуально. Если пользователю
сначала показать данные в виде таблицы, а затем          -     в виде графика, то ему
больше запомнится второй вариант. Благодаря графикам люди видят тренды
и понимают, почему данные меняются в ту или иную сторону. Тем не менее
передать на экране табличную информацию в виде графиков не так-то просто.
Для этого применяется библиотека         PyQtGraph ( www. pyqtgraph. org).
   Несмотря на то что библиотека предназначена для выполнения инженер­
ных, математических и научных вычислений, ее можно применять и в других
целях.      PyQtGraph    поддерживает вывод двух- и трехмерных диаграмм, и с ее
помощью можно строить графики на основе числовых таблиц. Результат пол­
ностью интерактивен, поэтому пользователь может выбрать область диаграм­
мы для редактирования. Кроме того, библиотека располагает широким набо­
ром разнообразных графических элементов, или виджетов (например, кнопок,
которые можно отображать на экране), упрощающих процесс кодирования.

               В отличие от других библиотек, представленных в этой главе,
               PyQtGraph    не является автономной. Это означает, что для ее исполь­
              зования должны быть установлены другие приложения, что неуди­
 ЗАПОМНИ!
               вительно, поскольку   PyQtGraph   выполняет большой объем вычисле­
               ний. Библиотека требует наличия следующих компонентов:




402         ЧАСТЬ   5   Великолепные десятки
                 ))   Python   версии      2.7 или   выше;

                 ))   PyQt версии 4.8 или выше (https: //wiki .python. org / moin / PyQt)
                      либо PySide (https: / /wiki. python. org / moin / PySide);
                 ))   numpy (http: // www . numpy . o rg / );
                 ))   scipy(http: // www .s c ipy . org / );
                 ))   PyOpenGL (http: / / pyopengl. s ourceforge. ne t/).



Поиск информации с помощью                                          IRLib
  Когда объем информации достигает внушительных размеров , найти ее бы­
вает очень трудно. Представьте, что жесткий диск                -   это огромная древовид­
ная база данных свободной струкrуры , в которой отсутствует индексация. При
расширении и увеличении такой структуры данные в ней просто теряются .
(Попробуйте , например, найти на диске фотографии с прошлогоднего отпу­
ска, и вы поймете, о чем идет речь.) Поэтому важно встраивать в приложение
возможности поиска, чтобы пользователи могли находить файлы или нужные
данные.



                Для   Python   доступен целый ряд поисковых библиотек. Проблема в
                том, что их установка требует определенных усилий, и к тому же
                они не обеспечивают достаточную платформенную поддержку. По
ВНИМАНИВ
                сути, некоторые из них работают только на одной или двух плат­
                формах. Тем не менее библиотека    IRLib (http s : // github.c om/
                gr33ndata / irlib) написана исключительно на Python, а это гаран­
                тия того, что она будет работать на всех платформах. Если ее ока­
                жется недостаточно , удостоверьтесь, что новый продукт сможет
                обеспечить необходимую поисковую функциональность на всех
                выбранных платформах и что его установка не потребует больших
                усилий .


   Принцип работы              IRLib   заключается в создании поискового индекса для
любого типа информации, с которой вы хотите работать. Этот индекс можно
сохранить на диске для последующего использования. Поисковый механизм
работает на основе метрик              -    записей , наиболее точно соответствующих кри­
териям поиска .




 ГЛАВА     20    Десять (или около того) библиотек, о которых стоит знать             403
Созданиеинтероперабельной
среды Java с помощью JPype

  Python       предоставляет доступ к огромному массиву библиотек, которых
должно быть более чем достаточно. Но что если вы хотите использовать би­
блиотеку    Java,   которая идеально подходит для ваших задач? Напрямую обра­
титься к ней из приложения        Python   невозможно. В таком случае на помощь
придет библиотека      JPype (http: / /jpype. sourceforge. net/), позволяющая по­
лучить доступ ко многим (но не ко всем) библиотекам       Java непосредственно из
Python.   Она создает своего рода мост между двумя языками на уровне байт-ко­
да. Вам не придется делать ничего сверхъестественного для работы с             Java.




                Добиться интероперабельности двух языков можно разными спо-
   вниМАние1    собами. Один из них -   создание моста, например с помощью JPype.
  Другой способ -       преобразование кода, созданного для одного языка, в код
  другого языка . Этот подход применяется в Jython       (ht tps : / /wi ki . python .
  org / j ython/}. Данная   утилита преобразует код
                                               Python в код Java, позволяя
  задействовать в приложении весь функционал Java и в то же время сохранять
  все полезные наработки Python.

  Какое бы решение вы ни выбрали, вам придется столкнуться с определенными
  ограничениями . Например, в JPype нет доступа к некоторым библиотекам Java.
  Более того, при использовании этой библиотеки выполнение приложения мо­
  жет сильно замедлиться, поскольку мост       JPype постоянно преобразует вызо­
  вы и данные. Проблема, присущая        Jython, заключается в том, что вы теряете
  возможность модифицировать код после преобразования . Любые изменения
  будут вызывать несовместимость между оригинальным кодом              Python и его
  Jаvа-аналогом. Другими словами, не существует идеального решения по со­
  вмещению всего самого лучшего из двух языков в одном приложении.




Доступ к локальным сетевым ресурсам
с помощью Twisted                       Matrix
  В зависимости от настроек сети может потребоваться доступ к файлам и
другим ресурсам, который нельзя получить с помощью встроенных инстру­
ментов платформы. В таком случае воспользуйтесь библиотекой             Twisted Matrix


404       ЧАСТЬ 5    Великолепные десятки
(https: / /twistedmatrix. com/trac/). Она содержит функции, позволяющие
устанавливать подключения независимо от типа используемого протокола.

  Особенностью библиотеки является то, что она управляется событиями.
Это означает, что приложение не "зависает" в ожидании ответа сети. Более
того, поддержка событий позволяет реализовывать асинхронное взаимодей­
ствие (при котором запрос отправляется одной процедурой, а затем обрабаты­
вается совершенно другой).




Доступ к интернет-ресурсам
с помощью библиотек
  Несмотря на то что такие продукты, как          Twisted Matrix,   позволяют обра­
батывать сетевые запросы, оптимальным решением при работе в Интернете
является получение специализированной библиотеки протокола НТТР. Это
объясняется тем, что специализированная библиотека производительнее и
функциональнее. Если требуется явная поддержка НТТР или             HTTPS,   восполь­
зуйтесь библиотекой          httplib2, доступной по следующему адресу:
https://github.com/jcgregorio/httplib2

  Эта библиотека, написанная исключительно на          Python, существенно упро­
щает обработку таких НТТР-запросов, как         Keep-Alive. (Keep-Alive - это зна­
чение, определяющее, как долго должен быть открыт порт в ожидании ответа,
чтобы приложению не приходилось каждый раз повторно создавать соедине­
ние, тратя при этом ресурсы и время.) Она обеспечивает полную поддержку
запросов   GET   и   POST,   а также стандартных методов сжатия, применяемых при

передаче данных в Интернете, таких как        deflate   и   gzip.




 ГЛАВА   20   Десять (или около того) библиотек, о которых стоит знать           405
Предметный указатель
                   А          localhost 357
Anaconda 76                                      м
 кеш пакетов 223
 утилита Prompt 233, 245
                              Mercurial 395
ASCll 252                     MIME 362

                    с
                                                 N
С#33                          NumPy 30
CRUD 53, 335                                     р


                    F         Perl 34
FIFO 291                      PIL 377
                              РОР3 356

                   G          PrettyTaЬle 400
                              PyAudio 401
Google Maps 399
                              PyCrypto 398
                    н         Pydoc 244
                              Pylnstaller 389
HTML 367
                              PyQtGraph 402
НТТР 405
                              PyUnit 393

                                                 R
IDE 54, 73,378
                              Roundup lssue Tracker 386
IDLE 54, 74, 378
/Python 116, 393                                 s
IRLib 403
                              SciPy 30
                    J         SMTP 354
                               сервер 366
Java 33
                              SOAP 377
JPype 404
                              SQLAlchemy 399
JupyterNotebook 73, 83, 101
  закрытие 98                                    т
  справочная система 114
                              Tklnter 400
Jython 404

                    к
                                                 u
                              Unicode 382
Komodo Edit 391

                    L                            v
                              VirtualEnv 387
LlFO 291
                              х                                               и
XML 30, 379                                     Императивное программирование                  61
                                                Импорт   219
                              А                 Индекс   275
Аргумент 56, 147                                 отрицательный           276
 именованный 149                                Инструкция
 позиционный 148                                 break 174
 список 321                                      continue 176
Арифметическая операция                 13 7     from .. .impor1 225, 228
Атрибут     220, 241                             if 156
                                                 if."elif 163
                              Б                  if".else 161
Баг   74                                         import 225, 226
База данных  399                                 pass 177
Байт-код 392                                     raise 209
Библиотека 219,397                               retum 151
Блок кода 158, 220                               switch 297
Блокнот 76                                       вложенная      166
 импорт 89                                       составная     161
 создание 86                                    Интегрированная среда разработки                38
 удаление 89                                    Исключение  159, 185
 уровень доверия 108                             аргументы 198

 экспорт 87                                      вложенное 206

Булево значение 130                              встроенное 192
                                                 генерирование 208
                              в                  иерархическая обработка                 203
Версия     Python 35                             настраиваемое           212
Виджет      378, 402                             перехват     191
Виртуальная среда          387
                                                                               к
Вложенная инструкция              166
Выражение         135                           Кеш пакетов     223
                                                Класс   310
                              г                  дочерний     329
Геокодирование          399                      родительский        329
Геттер     326                                   создание     325
Грамотное программирование                 76    сохранение на диске               326
                                                Ключ словаря 294
                              д                 Коллекция 289
                                                Команда 59
Дата и время       13 1
                                                Командная строка          54
Двухсторонняя очередь             305
                                                 выход   69
Дерево выбора        166
                                                Комментарий         95
Документация        374
                                                 многострочный           97
 строка     390
                                                Комплексное число        128
                                                Конкатенация        95,258


                                                         Предметный указатель                        407
Конструктор      3 17                             выполнения  189
Контрольная точка           103                   компиляции  188
 восстановление            104                    логическая 191
 сохранение          104                          семантическая 191
Кортеж    291                                     синтаксическая 190


                            м                                                 п
Магическая функция              116              Пакет   219
Мантисса       128                                встроенный          222
Метод    312                                      документация          244
 аргумент self 316                                загрузка      232
 класса 314                                       импорт       225
 экземпляра 316                                   кеш    223
Модуль 219                                        обновление          237
                                                  поиск    231
                            н                     пользовательский            223
Наследование         311, 328                     просмотр содержимого                 240
Номер строки         11 О                         удаление 238
                                                  установка 235
                            о                    Папка 336
Оболочка 69                                      Переменная 124, 135

Объект 312                                        класса 310, 319

 Соuпtег 285                                      среды 58

Объектно-ориентированное                           ERRORLEVEL 69
        программирование              61          экземпляра          311, 321
Операнд 136                                      Перехват исключения              186
Оператор 136                                     Платформа       35
 арифметический   137                            Побитовая операция              139
 логический 139, 159                             Повторение       258
 перегрузка 312, 323                             Подсветка синтаксиса             379
 побитовый 139                                   Порт    356, 358
 позиционного расширения                   284   Порядок числа          128
 приоритет      142                              Последовательность           270, 290
 присваивания    140                             Предложение          161
 сравнения  13 8, 157                             else 178
 тернарный 136                                    except 195
 тождественности 142                              fiпally 213

 унарный 137                                     Приложение       23
 членства 141, 280                               Присваивание       140
Отладка 75                                       Производительность              382
Отладчик 187, 392                                Процедура       23
Отступы 94                                       Процедурное программирование                61
Очередь 291, 303                                 Путь    337
 двухсторонняя 305
Ошибка 187




408      Предметный указатель
                             р                                у

Расширение         336                   Указатель вставки  255
Репозиторий кода           84            Унарный оператор    137
                                         Управление   версиями 395
                             с           Управляющая последовательность       255
Сеттер      326                          Управляющий символ       255
Система счисления           126          Утилита  385
Словарь  290, 294                         conda 223,233
  ключ 294                                isort 394
Сокет 357                                 pdoc 390
Спагетти-код 309                          pip 233, 240
Специальный символ               254      pydbgr 392
Спецификация формата               265
                                                              ф
Список      270
 изменение         276                   Файл   336
 индекс      275                          изменение содержимого         347
 печать      283                          создание    341
 повторение элементов              280    удаление    351
 поиск      280                           чтение содержимого      344
 получение доступа              274      Функциональное программирование        61
 создание 272                            Функция    143
 сортировка 282                           append() 277, 306
 циклический обход               276      appendleft() 306
Справочная система              62        capitalize() 259
Сравнение  138, 157                       center() 259
Среда разработки  38                      clear() 277
Стек 291, 299                             сору() 277
Строка 130, 253                           count() 262, 290
 документации 390                         dir() 273
 обработка 259                            empty() 304
 поиск значения 262                       eпdswith() 263
 форматирование 265                       exit() 69
                                          expaпdtabs() 259
                             т            extend() 277, 306
Тег   113                                 extendleft() 306
Тернарный оператор               136      find() 263
Тестирование         393                  float() 130
Тип данных         125                    fonnat() 265
 bool 130                                 full() 304
 float 127                                get() 304
 int 126                                  help() 63
 с плавающей точкой               127     index() 263, 290
 целочисленный             126            input() 153
Тождественность            142            insert() 277
                                          int() 130


                                                   Предметный указатель         409
isalnt1m() 259                      аргумент      147
isalplш()    259                    возврат значения           150
isdecimal() 259                     определение        145
isdigit() 260                       перегрузка       311
islower() 260
                                                                х
isnumeric() 260
isspace() 260                      Хост   357
istitle() 260
                                                                ц
isupper() 260
join() 260, 285                    Цикл    172
 len() 260, 278                     for 172
 ljust() 260                        while 179
 lower() 260                        бесконечный         180
 lstrip() 260                       вложенный         182
 max() 260
                                                                ч
 min() 260
 open() 342                        Число
 ord() 130                          комплексное          128
 os.exit() 70                       с плавающей точкой               127
  os.remove() 351                   целое  126
  os.rmdir() 351                   Членство 141
  os.rmtree() 351
  рор() 277, 306
                                                                ш
  popleft() 306                    Шифрование           398
  put() 304
  quit() 69                                                     э
  range() 183                      Экземпляр         311
  remove() 277, 306                Экспонента         128
  replace() 263                    Экспоненциальная запись                 127
  reverse() 283                    Электронная почта            353
  rfind() 263
   riпdex() 263                                                 ю
   rjust() 260, 284                 Юзабилити        388
   rstrip() 261
   sort() 283                                                    я
   split() 232, 261                 Ядро    113
   splitliпes() 261
                                    Язык программирования                  26
   startswith() 264                 Ячейка      90
   str() 130                         выполнение содержимого                     107
   strip() 261                       добавление         105
    swapcase() 261                   документирующая                 92
    sys.exit() 70                    объединение  106
    title() 261                      перемещение 1Об
    type() 129                       разделение 106
    upper() 261
    zfill() 261


410         Предметный указатель
                                              P1ftlio1i
BESl'SELLING
воок
                                 qvLR         ttaйн,u1eol ®                                                СЕРИЯ
                                                                                                           КОМ11ЪЮ!Еl'НЬIХ
                                                                                                           книг от

SERIES                                        2-еи.зqанщ                                                   ДИАЛЕКТИКИ




    OcмlJtЬU! o~jzьt. JJ11tlzo1t
     Оператор   Тип               Оnис:анме                                        Пример

                Арифметический    Вычитание правого операнда из левого             5 - 2 = 3
                Унарный           Выполняет операцию отрицания для исходного       Результат выражения    - ( - 4)
                                  значения, в результате чего положительные        будет равен 4, а выражения
                                  значения становятся отрицательными и наоборот    -4--4
                Присваивание      Вычитание значения правого операнда из           MyVar -= 2
                                  значения левого операнда и присваивание

                                  результата певому операнду

     !=         Сравнение         Проверяет, будут ли два значения не равны.       1!       2 дает True
                                  В некоторых устаревших версиях Pythoп вместо
                                  оператора ! =допускается использовать оператор
                                  <>. В современных версиях Pythoп это приведет
                                  к ошибке
                Арифметический    Остаток от деления левого операнда на правый     5 %2 = 1
                Присваивание      Деление значения левого операнда на значение     MyVar %= 2
                                  правого операнда и присваивание остатка от

                                  деления левому операнду

     & (И)      Побитовый         Выполняет поразрядное сравнение двух             ОЫlОО      & ОЬ0110
                                  операндов, устанавливая бит результата в 1,      ОЬ0100
                                  если оба исходных бита равны 1
     *          Арифметический    Умножение правого операнда на левый              5 * 2 = 10
     **         Арифметический    Возведение левого операнда в степень,            5 ** 2 = 25
                                  задаваемую правым операндом
     **=        Присваивание      Возведение значения левого операнда в степень,   MyVar **= 2
                                  заданную правым операндом, и присваивание

                                  результата левому операнду

     *=         Присваивание      Умножение значения правого операнда на           MyVar *= 2
                                  значение левого операнда и присваивание

                                  результата левому операнду

     /          Арифметический    Деление левого операнда на правый                5 / 2 = 2.5
     11         Арифметический    Целочисленное деление левого операнда на         5 11 2 = 2
                                  правый (с окwлением вниз)
                Присваивание      Деление значения левого операнда на              MyVar //= 2
                                  значение правого операнда и присваивание

                                  целочисленного результата левому операнду

                Присваивание      Деление значения левого операнда на значение     MyVar /= 2
                                  правого операнда и присваивание результата

                                  левому операнду
                                              Pt(f/i(Jи,
BfSl'SELLING
воок
                                     f!vLR ltaЙRU"(J/®                                                           СЕРИЯ
                                                                                                                 КDМПЬЮПJr11ЫХ
                                                                                                                 КНИГ'ОТ

SERIES                                      2-е изqаи,и,е                                                        ДИАЛЕКТИКИ




     Оператор         Тип              Описание                                            Пример

                      Побитовый        Выполняет поразрядное сравнение двух                ОЫlОО      л   ОЬ0110

      (исключ.~ющее                    операндов, устанавливая бит результата в 1,         ОЫО10
      ИЛИ)                             если ровно один из исходных битов равен   1. Если
                                       же оба бита равны 1или оба бита равны О, то
                                       результирующий бит устанавливается равным О
      1   (ИЛИ)       Побитовый        Выполняет поразрядное сравнение двух                ОЫ100      1   ОЬ0110
                                       операндов, устанавливая бит результата в 1, если    ОЫ110
                                       один из исходных битов равен   1
                      Унарный          Инвертирует биты числа, в результате чего все       Результат выражения   -4 будет
                                       биты О превращаются в биты 1и наоборот              равен-5
      -(НЕ)           Побитовый        Инвертирует все разряды операнда                    -ОЫ100         -0Ы101
                                                                                           -ОЬ0110         -ObOlll
                      Арифметический   Сложение двух операндов                             5 + 2 = 7
      +               Унарный          Поддерживается исключительно ради полноты.          Результат выражения   +4 будет
                                       Возвращает значение операнда                        равен4
      +=              Присваивание     Добавление значения правого операнда к              MyVar += 2
                                       значению левого операнда и присваивание

                                       результата левому операнду

      <               Сравнение        Проверяет, будет ли значение левого операнда        1 < 2 дает True
                                       меньше значения правого операнда

      «(сдвиг         Побитовый        Сдвигает биты левого операнда влево на число        ОЬ00110011       << 2
      влево)                           позиций, задаваемых правым операндом. Все           ОЫ1001100
                                       новые биты устанавливаются равными О, а все
                                       отсекаемые биты теряются
      <=              Сравнение        Проверяет, будет ли значение левого операнда        1 <= 2 дает True
                                       меньше или равно значению правого операнда

                      Присваивание     Присваивание левому операнду значения правого       MyVa r = 5
                                       операнда

                      Сравнение        Проверяет, будут ли два значения равны.             1 ==     2дaeтFalse
                                       Обратите внимание на удвоение знака равенства.
                                       Ошибка многих новичков заключается в
                                       использовании одного знака равенства, что

                                       приводит к присваиванию одного значения

                                       другому

                      Сравнение        Проверяет, будет ли значение левого операнда        1 >    2дaeтFalse
                                       больше значения правого операнда
                      Сравнение        Проверяет, будет ли значение левого операнда           >= 2 дает False
                                       больше или равно значению правого операнда
                                         JJl(flion
BESl'SEl.UNG
воок
                             q.JA            ltaйн,u"ol®                                              СЕРИЯ
                                                                                                      КОМПЬ/О'П!l'ЮIХ
                                                                                                      КНl-П"ОТ

SERIES                                 2-еи.зqшше                                                     ДИАЛЕК111КИ




     Оператор   Тиn               Описание                                         Пример

      »(сдвиг   nобитовый         Сдвигает биты левого операнда вправо на число    ОЬ00110011     »   2
     вправо)                      позиций, задаваемых правым операндом. Все        ОЬ00001100
                                  новые биты устанавливаются равными О, а все
                                  отсекаемые биты теряются
     and        Логический        nроверяет, являются ли оба операнда истинными    True and True равно
                                  (True)                                           True
                                                                                   True and False равно
                                                                                   False
                                                                                   False and True равно
                                                                                   False
                                                                                   False and False равно
                                                                                   False
                Членство          nроверяет, содержится ли значение левого         "Привет" in "Привет
                                  операнда в последовательности, заданной          Пока" равнотruе
                                  правым операндом

      is        Тождественность   Возвращает True, если тип значения или           type(2) is      intpaвнo
                                  выражения правого операнда соответствует типу    True
                                  значения или выражения левого операнда

      is not    Тождественность   Возвращает т rue, если тип значения или          type (2) is not int
                                  выражения правого операнда не соответствует      равно False
                                  типу значения или выражения левого операнда

     not        Логический        Инвертирует булево значение операнда: истинное   not True равно False
                                  значение становится ложным, а ложное   -         not False равно True
                                  истинным

     not in     Членство          nроверяет, отсутствует ли значение левого        "Привет"      not in
                                  операнда в последовательности, заданной          "Привет Пока" равно
                                  правым операндом                                 False
      or        Логический        nроверяет, является ли один из операндов         True or True равно True
                                  истинным (True)                                  True or False равно
                                                                                   True
                                                                                   False or True равно
                                                                                   True
                                                                                   False or False равно
                                                                                   False
                                      79tlion
BESТSEUJNG
воок
                         q.мi ч,айн,u"оl®                                                          СЕРИЯ
                                                                                                   •ot.olldOl>J'IO.
                                                                                                   книг от

SERIES                               2-е и.зqшше                                                   ДИАЛЕКТИКИ




      Оператор                 Onllcaнмe


       ()                      С помощью скобок можно группировать выражения и переопределять
                               заданный по умолчанию приоритет. В результате операция с более низким
                               приоритетом (например, сложение) получает преимущество над операцией
                               с бопее высоким приоритетом (такой, как умножение)


      **                       Возведение левого операнда в степень, задаваемую правым операндом


      -+-                      Унарные операторы применяются к одной переменной или одному
                               выражению



      * / % 11                 Умножение, деление, остаток от деления (деление по модулю) и
                               целочисленное деление



      + -                      Сложение и вычитание


      >> <<                    Побитовый сдвиг вправо и влево


      &                        Побитовое И


                               Побитовое исключающее ИЛИ и простое ИЛИ
      л
            1




      <= < > >=                Операторы сравнения


                !=             Операторы равенства


      = %= /= / /= -   += *=   Операторыnрисваивания
      **=

      is                       Операторы тождественности
      is not

      in                       Операторы членства
      not in

      not or and               Логические операторы
                                              P9tlton
BFSl'SEUJNG
воок
                                  q.JJt          1tайн,и"оl®                                                   СЕРИЯ
                                                                                                               комm.кm!РНЫХ
                                                                                                               КНJ.П"ОТ

SERIES                                        2-е и.зqан.ие                                                    ДИАЛЕКТИКИ




    :PacJtjюcJliМн.eн.ltble .,uazuttecк,ue rptptк.и,uu
    d }ultlft'er Нotebook и J:Plftlio;z
    Маrмчеоw1 функция   Поддерживаn nм сrату< Оnмсанме
                        при отдеnьном вводе


    %alias              Да                    Назначает или отображает псевдоним для системной команды

    %autocall           Да                    Позволяет вызывать функции без ввода скобок. Имеет следующие настройки:
                                              Off, Smart (по умолчанию) и Full. В случае указания параметра
                                              Smar t скобки нужны только при наличии арrумента
    %automagic          Да                    Позволяет вызывать магические функции без ввода знака процента (%).
                                              Имеетследующие настройки: Fа 1 sе (по умолчанию) и т rue

    %autosave           Да                    Отображает или изменяет значение интервала между автоматическими
                                              сохранениями блокнота. По умолчанию сохранение происходит каждые 120
                                              секунд


                        Да                    Меняет текущий каталог. С помощью этой команды можно перемещаться по
                                              истории каталоmв или переходить к закладке


    %cls                Нет                   Выполняет очистку экрана

    %colors             Нет                   Задает цветовую схему для отображения текста, который ассоциируется с
                                              подсказками, информационной системой и обработчиками исключений.
                                              Доступные варианты: NoCo 1о r (черно-белая схема), L i nux (по
                                              умолчанию) и LightBG

    %config             Да                    Позволяет конфиrурировать IPythoп

    %dhist              Да                    Выводит список каталогов, к которым выполнялось обращение в ходе
                                              текущего сеанса


    %file               Нет                   Выводит имя файла, содержащеm исходный код данного объекта

    (бhist              Да                    Отображает список магических функций, которые вызывались во время
                                              текущего сеанса


    oinstall ext
    9
                        Нет                   Устанавливает заданный модуль расширения

                        Нет                   Загружает код приложения из друrого источника, например из Интернета

              ext       Нет                   Загружает расширение Pythoп с указанным именем модуля

    %lsmagic            Да                    Отображает список доступных в настоящий момент магических функций

    %magic              Да                    Отображает экран справки, содержащий информацию о магических функциях
                             JJlftlюJt
BISl'SELLING
воок
                         q.мt ttaй.JШкol®                                                     СЕРИЯ
                                                                                              1СОМ11Ь1О'1ЕlНЬ
                                                                                              книг от


                            2-е и.зqаJШе
                                                                                              ДJW!ЕК111К11
SERIES




     %matplotlib   Да        Устанавливает модуль построения диаrрамм, лозволяя отображать
                             rрафикивнутриячеекблокнота.Возможныезначения:
                                                                     'gtk ', 'gtkЗ ',
                             'inline', 'nbagg', 'osx', 'qt', 'qt4', 'qt5', 'tk'и
                             'wx'

     %paste        Нет       Вставляет содержимое буфера обмена в командную СТJЮку IPythoп


                   Нет       Показывает, каким образом вызываеЮI данный объект (при условии, что
                             объект является вызываемым)


                   Нет       Отображает ароку документации объекта


                   Нет       Выводит rюдробную информацию об объекте (часто более подробную, чем
                             предлагает справочная сиаема)


     %pinfo2       Нет       Выводит дополнительную информацию об объекте (если она доступна)

     %reload ext   Нет       Повторно загружает предварительно уаановленный модуль расширения

     %source       Нет       Отображает исходный код объекта (при условии, что он доступен)

     %timeit       Нет       Вычисляет наилучшую производительность инструкции

     %%timeit      Нет       Вычисляет наилучшую производительность дnя всех инарукций ячейки,
                             кроме той, которая находится в одной ароке с магической функцией (т.е.
                             являе11:я инструкцией инициализации)

     %unalias      Нет       Удаляет из списка ранее созданный псевдоним

     %unload ext   Нет       Выrружает указанный модуль расширения

     %%writefile   Нет       Записывает содержимое ячейки в указанный файл
ДЛЯ   W   "

чаиников
